
path = /Users/lap13494/workspace/ppl-extra-final/java-small/test/hadoop-splitted/TestKeyFieldHelper_testGetWordLengths_0.java
method_name = testGetWordLengths
method_body = public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator("\t"); String input = "hi"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.setKeyFieldSpec(1, 2); input = "hi\thello there"; result = helper.getWordLengths(input.getBytes(), 0, input.length()); assertTrue(equals(result, new int[] { 2, 2, 11 })); helper.setKeyFieldSeparator(" "); input = "hi hello\tthere you"; result = helper.getWordLengths(input.getBytes(), 0, input.length()); assertTrue(equals(result, new int[] { 3, 2, 11, 3 })); input = "hi hello there you where me there"; result = helper.getWordLengths(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 5, 4, 3, 5, 2, 3 })); input = "hi hello there you where me "; result = helper.getWordLengths(input.getBytes(), 10, input.length()); assertTrue(equals(result, new int[] { 5, 4, 3, 5, 2, 0 })); input = ""; result = helper.getWordLengths(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = " abc"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = " abc"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = " abc "; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator("abcd"); input = "abc"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }
predict, score, loss = testGetWordLengths, 0.9704363346099854, 0.32647424936294556

Trace of simplified code(s):
{"time": "2023-09-24 01:57:30.737536", "score": "0.9598", "loss": "0.544", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.setKeyFieldSpec(1, 2); input = \"hi\\thello there\"; result = helper.getWordLengths(input.getBytes(), 0, input.length()); assertTrue(equals(result, new int[] { 2, 2, 11 })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = helper.getWordLengths(input.getBytes(), 0, input.length()); assertTrue(equals(result, new int[] { 3, 2, 11, 3 })); input = \"hi hello there you where me there\"; result = helper.getWordLengths(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 5, 4, 3, 5, 2, 3 })); input = \"hi hello there you where me \"; result = helper.getWordLengths(input.getBytes(), 10, input.length()); assertTrue(equals(result, new int[] { 5, 4, 3, 5, 2, 0 })); input = \"\"; result = helper.getWordLengths(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 734, "n_pass": [1, 1, 1]}
{"time": "2023-09-24 01:57:33.347983", "score": "0.964", "loss": "0.3959", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.setKeyFieldSpec(1, 2); input = \"hi\\thello there\"; result = helper.getWordLengths(input.getBytes(), 0, input.length()); assertTrue(equals(result, new int[] { 2, 2, 11 })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3, 2, 11, 3 })); input = \"hi hello there you where me there\"; result = helper.getWordLengths(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 5, 4, 3, 5, 2, 3 })); input = \"hi hello there you where me \"; result = helper.getWordLengths(input.getBytes(), 10, input.length()); assertTrue(equals(result, new int[] { 5, 4, 3, 5, 2, 0 })); input = \"\"; result = helper.getWordLengths(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 711, "n_pass": [101, 2, 2]}
{"time": "2023-09-24 01:57:35.356420", "score": "0.9493", "loss": "0.4294", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.setKeyFieldSpec(1, 2); input = \"hi\\thello there\"; result = helper.getWordLengths(input.getBytes(), 0, input.length()); assertTrue(equals(result, new int[] { 2, 2, 11 })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3, 2, 11, 3 })); input = \"hi hello there you where me there\"; result = helper.getWordLengths(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 5, 4, 3, 5, 2, 3 })); input .getWordLengths(input.getBytes(), 10, input.length()); assertTrue(equals(result, new int[] { 5, 4, 3, 5, 2, 0 })); input = \"\"; result = helper.getWordLengths(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 688, "n_pass": [107, 3, 3]}
{"time": "2023-09-24 01:57:37.228961", "score": "0.971", "loss": "0.3412", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.setKeyFieldSpec(1, 2); input = \"hi\\thello there\"; result = helper.getWordLengths(input.getBytes(), 0, input.length()); assertTrue(equals(result, new int[] { 2, 2, 11 })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3, 2, 11, 3 })); input = \"hi hello there you where me there\"; result = helper.getWordLengths(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 5, 4, 3, 5, 2, 3 })); input (equals(result, new int[] { 5, 4, 3, 5, 2, 0 })); input = \"\"; result = helper.getWordLengths(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 665, "n_pass": [108, 4, 4]}
{"time": "2023-09-24 01:57:41.069829", "score": "0.975", "loss": "0.2371", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.setKeyFieldSpec(1, 2); input result = helper.getWordLengths(input.getBytes(), 0, input.length()); assertTrue(equals(result, new int[] { 2, 2, 11 })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3, 2, 11, 3 })); input = \"hi hello there you where me there\"; result = helper.getWordLengths(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 5, 4, 3, 5, 2, 3 })); input (equals(result, new int[] { 5, 4, 3, 5, 2, 0 })); input = \"\"; result = helper.getWordLengths(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 654, "n_pass": [236, 5, 5]}
{"time": "2023-09-24 01:57:43.366868", "score": "0.9681", "loss": "0.3673", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.setKeyFieldSpec(1, 2); input result = helper.getWordLengths(input.getBytes(), 0, input.length(new int[] { 2, 2, 11 })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3, 2, 11, 3 })); input = \"hi hello there you where me there\"; result = helper.getWordLengths(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 5, 4, 3, 5, 2, 3 })); input (equals(result, new int[] { 5, 4, 3, 5, 2, 0 })); input = \"\"; result = helper.getWordLengths(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 643, "n_pass": [239, 6, 6]}
{"time": "2023-09-24 01:57:45.385691", "score": "0.9691", "loss": "0.3016", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.setKeyFieldSpec(1, 2); input result = helper.getWordLengths(input.getBytes(), 0, input.length(new int[] { 2, 2, 11 })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hi hello there you where me there\"; result = helper.getWordLengths(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 5, 4, 3, 5, 2, 3 })); input (equals(result, new int[] { 5, 4, 3, 5, 2, 0 })); input = \"\"; result = helper.getWordLengths(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 632, "n_pass": [246, 7, 7]}
{"time": "2023-09-24 01:57:47.251765", "score": "0.9678", "loss": "0.2574", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.setKeyFieldSpec(1, 2); input result = helper.getWordLengths(input.getBytes(), 0, input.length(new int[] { 2, 2, 11 })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result = helper.getWordLengths(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 5, 4, 3, 5, 2, 3 })); input (equals(result, new int[] { 5, 4, 3, 5, 2, 0 })); input = \"\"; result = helper.getWordLengths(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 621, "n_pass": [248, 8, 8]}
{"time": "2023-09-24 01:57:49.178809", "score": "0.9664", "loss": "0.4228", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.setKeyFieldSpec(1, 2); input result = helper.getWordLengths(input.getBytes(), 0, input.length(new int[] { 2, 2, 11 })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result = helper.getWordLengths(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 4, 3, 5, 2, 0 })); input = \"\"; result = helper.getWordLengths(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 610, "n_pass": [253, 9, 9]}
{"time": "2023-09-24 01:57:51.837509", "score": "0.9646", "loss": "0.4718", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.result = helper.getWordLengths(input.getBytes(), 0, input.length(new int[] { 2, 2, 11 })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result = helper.getWordLengths(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 4, 3, 5, 2, 0 })); input = \"\"; result = helper.getWordLengths(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 599, "n_pass": [293, 10, 10]}
{"time": "2023-09-24 01:57:55.425456", "score": "0.936", "loss": "0.5109", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(), 0, input.length(new int[] { 2, 2, 11 })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result = helper.getWordLengths(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 4, 3, 5, 2, 0 })); input = \"\"; result = helper.getWordLengths(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 594, "n_pass": [452, 11, 11]}
{"time": "2023-09-24 01:57:57.305780", "score": "0.9602", "loss": "0.3557", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes, input.length(new int[] { 2, 2, 11 })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result = helper.getWordLengths(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 4, 3, 5, 2, 0 })); input = \"\"; result = helper.getWordLengths(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 589, "n_pass": [454, 12, 12]}
{"time": "2023-09-24 01:57:59.210985", "score": "0.9668", "loss": "0.3797", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, 2, 11 })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result = helper.getWordLengths(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 4, 3, 5, 2, 0 })); input = \"\"; result = helper.getWordLengths(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 584, "n_pass": [455, 13, 13]}
{"time": "2023-09-24 01:58:01.063182", "score": "0.9519", "loss": "0.5994", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result = helper.getWordLengths(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 4, 3, 5, 2, 0 })); input = \"\"; result = helper.getWordLengths(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 578, "n_pass": [458, 14, 14]}
{"time": "2023-09-24 01:58:03.057853", "score": "0.9563", "loss": "0.3415", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 4, 3, 5, 2, 0 })); input = \"\"; result = helper.getWordLengths(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 572, "n_pass": [470, 15, 15]}
{"time": "2023-09-24 01:58:05.032826", "score": "0.8619", "loss": "1.2075", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 5, 2, 0 })); input = \"\"; result = helper.getWordLengths(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 566, "n_pass": [481, 16, 16]}
{"time": "2023-09-24 01:58:06.980338", "score": "0.9311", "loss": "0.7939", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input = \"\"; result = helper.getWordLengths(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 560, "n_pass": [482, 17, 17]}
{"time": "2023-09-24 01:58:08.822343", "score": "0.9629", "loss": "0.3901", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input = \"\"; result(input.getBytes(), 0, 0); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 554, "n_pass": [486, 18, 18]}
{"time": "2023-09-24 01:58:11.195183", "score": "0.9515", "loss": "0.4217", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input = \"\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 548, "n_pass": [488, 19, 19]}
{"time": "2023-09-24 01:58:13.656108", "score": "0.9483", "loss": "0.3883", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input = \"\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 0, 0, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 542, "n_pass": [494, 20, 20]}
{"time": "2023-09-24 01:58:15.878484", "score": "0.9562", "loss": "0.4769", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input = \"\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 536, "n_pass": [502, 21, 21]}
{"time": "2023-09-24 01:58:19.914367", "score": "0.9596", "loss": "0.4026", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input = \"\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes()); assertTrue(equals(result, new int[] { 3, 0, 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 530, "n_pass": [508, 23, 22]}
{"time": "2023-09-24 01:58:22.011596", "score": "0.9655", "loss": "0.3376", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input = \"\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes()); assertTrue(equals(result, new int[] { 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 524, "n_pass": [512, 24, 23]}
{"time": "2023-09-24 01:58:23.907253", "score": "0.9191", "loss": "0.5819", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input = \"\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes()); assertTrue(equals(result, new int[] { 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input0, 2); assertTrue(equals(result, new int[] { 2, 0, 1 })); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 518, "n_pass": [518, 25, 24]}
{"time": "2023-09-24 01:58:25.823199", "score": "0.9284", "loss": "0.5885", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input = \"\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes()); assertTrue(equals(result, new int[] { 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input0, 2); assertTrue(equals(result, new int[] { 2,})); helper.setKeyFieldSeparator(\"abcd\"); input = \"abc\"; result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 512, "n_pass": [523, 26, 25]}
{"time": "2023-09-24 01:58:27.702260", "score": "0.9573", "loss": "0.3893", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input = \"\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes()); assertTrue(equals(result, new int[] { 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input0, 2); assertTrue(equals(result, new int[] { 2,})); helper.setKeyFieldSeparator(\"abcd\"); input =result = helper.getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 506, "n_pass": [527, 27, 26]}
{"time": "2023-09-24 01:58:29.598458", "score": "0.9571", "loss": "0.343", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input = \"\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes()); assertTrue(equals(result, new int[] { 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input0, 2); assertTrue(equals(result, new int[] { 2,})); helper.setKeyFieldSeparator(\"abcd\"); input =getWordLengths(input.getBytes(), 0, 3); assertTrue(equals(result, new int[] { 1, 3 })); }", "n_tokens": 500, "n_pass": [528, 28, 27]}
{"time": "2023-09-24 01:58:31.624315", "score": "0.9193", "loss": "0.6653", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input = \"\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes()); assertTrue(equals(result, new int[] { 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input0, 2); assertTrue(equals(result, new int[] { 2,})); helper.setKeyFieldSeparator(\"abcd\"); input =getWordLengths(input.getBytes(), 0, equals(result, new int[] { 1, 3 })); }", "n_tokens": 494, "n_pass": [531, 29, 28]}
{"time": "2023-09-24 01:58:33.566262", "score": "0.958", "loss": "0.4313", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input = \"\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes()); assertTrue(equals(result, new int[] { 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input0, 2); assertTrue(equals(result, new int[] { 2,})); helper.setKeyFieldSeparator(\"abcd\"); input =getWordLengths(input.getBytes(), 0, equals(result, new int[] {})); }", "n_tokens": 488, "n_pass": [534, 30, 29]}
{"time": "2023-09-24 01:58:35.880476", "score": "0.9466", "loss": "0.5208", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result = helper.getWordLengths(input.getBytes()); assertTrue(equals(result, new int[] { 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input0, 2); assertTrue(equals(result, new int[] { 2,})); helper.setKeyFieldSeparator(\"abcd\"); input =getWordLengths(input.getBytes(), 0, equals(result, new int[] {})); }", "n_tokens": 482, "n_pass": [582, 31, 30]}
{"time": "2023-09-24 01:58:37.907198", "score": "0.9491", "loss": "0.4652", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0, 0 })); input = \" abc \"; result = helper.getWordLengths(input0, 2); assertTrue(equals(result, new int[] { 2,})); helper.setKeyFieldSeparator(\"abcd\"); input =getWordLengths(input.getBytes(), 0, equals(result, new int[] {})); }", "n_tokens": 476, "n_pass": [599, 32, 31]}
{"time": "2023-09-24 01:58:41.302605", "score": "0.8639", "loss": "1.6877", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \" abc \"; result = helper.getWordLengths(input0, 2); assertTrue(equals(result, new int[] { 2,})); helper.setKeyFieldSeparator(\"abcd\"); input =getWordLengths(input.getBytes(), 0, equals(result, new int[] {})); }", "n_tokens": 473, "n_pass": [857, 33, 32]}
{"time": "2023-09-24 01:58:43.399942", "score": "0.9241", "loss": "0.8264", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; result = helper.getWordLengths(input0, 2); assertTrue(equals(result, new int[] { 2,})); helper.setKeyFieldSeparator(\"abcd\"); input =getWordLengths(input.getBytes(), 0, equals(result, new int[] {})); }", "n_tokens": 470, "n_pass": [861, 34, 33]}
{"time": "2023-09-24 01:58:45.249795", "score": "0.9496", "loss": "0.4961", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\";  helper.getWordLengths(input0, 2); assertTrue(equals(result, new int[] { 2,})); helper.setKeyFieldSeparator(\"abcd\"); input =getWordLengths(input.getBytes(), 0, equals(result, new int[] {})); }", "n_tokens": 467, "n_pass": [863, 35, 34]}
{"time": "2023-09-24 01:58:47.210032", "score": "0.9056", "loss": "0.9632", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input0, 2); assertTrue(equals(result, new int[] { 2,})); helper.setKeyFieldSeparator(\"abcd\"); input =getWordLengths(input.getBytes(), 0, equals(result, new int[] {})); }", "n_tokens": 464, "n_pass": [864, 36, 35]}
{"time": "2023-09-24 01:58:49.270687", "score": "0.9211", "loss": "0.8321", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] { 2,})); helper.setKeyFieldSeparator(\"abcd\"); input =getWordLengths(input.getBytes(), 0, equals(result, new int[] {})); }", "n_tokens": 461, "n_pass": [866, 37, 36]}
{"time": "2023-09-24 01:58:51.483438", "score": "0.9327", "loss": "0.6099", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})); helper.setKeyFieldSeparator(\"abcd\"); input =getWordLengths(input.getBytes(), 0, equals(result, new int[] {})); }", "n_tokens": 458, "n_pass": [873, 38, 37]}
{"time": "2023-09-24 01:58:53.329201", "score": "0.943", "loss": "0.7216", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(\"abcd\"); input =getWordLengths(input.getBytes(), 0, equals(result, new int[] {})); }", "n_tokens": 455, "n_pass": [875, 39, 38]}
{"time": "2023-09-24 01:58:55.157854", "score": "0.8053", "loss": "2.4245", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); input =getWordLengths(input.getBytes(), 0, equals(result, new int[] {})); }", "n_tokens": 452, "n_pass": [877, 40, 39]}
{"time": "2023-09-24 01:58:57.127694", "score": "0.8734", "loss": "1.2779", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), 0, equals(result, new int[] {})); }", "n_tokens": 449, "n_pass": [879, 41, 40]}
{"time": "2023-09-24 01:58:58.993620", "score": "0.9419", "loss": "0.68", "code": "public void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 446, "n_pass": [883, 42, 41]}
{"time": "2023-09-24 01:59:00.957740", "score": "0.6431", "loss": "3.7286", "code": "void testGetWordLengths() throws Exception { KeyFieldHelper helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 444, "n_pass": [890, 43, 42]}
{"time": "2023-09-24 01:59:03.295998", "score": "0.9286", "loss": "0.7984", "code": "void testGetWordLengths() throws Exception { helper = new KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 442, "n_pass": [897, 44, 43]}
{"time": "2023-09-24 01:59:05.079296", "score": "0.9339", "loss": "0.6409", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper.setKeyFieldSeparator(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 440, "n_pass": [900, 45, 44]}
{"time": "2023-09-24 01:59:06.977101", "score": "0.8824", "loss": "1.2482", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\\t\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 438, "n_pass": [904, 46, 45]}
{"time": "2023-09-24 01:59:08.842968", "score": "0.9369", "loss": "0.6438", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); String input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 436, "n_pass": [906, 47, 46]}
{"time": "2023-09-24 01:59:10.723145", "score": "0.8927", "loss": "0.8245", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; int[] result = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 434, "n_pass": [909, 48, 47]}
{"time": "2023-09-24 01:59:12.611451", "score": "0.8374", "loss": "1.6969", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult = helper.getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 431, "n_pass": [914, 49, 48]}
{"time": "2023-09-24 01:59:14.575406", "score": "0.9092", "loss": "0.7849", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 0, 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 428, "n_pass": [916, 50, 49]}
{"time": "2023-09-24 01:59:16.413588", "score": "0.8781", "loss": "1.3995", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] { 1 })); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 425, "n_pass": [920, 51, 50]}
{"time": "2023-09-24 01:59:18.377475", "score": "0.785", "loss": "2.4941", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})); helper.resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 422, "n_pass": [927, 52, 51]}
{"time": "2023-09-24 01:59:20.176713", "score": "0.9559", "loss": "0.4469", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { 2, })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 419, "n_pass": [929, 53, 52]}
{"time": "2023-09-24 01:59:22.227594", "score": "0.9494", "loss": "0.5304", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); helper.setKeyFieldSeparator(\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 416, "n_pass": [935, 54, 53]}
{"time": "2023-09-24 01:59:24.415487", "score": "0.9125", "loss": "1.029", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"hi hello\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 413, "n_pass": [938, 55, 54]}
{"time": "2023-09-24 01:59:26.434200", "score": "0.8761", "loss": "1.0498", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"\\tthere you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 410, "n_pass": [943, 56, 55]}
{"time": "2023-09-24 01:59:28.366601", "score": "0.9094", "loss": "0.8332", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 10, 33); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 407, "n_pass": [944, 57, 56]}
{"time": "2023-09-24 01:59:30.359934", "score": "0.937", "loss": "0.5914", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(result, new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 404, "n_pass": [961, 58, 57]}
{"time": "2023-09-24 01:59:32.215596", "score": "0.8884", "loss": "1.1067", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 52, 3 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 401, "n_pass": [965, 59, 58]}
{"time": "2023-09-24 01:59:34.070193", "score": "0.9091", "loss": "0.9131", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 })); input (equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 398, "n_pass": [969, 60, 59]}
{"time": "2023-09-24 01:59:35.962015", "score": "0.9208", "loss": "0.7302", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(result, new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 395, "n_pass": [972, 61, 60]}
{"time": "2023-09-24 01:59:37.765010", "score": "0.9307", "loss": "0.5597", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { 5, 0 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 392, "n_pass": [974, 62, 61]}
{"time": "2023-09-24 01:59:39.696110", "score": "0.9297", "loss": "0.5954", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { 5 })); input =(input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 389, "n_pass": [978, 63, 62]}
{"time": "2023-09-24 01:59:41.544756", "score": "0.9151", "loss": "0.6303", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { 5 })); (input.getBytes()); assertTrue(equals(result, new int[] { 1, 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 386, "n_pass": [981, 64, 63]}
{"time": "2023-09-24 01:59:43.435491", "score": "0.9574", "loss": "0.4085", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { 5 })); (input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input ; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 383, "n_pass": [990, 65, 64]}
{"time": "2023-09-24 01:59:45.288986", "score": "0.8986", "loss": "0.8916", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { 5 })); (input.getBytes()); assertTrue(equals(result, new int[] { 0 }));; result = helper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 380, "n_pass": [993, 66, 65]}
{"time": "2023-09-24 01:59:47.207601", "score": "0.9218", "loss": "0.6176", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { 5 })); (input.getBytes()); assertTrue(equals(result, new int[] { 0 }));; resulthelper.getWordLengths(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 377, "n_pass": [995, 67, 66]}
{"time": "2023-09-24 01:59:49.083007", "score": "0.9293", "loss": "0.6513", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { 5 })); (input.getBytes()); assertTrue(equals(result, new int[] { 0 }));; result(input.getBytes(), 0, 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 374, "n_pass": [996, 68, 67]}
{"time": "2023-09-24 01:59:50.885082", "score": "0.8836", "loss": "1.1274", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { 5 })); (input.getBytes()); assertTrue(equals(result, new int[] { 0 }));; result(input.getBytes(), 5); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 371, "n_pass": [999, 69, 68]}
{"time": "2023-09-24 01:59:52.725028", "score": "0.8628", "loss": "1.4464", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { 5 })); (input.getBytes()); assertTrue(equals(result, new int[] { 0 }));; result(input.getBytes()); assertTrue(equals(result, new int[] { 3, 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 368, "n_pass": [1000, 70, 69]}
{"time": "2023-09-24 01:59:54.593506", "score": "0.8932", "loss": "1.0277", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper(); helper(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { 5 })); (input.getBytes()); assertTrue(equals(result, new int[] { 0 }));; result(input.getBytes()); assertTrue(equals(result, new int[] { 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 365, "n_pass": [1007, 71, 70]}
{"time": "2023-09-24 01:59:57.328495", "score": "0.9263", "loss": "0.6811", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intresult =getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { 5 })); (input.getBytes()); assertTrue(equals(result, new int[] { 0 }));; result(input.getBytes()); assertTrue(equals(result, new int[] { 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 363, "n_pass": [1056, 72, 71]}
{"time": "2023-09-24 01:59:59.494736", "score": "0.759", "loss": "2.5205", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { 5 })); (input.getBytes()); assertTrue(equals(result, new int[] { 0 }));; result(input.getBytes()); assertTrue(equals(result, new int[] { 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 360, "n_pass": [1064, 73, 72]}
{"time": "2023-09-24 02:00:01.996244", "score": "0.7901", "loss": "1.9873", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { 5 })); (input.getBytes()); assertTrue(equals(result, new int[] { 0 }));(input.getBytes()); assertTrue(equals(result, new int[] { 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 357, "n_pass": [1126, 74, 73]}
{"time": "2023-09-24 02:00:19.735611", "score": "0.7917", "loss": "2.0307", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input.getBytes()); assertTrue(equals(result, new int[] { 0 }));(input.getBytes()); assertTrue(equals(result, new int[] { 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 355, "n_pass": [1503, 75, 74]}
{"time": "2023-09-24 02:00:21.616622", "score": "0.845", "loss": "1.5781", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input()); assertTrue(equals(result, new int[] { 0 }));(input.getBytes()); assertTrue(equals(result, new int[] { 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 353, "n_pass": [1508, 76, 75]}
{"time": "2023-09-24 02:00:23.521624", "score": "0.8153", "loss": "1.8716", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input); assertTrue(equals(result, new int[] { 0 }));(input.getBytes()); assertTrue(equals(result, new int[] { 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 351, "n_pass": [1509, 77, 76]}
{"time": "2023-09-24 02:00:25.375231", "score": "0.7763", "loss": "2.3453", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { 0 }));(input.getBytes()); assertTrue(equals(result, new int[] { 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 349, "n_pass": [1511, 78, 77]}
{"time": "2023-09-24 02:00:27.349121", "score": "0.858", "loss": "1.3809", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input.getBytes()); assertTrue(equals(result, new int[] { 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 347, "n_pass": [1519, 79, 78]}
{"time": "2023-09-24 02:00:29.160032", "score": "0.8053", "loss": "2.1612", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input()); assertTrue(equals(result, new int[] { 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 345, "n_pass": [1523, 80, 79]}
{"time": "2023-09-24 02:00:31.085019", "score": "0.8281", "loss": "1.7983", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input); assertTrue(equals(result, new int[] { 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 343, "n_pass": [1524, 81, 80]}
{"time": "2023-09-24 02:00:32.926986", "score": "0.7382", "loss": "2.6668", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { 3 })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 341, "n_pass": [1526, 82, 81]}
{"time": "2023-09-24 02:00:34.767204", "score": "0.7422", "loss": "2.8108", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \" abc\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 339, "n_pass": [1534, 83, 82]}
{"time": "2023-09-24 02:00:36.687549", "score": "0.8169", "loss": "1.9109", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\"; result(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 337, "n_pass": [1540, 84, 83]}
{"time": "2023-09-24 02:00:38.518393", "score": "0.8579", "loss": "1.4569", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input.getBytes()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 335, "n_pass": [1542, 85, 84]}
{"time": "2023-09-24 02:00:40.377177", "score": "0.7955", "loss": "1.945", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input()); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 333, "n_pass": [1544, 86, 85]}
{"time": "2023-09-24 02:00:42.210030", "score": "0.6839", "loss": "3.083", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input); assertTrue(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 331, "n_pass": [1545, 87, 86]}
{"time": "2023-09-24 02:00:43.902727", "score": "0.6947", "loss": "2.9754", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { 0 })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 329, "n_pass": [1547, 88, 87]}
{"time": "2023-09-24 02:00:45.946587", "score": "0.7172", "loss": "2.6984", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\"; getWordLengths(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 327, "n_pass": [1555, 89, 88]}
{"time": "2023-09-24 02:00:48.007737", "score": "0.6506", "loss": "3.4431", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes(), equals(result, new int[] {})); }", "n_tokens": 325, "n_pass": [1562, 90, 89]}
{"time": "2023-09-24 02:00:53.901477", "score": "0.7632", "loss": "2.5951", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytes, equals(result, new int[] {})); }", "n_tokens": 323, "n_pass": [1580, 93, 90]}
{"time": "2023-09-24 02:00:55.664904", "score": "0.7291", "loss": "2.5816", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals(result, new int[] {})); }", "n_tokens": 321, "n_pass": [1581, 94, 91]}
{"time": "2023-09-24 02:00:57.450382", "score": "0.5575", "loss": "4.5415", "code": "void testGetWordLengths() throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 319, "n_pass": [1583, 95, 92]}
{"time": "2023-09-24 02:00:59.943918", "score": "0.7546", "loss": "2.5829", "code": "void testGetWordLengths()throws Exception { helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 318, "n_pass": [1596, 96, 93]}
{"time": "2023-09-24 02:01:01.783273", "score": "0.7175", "loss": "2.7693", "code": "void testGetWordLengths()throws Exception{ helper = KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 317, "n_pass": [1600, 97, 94]}
{"time": "2023-09-24 02:01:05.415900", "score": "0.7375", "loss": "2.8944", "code": "void testGetWordLengths()throws Exception{ helper= KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 316, "n_pass": [1604, 99, 95]}
{"time": "2023-09-24 02:01:07.256007", "score": "0.7562", "loss": "2.7787", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\"); input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 315, "n_pass": [1606, 100, 96]}
{"time": "2023-09-24 02:01:09.073861", "score": "0.6708", "loss": "3.2986", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input = \"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 314, "n_pass": [1616, 101, 97]}
{"time": "2023-09-24 02:01:12.670710", "score": "0.5858", "loss": "4.1074", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"hi\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 313, "n_pass": [1620, 103, 98]}
{"time": "2023-09-24 02:01:14.564017", "score": "0.6142", "loss": "3.9494", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\"; intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 312, "n_pass": [1622, 104, 99]}
{"time": "2023-09-24 02:01:16.386960", "score": "0.7654", "loss": "2.1913", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";intgetWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 311, "n_pass": [1625, 105, 100]}
{"time": "2023-09-24 02:01:18.153361", "score": "0.761", "loss": "2.7124", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input.getBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 310, "n_pass": [1626, 106, 101]}
{"time": "2023-09-24 02:01:19.931470", "score": "0.8239", "loss": "1.9086", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(inputgetBytes(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 309, "n_pass": [1630, 107, 102]}
{"time": "2023-09-24 02:01:21.719430", "score": "0.7744", "loss": "2.628", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(), 2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 308, "n_pass": [1631, 108, 103]}
{"time": "2023-09-24 02:01:23.692545", "score": "0.8893", "loss": "1.191", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2); assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 307, "n_pass": [1635, 109, 104]}
{"time": "2023-09-24 02:01:25.528993", "score": "0.7992", "loss": "2.2181", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);assertTrue(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 306, "n_pass": [1639, 110, 105]}
{"time": "2023-09-24 02:01:27.451729", "score": "0.8484", "loss": "1.6934", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result, new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 305, "n_pass": [1640, 111, 106]}
{"time": "2023-09-24 02:01:29.435971", "score": "0.8384", "loss": "1.9535", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).resultgetWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 304, "n_pass": [1646, 112, 107]}
{"time": "2023-09-24 02:01:33.472848", "score": "0.7444", "loss": "2.6349", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input.getBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 303, "n_pass": [1658, 114, 108]}
{"time": "2023-09-24 02:01:35.318526", "score": "0.9188", "loss": "1.172", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(inputgetBytes(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 302, "n_pass": [1662, 115, 109]}
{"time": "2023-09-24 02:01:37.150739", "score": "0.797", "loss": "2.3681", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[] { })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 301, "n_pass": [1663, 116, 110]}
{"time": "2023-09-24 02:01:39.026020", "score": "0.8946", "loss": "1.3178", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{ })); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 300, "n_pass": [1670, 117, 111]}
{"time": "2023-09-24 02:01:40.854423", "score": "0.8864", "loss": "1.4684", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{})); (\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 299, "n_pass": [1672, 118, 112]}
{"time": "2023-09-24 02:01:42.624794", "score": "0.9186", "loss": "1.0699", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\" \"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 298, "n_pass": [1677, 119, 113]}
{"time": "2023-09-24 02:01:44.486365", "score": "0.9018", "loss": "1.3789", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\"); input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 297, "n_pass": [1680, 120, 114]}
{"time": "2023-09-24 02:01:46.385877", "score": "0.854", "loss": "1.7558", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input = \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 296, "n_pass": [1684, 121, 115]}
{"time": "2023-09-24 02:01:48.233097", "score": "0.8575", "loss": "1.6771", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input= \"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 295, "n_pass": [1686, 122, 116]}
{"time": "2023-09-24 02:01:50.054019", "score": "0.8626", "loss": "1.7231", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"you\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 294, "n_pass": [1688, 123, 117]}
{"time": "2023-09-24 02:01:51.819031", "score": "0.8998", "loss": "1.0944", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\"; result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 293, "n_pass": [1690, 124, 118]}
{"time": "2023-09-24 02:01:53.619848", "score": "0.8632", "loss": "1.6269", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result = (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 292, "n_pass": [1693, 125, 119]}
{"time": "2023-09-24 02:01:55.414372", "score": "0.9142", "loss": "1.3846", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result= (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 291, "n_pass": [1695, 126, 120]}
{"time": "2023-09-24 02:01:57.262751", "score": "0.8957", "loss": "1.1603", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result (equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 290, "n_pass": [1696, 127, 121]}
{"time": "2023-09-24 02:01:59.017076", "score": "0.8528", "loss": "1.7384", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result, new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 289, "n_pass": [1697, 128, 122]}
{"time": "2023-09-24 02:02:00.913487", "score": "0.8995", "loss": "1.251", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[] { 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 288, "n_pass": [1703, 129, 123]}
{"time": "2023-09-24 02:02:02.675611", "score": "0.8954", "loss": "1.4039", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{ 3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 287, "n_pass": [1709, 130, 124]}
{"time": "2023-09-24 02:02:04.465226", "score": "0.8447", "loss": "1.7851", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{3})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 286, "n_pass": [1711, 131, 125]}
{"time": "2023-09-24 02:02:06.413977", "score": "0.9027", "loss": "1.2477", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{})); input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 285, "n_pass": [1712, 132, 126]}
{"time": "2023-09-24 02:02:08.451093", "score": "0.9065", "loss": "1.0849", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input = \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 284, "n_pass": [1717, 133, 127]}
{"time": "2023-09-24 02:02:10.475051", "score": "0.904", "loss": "1.1729", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input= \"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 283, "n_pass": [1719, 134, 128]}
{"time": "2023-09-24 02:02:12.336904", "score": "0.8681", "loss": "1.6296", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input=\"hithere\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 282, "n_pass": [1721, 135, 129]}
{"time": "2023-09-24 02:02:14.179267", "score": "0.8211", "loss": "2.0399", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input=\"there\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 281, "n_pass": [1723, 136, 130]}
{"time": "2023-09-24 02:02:15.981669", "score": "0.8856", "loss": "1.6631", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input=\"\"; result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 280, "n_pass": [1724, 137, 131]}
{"time": "2023-09-24 02:02:17.774883", "score": "0.8466", "loss": "2.0968", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input=\"\";result(input.getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 279, "n_pass": [1727, 138, 132]}
{"time": "2023-09-24 02:02:19.484229", "score": "0.8779", "loss": "1.6778", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input=\"\";result(getBytes(), 133); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 277, "n_pass": [1730, 139, 133]}
{"time": "2023-09-24 02:02:21.254362", "score": "0.9077", "loss": "1.3392", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input=\"\";result(getBytes(),33); assertTrue(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 275, "n_pass": [1733, 140, 134]}
{"time": "2023-09-24 02:02:23.118978", "score": "0.8876", "loss": "1.9004", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[] { 53 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 273, "n_pass": [1736, 141, 135]}
{"time": "2023-09-24 02:02:24.866791", "score": "0.8271", "loss": "2.2691", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[] {3 }));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 271, "n_pass": [1742, 142, 136]}
{"time": "2023-09-24 02:02:26.695670", "score": "0.8051", "loss": "2.529", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[] {}));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals(result, new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 269, "n_pass": [1743, 143, 137]}
{"time": "2023-09-24 02:02:29.395594", "score": "0.8355", "loss": "2.259", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[] {}));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator(); getWordLengths(input.getBytesequals( new int[] {})); }", "n_tokens": 267, "n_pass": [1800, 144, 138]}
{"time": "2023-09-24 02:02:31.271639", "score": "0.7793", "loss": "2.8905", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[] {}));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(input.getBytesequals( new int[] {})); }", "n_tokens": 265, "n_pass": [1809, 145, 139]}
{"time": "2023-09-24 02:02:33.173967", "score": "0.8283", "loss": "2.4706", "code": "void testGetWordLengths()throws Exception{ helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[] {}));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 263, "n_pass": [1811, 146, 140]}
{"time": "2023-09-24 02:02:35.786763", "score": "0.8718", "loss": "2.0825", "code": "void testGetWordLengths()throws Exception{helper=KeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[] {}));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 262, "n_pass": [1829, 147, 141]}
{"time": "2023-09-24 02:02:37.679246", "score": "0.7914", "loss": "2.6669", "code": "void testGetWordLengths()throws Exception{helperKeyFieldHelper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[] {}));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 261, "n_pass": [1831, 148, 142]}
{"time": "2023-09-24 02:02:39.472538", "score": "0.8115", "loss": "2.6908", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input =\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[] {}));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 260, "n_pass": [1832, 149, 143]}
{"time": "2023-09-24 02:02:41.252848", "score": "0.7526", "loss": "3.4815", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[] {})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[] {}));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 259, "n_pass": [1842, 150, 144]}
{"time": "2023-09-24 02:02:43.253737", "score": "0.7542", "loss": "3.2944", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths(input(new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[] {}));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 258, "n_pass": [1866, 151, 145]}
{"time": "2023-09-24 02:02:45.044509", "score": "0.8677", "loss": "1.8128", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";result(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[] {}));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 257, "n_pass": [1874, 152, 146]}
{"time": "2023-09-24 02:02:47.103253", "score": "0.8928", "loss": "1.2751", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[] {}));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 256, "n_pass": [1896, 153, 147]}
{"time": "2023-09-24 02:03:05.760054", "score": "0.7867", "loss": "3.1466", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));(equals(new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 255, "n_pass": [2241, 154, 148]}
{"time": "2023-09-24 02:03:07.775462", "score": "0.8162", "loss": "2.4734", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[] { })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 254, "n_pass": [2247, 155, 149]}
{"time": "2023-09-24 02:03:09.568549", "score": "0.8859", "loss": "1.7074", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{ })); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 253, "n_pass": [2254, 156, 150]}
{"time": "2023-09-24 02:03:11.311672", "score": "0.8178", "loss": "2.3923", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{})); (input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 252, "n_pass": [2256, 157, 151]}
{"time": "2023-09-24 02:03:13.135875", "score": "0.7927", "loss": "2.8578", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result, new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 251, "n_pass": [2261, 158, 152]}
{"time": "2023-09-24 02:03:15.496557", "score": "0.8192", "loss": "2.6481", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[] { }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 250, "n_pass": [2271, 159, 153]}
{"time": "2023-09-24 02:03:17.448457", "score": "0.8136", "loss": "2.6923", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{ }));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 249, "n_pass": [2277, 160, 154]}
{"time": "2023-09-24 02:03:19.227735", "score": "0.8265", "loss": "2.8021", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result, new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 248, "n_pass": [2279, 161, 155]}
{"time": "2023-09-24 02:03:21.425989", "score": "0.855", "loss": "2.3516", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[] { })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 247, "n_pass": [2293, 162, 156]}
{"time": "2023-09-24 02:03:23.239474", "score": "0.9032", "loss": "1.7452", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{ })); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 246, "n_pass": [2299, 163, 157]}
{"time": "2023-09-24 02:03:24.994033", "score": "0.8968", "loss": "1.64", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input = \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 245, "n_pass": [2301, 164, 158]}
{"time": "2023-09-24 02:03:28.487750", "score": "0.7636", "loss": "3.4813", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input= \"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 244, "n_pass": [2308, 166, 159]}
{"time": "2023-09-24 02:03:30.292064", "score": "0.8549", "loss": "1.9645", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result, new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 243, "n_pass": [2310, 167, 160]}
{"time": "2023-09-24 02:03:32.584148", "score": "0.8523", "loss": "2.2351", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result,new int[] { })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 242, "n_pass": [2323, 168, 161]}
{"time": "2023-09-24 02:03:34.294992", "score": "0.8159", "loss": "2.7599", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result,new int[]{ })); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 241, "n_pass": [2329, 169, 162]}
{"time": "2023-09-24 02:03:36.129758", "score": "0.7977", "loss": "3.1956", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result,new int[]{})); input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 240, "n_pass": [2331, 170, 163]}
{"time": "2023-09-24 02:03:37.905460", "score": "0.8342", "loss": "2.4843", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result,new int[]{}));input = \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 239, "n_pass": [2336, 171, 164]}
{"time": "2023-09-24 02:03:39.725784", "score": "0.8055", "loss": "2.6071", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result,new int[]{}));input= \"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 238, "n_pass": [2338, 172, 165]}
{"time": "2023-09-24 02:03:41.648699", "score": "0.7849", "loss": "2.8429", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result,new int[]{}));input=\"\";(input2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 237, "n_pass": [2340, 173, 166]}
{"time": "2023-09-24 02:03:43.640244", "score": "0.731", "loss": "3.3992", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result,new int[]{}));input=\"\";(2); assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 236, "n_pass": [2345, 174, 167]}
{"time": "2023-09-24 02:03:45.568208", "score": "0.7843", "loss": "3.1116", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result,new int[]{}));input=\"\";(2);assertTrue(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 235, "n_pass": [2349, 175, 168]}
{"time": "2023-09-24 02:03:47.406110", "score": "0.8661", "loss": "2.0488", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result,new int[]{}));input=\"\";(2);(equals( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 234, "n_pass": [2350, 176, 169]}
{"time": "2023-09-24 02:03:49.236537", "score": "0.8033", "loss": "2.5949", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result,new int[]{}));input=\"\";(2);(( new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 233, "n_pass": [2352, 177, 170]}
{"time": "2023-09-24 02:03:50.898546", "score": "0.7935", "loss": "2.9559", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result,new int[]{}));input=\"\";(2);((new int[] {})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 232, "n_pass": [2354, 178, 171]}
{"time": "2023-09-24 02:03:52.806640", "score": "0.8973", "loss": "1.5614", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result,new int[]{}));input=\"\";(2);((new int[]{})).setKeyFieldSeparator();(inputequals( new int[] {})); }", "n_tokens": 231, "n_pass": [2360, 179, 172]}
{"time": "2023-09-24 02:03:54.714194", "score": "0.8197", "loss": "2.9121", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result,new int[]{}));input=\"\";(2);((new int[]{})).setKeyFieldSeparator();(equals( new int[] {})); }", "n_tokens": 230, "n_pass": [2371, 180, 173]}
{"time": "2023-09-24 02:03:58.341290", "score": "0.7859", "loss": "2.8396", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result,new int[]{}));input=\"\";(2);((new int[]{})).setKeyFieldSeparator();(equals(new int[] {})); }", "n_tokens": 229, "n_pass": [2374, 182, 174]}
{"time": "2023-09-24 02:04:00.140972", "score": "0.7685", "loss": "3.5758", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result,new int[]{}));input=\"\";(2);((new int[]{})).setKeyFieldSeparator();(equals(new int[]{})); }", "n_tokens": 228, "n_pass": [2380, 183, 175]}
{"time": "2023-09-24 02:04:01.917039", "score": "0.844", "loss": "2.049", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),33);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result,new int[]{}));input=\"\";(2);((new int[]{})).setKeyFieldSeparator();(equals(new int[]{}));}", "n_tokens": 227, "n_pass": [2386, 184, 176]}
{"time": "2023-09-24 02:04:05.047384", "score": "0.7974", "loss": "2.8716", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),3);(equals(new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result,new int[]{}));input=\"\";(2);((new int[]{})).setKeyFieldSeparator();(equals(new int[]{}));}", "n_tokens": 226, "n_pass": [2484, 185, 177]}
{"time": "2023-09-24 02:04:06.898651", "score": "0.8074", "loss": "2.3898", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),3);((new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{})); input=\"\";(input);(equals(result,new int[]{}));input=\"\";(2);((new int[]{})).setKeyFieldSeparator();(equals(new int[]{}));}", "n_tokens": 225, "n_pass": [2489, 186, 178]}
{"time": "2023-09-24 02:04:09.925740", "score": "0.8195", "loss": "2.6456", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),3);((new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{}));input=\"\";(input);(equals(result,new int[]{}));input=\"\";(2);((new int[]{})).setKeyFieldSeparator();(equals(new int[]{}));}", "n_tokens": 224, "n_pass": [2551, 187, 179]}
{"time": "2023-09-24 02:04:12.415503", "score": "0.792", "loss": "2.9373", "code": "void testGetWordLengths()throws Exception{helper();(\"\");input=\"\";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));(\"\");input=\"\";(equals(result,new int[]{}));input=\"\";result(getBytes(),3);((new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{}));input=\"\";(input);(equals(result,new int[]{}));input=\"\";(2);((new int[]{})).setKeyFieldSeparator();((new int[]{}));}", "n_tokens": 223, "n_pass": [2602, 188, 180]}

Minimal simplified code:
void testGetWordLengths()throws Exception{helper();("");input="";getWordLengths(input(),2);(equals(result,new int[]{})).getWordLengths((new int[]{}));("");input="";(equals(result,new int[]{}));input="";result(getBytes(),3);((new int[]{}));((new int[]{}));(input);(equals(result,new int[]{}));(input);(equals(result,new int[]{}));input="";(input);(equals(result,new int[]{}));input="";(2);((new int[]{})).setKeyFieldSeparator();((new int[]{}));}

