
path = /Users/lap13494/workspace/ppl-extra-final/java-small/test/hadoop-splitted/Queue_getInnerQueues_0.java
method_name = getInnerQueues
method_body = Map<String, Queue> getInnerQueues() { Map<String, Queue> l = new HashMap<String, Queue>(); if (children == null) { return l; } for (Queue child : children) { if (child.getChildren() != null && child.getChildren().size() > 0) { l.put(child.getName(), child); l.putAll(child.getInnerQueues()); } } return l; }
predict, score, loss = getInnerQueues, 0.8225815296173096, 0.6948678493499756

Trace of simplified code(s):
{"time": "2023-09-24 00:19:31.407532", "score": "0.8213", "loss": "0.7005", "code": "Map<String, Queue> getInnerQueues() { Map<String, Queue> l = new HashMap<String, Queue>(); if (children == null) { return l; } for (Queue child : children) { if (child.getChildren() != null && child.getChildren().size() > 0) { l.put(child.getName(), child); l.putAll(child.getInnerQueues()); } } return l; }", "n_tokens": 144, "n_pass": [1, 1, 1]}
{"time": "2023-09-24 00:19:33.347976", "score": "0.8387", "loss": "0.6557", "code": "Map<String, Queue> getInnerQueues() { Map<String, Queue> l = new HashMap<String, Queue>(); if (children == null) { return l; } for (Queue child : children) { if (child.getChildren() != null && child.getChildren().size() > 0) { l.put(child.getName(),child.getInnerQueues()); } } return l; }", "n_tokens": 135, "n_pass": [57, 2, 2]}
{"time": "2023-09-24 00:19:35.289560", "score": "0.8208", "loss": "0.7602", "code": "Map<String, Queue> getInnerQueues() { Map<String, Queue> l = new HashMap<String, Queue>(); if (children ) { return l; } for (Queue child : children) { if (child.getChildren() != null && child.getChildren().size() > 0) { l.put(child.getName(),child.getInnerQueues()); } } return l; }", "n_tokens": 131, "n_pass": [117, 3, 3]}
{"time": "2023-09-24 00:19:37.016926", "score": "0.7984", "loss": "0.9025", "code": "Map<String, Queue> getInnerQueues() { Map<String, Queue> l = new HashMap<String, Queue>(); if (children ) {  } for (Queue child : children) { if (child.getChildren() != null && child.getChildren().size() > 0) { l.put(child.getName(),child.getInnerQueues()); } } return l; }", "n_tokens": 127, "n_pass": [119, 4, 4]}
{"time": "2023-09-24 00:19:38.752871", "score": "0.7603", "loss": "1.0556", "code": "Map<String, Queue> getInnerQueues() { Map<String, Queue> l = new HashMap<String, Queue>(); if (children ) {  } for (Queue child : children) { if (child.getChildren() != child.getChildren().size() > 0) { l.put(child.getName(),child.getInnerQueues()); } } return l; }", "n_tokens": 122, "n_pass": [126, 5, 5]}
{"time": "2023-09-24 00:19:40.600750", "score": "0.7536", "loss": "1.0992", "code": "Map<String, Queue> getInnerQueues() { Map<String, Queue> l = new HashMap<String, Queue>(); if (children ) {  } for (Queue child : children) { if (child.getChildren() != child.getChildren()> 0) { l.put(child.getName(),child.getInnerQueues()); } } return l; }", "n_tokens": 117, "n_pass": [128, 6, 6]}
{"time": "2023-09-24 00:19:42.666562", "score": "0.8238", "loss": "0.6589", "code": "Map<String, Queue> getInnerQueues() { Map<String, Queue> l = new HashMap<String, Queue>(); if (children ) {  } for (Queue child : children) { if (child.getChildren() != child.getChildren()> 0) { l.put(child.getNamechild.getInnerQueues()); } } return l; }", "n_tokens": 114, "n_pass": [214, 7, 7]}
{"time": "2023-09-24 00:19:46.117629", "score": "0.8057", "loss": "0.7677", "code": "Map<String, Queue> getInnerQueues() { Map<String, Queue> l = new HashMap<String, Queue>(); if (children ) {  } for (Queue child : children) { if (child.getChildren() != child.getChildren()> 0) { l.put(child.getNamechild.getInnerQueues()); } } ; }", "n_tokens": 111, "n_pass": [219, 9, 8]}
{"time": "2023-09-24 00:19:47.871044", "score": "0.7686", "loss": "1.0333", "code": "Map< Queue> getInnerQueues() { Map<String, Queue> l = new HashMap<String, Queue>(); if (children ) {  } for (Queue child : children) { if (child.getChildren() != child.getChildren()> 0) { l.put(child.getNamechild.getInnerQueues()); } } ; }", "n_tokens": 109, "n_pass": [222, 10, 9]}
{"time": "2023-09-24 00:19:49.641107", "score": "0.7392", "loss": "1.207", "code": "Map< Queue> getInnerQueues() { Map< Queue> l = new HashMap<String, Queue>(); if (children ) {  } for (Queue child : children) { if (child.getChildren() != child.getChildren()> 0) { l.put(child.getNamechild.getInnerQueues()); } } ; }", "n_tokens": 107, "n_pass": [229, 11, 10]}
{"time": "2023-09-24 00:19:51.740318", "score": "0.7464", "loss": "1.1659", "code": "Map< Queue> getInnerQueues() { Map< Queue> l = new HashMap< Queue>(); if (children ) {  } for (Queue child : children) { if (child.getChildren() != child.getChildren()> 0) { l.put(child.getNamechild.getInnerQueues()); } } ; }", "n_tokens": 105, "n_pass": [236, 12, 11]}
{"time": "2023-09-24 00:19:53.450252", "score": "0.7349", "loss": "1.2355", "code": "Map< Queue> getInnerQueues() { Map< Queue> l = new HashMap<>(); if (children ) {  } for (Queue child : children) { if (child.getChildren() != child.getChildren()> 0) { l.put(child.getNamechild.getInnerQueues()); } } ; }", "n_tokens": 103, "n_pass": [237, 13, 12]}
{"time": "2023-09-24 00:19:55.283539", "score": "0.7715", "loss": "0.9931", "code": "Map< Queue> getInnerQueues() { Map< Queue> l = new HashMap<>(); if (children ) {  } for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getNamechild.getInnerQueues()); } } ; }", "n_tokens": 101, "n_pass": [255, 14, 13]}
{"time": "2023-09-24 00:19:57.005565", "score": "0.7451", "loss": "1.1606", "code": "Map< Queue> getInnerQueues() { Map< Queue> l = new HashMap<>(); if (children ) {  } for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues()); } } ; }", "n_tokens": 98, "n_pass": [265, 15, 14]}
{"time": "2023-09-24 00:20:12.782625", "score": "0.8326", "loss": "0.9003", "code": "Map< Queue> getInnerQueues() { Map< Queue> l = new HashMap<>(); if (children ) {  } for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } ; }", "n_tokens": 96, "n_pass": [402, 18, 15]}
{"time": "2023-09-24 00:20:14.535643", "score": "0.8326", "loss": "0.9003", "code": "Map< Queue> getInnerQueues() { Map< Queue> l = new HashMap<>(); if (children ) {  } for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 94, "n_pass": [406, 19, 16]}
{"time": "2023-09-24 00:20:16.872254", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue> getInnerQueues() { Map< Queue> l = new HashMap<>(); if (children ) {  } for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 93, "n_pass": [410, 20, 17]}
{"time": "2023-09-24 00:20:18.704898", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues() { Map< Queue> l = new HashMap<>(); if (children ) {  } for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 92, "n_pass": [413, 21, 18]}
{"time": "2023-09-24 00:20:20.420471", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){ Map< Queue> l = new HashMap<>(); if (children ) {  } for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 91, "n_pass": [417, 22, 19]}
{"time": "2023-09-24 00:20:22.116457", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map< Queue> l = new HashMap<>(); if (children ) {  } for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 90, "n_pass": [419, 23, 20]}
{"time": "2023-09-24 00:20:23.902560", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue> l = new HashMap<>(); if (children ) {  } for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 89, "n_pass": [422, 24, 21]}
{"time": "2023-09-24 00:20:25.690955", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue>l = new HashMap<>(); if (children ) {  } for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 88, "n_pass": [425, 25, 22]}
{"time": "2023-09-24 00:20:27.508347", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue>l= new HashMap<>(); if (children ) {  } for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 87, "n_pass": [427, 26, 23]}
{"time": "2023-09-24 00:20:29.284580", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>(); if (children ) {  } for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 86, "n_pass": [429, 27, 24]}
{"time": "2023-09-24 00:20:31.030368", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if (children ) {  } for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 85, "n_pass": [438, 28, 25]}
{"time": "2023-09-24 00:20:32.761843", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children ) {  } for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 84, "n_pass": [440, 29, 26]}
{"time": "2023-09-24 00:20:34.463613", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children) {  } for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 83, "n_pass": [443, 30, 27]}
{"time": "2023-09-24 00:20:36.189162", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){  } for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 82, "n_pass": [445, 31, 28]}
{"time": "2023-09-24 00:20:38.003446", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){ } for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 81, "n_pass": [447, 32, 29]}
{"time": "2023-09-24 00:20:39.752557", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){} for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 80, "n_pass": [448, 33, 30]}
{"time": "2023-09-24 00:20:41.427959", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for (Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 79, "n_pass": [450, 34, 31]}
{"time": "2023-09-24 00:20:43.356803", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for(Queue child : children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 78, "n_pass": [452, 35, 32]}
{"time": "2023-09-24 00:20:45.060458", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for(Queue child: children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 77, "n_pass": [457, 36, 33]}
{"time": "2023-09-24 00:20:46.808725", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for(Queue child:children) { if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 76, "n_pass": [459, 37, 34]}
{"time": "2023-09-24 00:20:48.550967", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for(Queue child:children){ if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 75, "n_pass": [462, 38, 35]}
{"time": "2023-09-24 00:20:50.379013", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for(Queue child:children){if (getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 74, "n_pass": [464, 39, 36]}
{"time": "2023-09-24 00:20:52.173507", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for(Queue child:children){if(getChildren() != child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 73, "n_pass": [466, 40, 37]}
{"time": "2023-09-24 00:20:54.570409", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for(Queue child:children){if(getChildren()!= child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 72, "n_pass": [471, 41, 38]}
{"time": "2023-09-24 00:20:57.448183", "score": "0.8326", "loss": "0.9003", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for(Queue child:children){if(getChildren()!=child.getChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 71, "n_pass": [474, 42, 39]}
{"time": "2023-09-24 00:20:59.402538", "score": "0.8652", "loss": "0.6623", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for(Queue child:children){if(getChildren()!=childgetChildren()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 70, "n_pass": [476, 43, 40]}
{"time": "2023-09-24 00:21:01.136627", "score": "0.8637", "loss": "0.6698", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for(Queue child:children){if(getChildren()!=child()> 0) { l.put(child.getInnerQueues); } } }", "n_tokens": 69, "n_pass": [477, 44, 41]}
{"time": "2023-09-24 00:21:02.857430", "score": "0.8637", "loss": "0.6698", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for(Queue child:children){if(getChildren()!=child()>0) { l.put(child.getInnerQueues); } } }", "n_tokens": 68, "n_pass": [481, 45, 42]}
{"time": "2023-09-24 00:21:04.523358", "score": "0.8637", "loss": "0.6698", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for(Queue child:children){if(getChildren()!=child()>0){ l.put(child.getInnerQueues); } } }", "n_tokens": 67, "n_pass": [484, 46, 43]}
{"time": "2023-09-24 00:21:06.238526", "score": "0.8408", "loss": "0.8578", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for(Queue child:children){if(getChildren()!=child()>0){ l(child.getInnerQueues); } } }", "n_tokens": 65, "n_pass": [487, 47, 44]}
{"time": "2023-09-24 00:21:11.700593", "score": "0.8535", "loss": "0.8762", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for(Queue child:children){if(getChildren()!=child()>0){(child.getInnerQueues); } } }", "n_tokens": 63, "n_pass": [545, 49, 45]}
{"time": "2023-09-24 00:21:18.344075", "score": "0.8535", "loss": "0.8762", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for(Queue child:children){if(getChildren()!=child()>0){(child.getInnerQueues);} } }", "n_tokens": 62, "n_pass": [616, 51, 46]}
{"time": "2023-09-24 00:21:20.123331", "score": "0.8535", "loss": "0.8762", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for(Queue child:children){if(getChildren()!=child()>0){(child.getInnerQueues);}} }", "n_tokens": 61, "n_pass": [617, 52, 47]}
{"time": "2023-09-24 00:21:21.867453", "score": "0.8535", "loss": "0.8762", "code": "Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for(Queue child:children){if(getChildren()!=child()>0){(child.getInnerQueues);}}}", "n_tokens": 60, "n_pass": [619, 53, 48]}

Minimal simplified code:
Map<Queue>getInnerQueues(){Map<Queue>l=new HashMap<>();if(children){}for(Queue child:children){if(getChildren()!=child()>0){(child.getInnerQueues);}}}

