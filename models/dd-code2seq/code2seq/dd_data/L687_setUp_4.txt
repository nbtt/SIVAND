
path = /Users/lap13494/workspace/ppl-extra-final/java-small/test/hadoop-splitted/TestTFileLzoCodecsStreams_setUp_0.java
method_name = setUp
method_body = public void setUp() throws IOException { skip = !(Algorithm.LZO.isSupported()); if (skip) { System.out.println("Skipped"); } init(Compression.Algorithm.LZO.getName(), "memcmp"); if (!skip) super.setUp(); }
predict, score, loss = setUp, 0.8938283920288086, 0.25786319375038147

Trace of simplified code(s):
{"time": "2023-09-24 02:12:42.556228", "score": "0.8938", "loss": "0.2579", "code": "public void setUp() throws IOException { skip = !(Algorithm.LZO.isSupported()); if (skip) { System.out.println(\"Skipped\"); } init(Compression.Algorithm.LZO.getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 86, "n_pass": [1, 1, 1]}
{"time": "2023-09-24 02:12:44.522756", "score": "0.9382", "loss": "0.1412", "code": "public void setUp() throws IOException { skip = !(Algorithm.LZO.isSupported());  { System.out.println(\"Skipped\"); } init(Compression.Algorithm.LZO.getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 81, "n_pass": [50, 2, 2]}
{"time": "2023-09-24 02:12:46.343590", "score": "0.9623", "loss": "0.0847", "code": "public void setUp() throws IOException { skip = !(Algorithm.LZO.isSupported());  { System.out.println(); } init(Compression.Algorithm.LZO.getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 78, "n_pass": [100, 3, 3]}
{"time": "2023-09-24 02:12:49.847302", "score": "0.9623", "loss": "0.0847", "code": "void setUp() throws IOException { skip = !(Algorithm.LZO.isSupported());  { System.out.println(); } init(Compression.Algorithm.LZO.getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 76, "n_pass": [114, 5, 4]}
{"time": "2023-09-24 02:12:51.945538", "score": "0.9547", "loss": "0.1018", "code": "void setUp() throws IOException { skip = !(AlgorithmisSupported());  { System.out.println(); } init(Compression.Algorithm.LZO.getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 73, "n_pass": [124, 6, 5]}
{"time": "2023-09-24 02:12:53.714656", "score": "0.9677", "loss": "0.072", "code": "void setUp() throws IOException { skip = !(Algorithm);  { System.out.println(); } init(Compression.Algorithm.LZO.getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 70, "n_pass": [125, 7, 6]}
{"time": "2023-09-24 02:13:01.712498", "score": "0.9677", "loss": "0.072", "code": "void setUp() throws IOException { skip = !(Algorithm); { System.out.println(); } init(Compression.Algorithm.LZO.getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 69, "n_pass": [207, 9, 7]}
{"time": "2023-09-24 02:13:03.469592", "score": "0.9677", "loss": "0.072", "code": "void setUp() throws IOException { skip = !(Algorithm);{ System.out.println(); } init(Compression.Algorithm.LZO.getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 68, "n_pass": [208, 10, 8]}
{"time": "2023-09-24 02:13:05.183786", "score": "0.9677", "loss": "0.072", "code": "void setUp() throws IOException { skip = !(Algorithm);{System.out.println(); } init(Compression.Algorithm.LZO.getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 67, "n_pass": [210, 11, 9]}
{"time": "2023-09-24 02:13:07.045930", "score": "0.9731", "loss": "0.06", "code": "void setUp() throws IOException { skip = !(Algorithm);{Systemout.println(); } init(Compression.Algorithm.LZO.getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 66, "n_pass": [212, 12, 10]}
{"time": "2023-09-24 02:13:08.816384", "score": "0.9704", "loss": "0.0658", "code": "void setUp() throws IOException { skip = !(Algorithm);{System.println(); } init(Compression.Algorithm.LZO.getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 65, "n_pass": [213, 13, 11]}
{"time": "2023-09-24 02:13:10.500276", "score": "0.9168", "loss": "0.1937", "code": "void setUp() throws IOException { skip = !(Algorithm);{Systemprintln(); } init(Compression.Algorithm.LZO.getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 64, "n_pass": [214, 14, 12]}
{"time": "2023-09-24 02:13:13.143754", "score": "0.9544", "loss": "0.1031", "code": "void setUp() throws IOException { skip = !(Algorithm);{System(); } init(Compression.Algorithm.LZO.getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 63, "n_pass": [215, 15, 13]}
{"time": "2023-09-24 02:13:14.901924", "score": "0.9544", "loss": "0.1031", "code": "void setUp() throws IOException { skip = !(Algorithm);{System();} init(Compression.Algorithm.LZO.getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 62, "n_pass": [219, 16, 14]}
{"time": "2023-09-24 02:13:16.576895", "score": "0.969", "loss": "0.0697", "code": "void setUp() throws IOException { skip = !(Algorithm);{System();} init(Algorithm.LZO.getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 60, "n_pass": [222, 17, 15]}
{"time": "2023-09-24 02:13:18.297954", "score": "0.9695", "loss": "0.069", "code": "void setUp() throws IOException { skip = !(Algorithm);{System();} init(LZO.getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 58, "n_pass": [223, 18, 16]}
{"time": "2023-09-24 02:13:20.097755", "score": "0.9642", "loss": "0.0827", "code": "void setUp() throws IOException { skip = !(Algorithm);{System();} init(getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 56, "n_pass": [224, 19, 17]}
{"time": "2023-09-24 02:13:24.725323", "score": "0.9642", "loss": "0.0827", "code": "void setUp()throws IOException { skip = !(Algorithm);{System();} init(getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 55, "n_pass": [243, 21, 18]}
{"time": "2023-09-24 02:13:26.484970", "score": "0.9642", "loss": "0.0827", "code": "void setUp()throws IOException{ skip = !(Algorithm);{System();} init(getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 54, "n_pass": [247, 22, 19]}
{"time": "2023-09-24 02:13:28.196688", "score": "0.9642", "loss": "0.0827", "code": "void setUp()throws IOException{skip = !(Algorithm);{System();} init(getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 53, "n_pass": [249, 23, 20]}
{"time": "2023-09-24 02:13:29.942109", "score": "0.9642", "loss": "0.0827", "code": "void setUp()throws IOException{skip= !(Algorithm);{System();} init(getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 52, "n_pass": [251, 24, 21]}
{"time": "2023-09-24 02:13:31.673600", "score": "0.9642", "loss": "0.0827", "code": "void setUp()throws IOException{skip=!(Algorithm);{System();} init(getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 51, "n_pass": [253, 25, 22]}
{"time": "2023-09-24 02:13:33.407037", "score": "0.978", "loss": "0.0503", "code": "void setUp()throws IOException{skip=(Algorithm);{System();} init(getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 50, "n_pass": [254, 26, 23]}
{"time": "2023-09-24 02:13:37.662817", "score": "0.9356", "loss": "0.1488", "code": "void setUp()throws IOException{skip(Algorithm);{System();} init(getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 49, "n_pass": [289, 28, 24]}
{"time": "2023-09-24 02:13:39.308982", "score": "0.9122", "loss": "0.2066", "code": "void setUp()throws IOException{skip();{System();} init(getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 48, "n_pass": [291, 29, 25]}
{"time": "2023-09-24 02:13:46.370307", "score": "0.9122", "loss": "0.2066", "code": "void setUp()throws IOException{skip();{System();}init(getName(), \"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 47, "n_pass": [356, 31, 26]}
{"time": "2023-09-24 02:13:48.240556", "score": "0.9122", "loss": "0.2066", "code": "void setUp()throws IOException{skip();{System();}init(getName(),\"memcmp\"); if (!skip) super.setUp(); }", "n_tokens": 46, "n_pass": [363, 32, 27]}
{"time": "2023-09-24 02:13:50.012849", "score": "0.8404", "loss": "0.4024", "code": "void setUp()throws IOException{skip();{System();}init(getName(),\"\"); if (!skip) super.setUp(); }", "n_tokens": 45, "n_pass": [365, 33, 28]}
{"time": "2023-09-24 02:13:51.612736", "score": "0.8404", "loss": "0.4024", "code": "void setUp()throws IOException{skip();{System();}init(getName(),\"\");if (!skip) super.setUp(); }", "n_tokens": 44, "n_pass": [369, 34, 29]}
{"time": "2023-09-24 02:13:53.360180", "score": "0.8404", "loss": "0.4024", "code": "void setUp()throws IOException{skip();{System();}init(getName(),\"\");if(!skip) super.setUp(); }", "n_tokens": 43, "n_pass": [371, 35, 30]}
{"time": "2023-09-24 02:13:55.104940", "score": "0.8428", "loss": "0.3988", "code": "void setUp()throws IOException{skip();{System();}init(getName(),\"\");if(skip) super.setUp(); }", "n_tokens": 42, "n_pass": [373, 36, 31]}
{"time": "2023-09-24 02:13:56.797863", "score": "0.8428", "loss": "0.3988", "code": "void setUp()throws IOException{skip();{System();}init(getName(),\"\");if(skip)super.setUp(); }", "n_tokens": 41, "n_pass": [376, 37, 32]}
{"time": "2023-09-24 02:14:00.074209", "score": "0.8428", "loss": "0.3988", "code": "void setUp()throws IOException{skip();{System();}init(getName(),\"\");if(skip)super.setUp();}", "n_tokens": 40, "n_pass": [383, 39, 33]}

Minimal simplified code:
void setUp()throws IOException{skip();{System();}init(getName(),"");if(skip)super.setUp();}

