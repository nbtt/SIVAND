
path = /Users/lap13494/workspace/ppl-extra-final/java-small/test/hadoop-splitted/TestNativeIO_testMlock_0.java
method_name = testMlock
method_body = public void testMlock() throws Exception { assumeTrue(NativeIO.isAvailable()); final File TEST_FILE = new File(new File(System.getProperty("test.build.data", "build/test/data")), "testMlockFile"); final int BUF_LEN = 12289; byte[] buf = new byte[BUF_LEN]; int bufSum = 0; for (int i = 0; i < buf.length; i++) { buf[i] = (byte) (i % 60); bufSum += buf[i]; } FileOutputStream fos = new FileOutputStream(TEST_FILE); try { fos.write(buf); fos.getChannel().force(true); } finally { fos.close(); } FileInputStream fis = null; FileChannel channel = null; try { fis = new FileInputStream(TEST_FILE); channel = fis.getChannel(); long fileSize = channel.size(); MappedByteBuffer mapbuf = channel.map(MapMode.READ_ONLY, 0, fileSize); NativeIO.POSIX.mlock(mapbuf, fileSize); int sum = 0; for (int i = 0; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals("Expected sums to be equal", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }
predict, score, loss = testMlock, 0.9433666467666626, 0.622115969657898

Trace of simplified code(s):
{"time": "2023-09-24 03:25:27.231783", "score": "0.777", "loss": "1.8556", "code": "public void testMlock() throws Exception { assumeTrue(NativeIO.isAvailable()); final File TEST_FILE = new File(new File(System.getProperty(\"test.build.data\", \"build/test/data\")), \"testMlockFile\"); final int BUF_LEN = 12289; byte[] buf = new byte[BUF_LEN]; int bufSum = 0; for (int i = 0; i < buf.length; i++) { buf[i] = (byte) (i % 60); bufSum += buf[i]; } FileOutputStream fos = new FileOutputStream(TEST_FILE); try { fos.write(buf); fos.getChannel().force(true); } finally { fos.close(); } FileInputStream fis = null; FileChannel channel = null; try { fis = new FileInputStream(TEST_FILE); channel = fis.getChannel(); long fileSize = channel.size(); MappedByteBuffer mapbuf = channel.map(MapMode.READ_ONLY, 0, fileSize); NativeIO.POSIX.mlock(mapbuf, fileSize); int sum = 0; for (int i = 0; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 465, "n_pass": [1, 1, 1]}
{"time": "2023-09-24 03:25:29.139934", "score": "0.9742", "loss": "0.3894", "code": "public void testMlock() throws Exception { assumeTrue(NativeIO.isAvailable()); final File TEST_FILE = new File(new File(System.getProperty(\"test.build.data\", \"build/test/data\")), \"testMlockFile\"); final int BUF_LEN = 12289; byte[] buf = new byte[BUF_LEN]; int bufSum = 0;  FileInputStream fis = null; FileChannel channel = null; try { fis = new FileInputStream(TEST_FILE); channel = fis.getChannel(); long fileSize = channel.size(); MappedByteBuffer mapbuf = channel.map(MapMode.READ_ONLY, 0, fileSize); NativeIO.POSIX.mlock(mapbuf, fileSize); int sum = 0; for (int i = 0; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 349, "n_pass": [9, 2, 2]}
{"time": "2023-09-24 03:25:31.649102", "score": "0.978", "loss": "0.4921", "code": "public void testMlock() throws Exception { assumeTrue(NativeIO.isAvailable()); final File TEST_FILE = new File(new File(System.getProperty(\"test.build.data\", \"build/test/data\")), \"testMlockFile\"); final int BUF_LEN = 12289; byte[] buf = new byte[BUF_LEN]; int bufSum = 0;  FileInputStream fis = null; FileChannel channel = null; try { fis = fis.getChannel(); long fileSize = channel.size(); MappedByteBuffer mapbuf = channel.map(MapMode.READ_ONLY, 0, fileSize); NativeIO.POSIX.mlock(mapbuf, fileSize); int sum = 0; for (int i = 0; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 335, "n_pass": [74, 3, 3]}
{"time": "2023-09-24 03:25:33.483726", "score": "0.9406", "loss": "0.7413", "code": "public void testMlock() throws Exception { assumeTrue(NativeIO.isAvailable()); final File TEST_FILE = new File(new File(System.getProperty(\"test.build.data\", \"build/test/data\")), \"testMlockFile\"); final int BUF_LEN = 12289; byte[] buf = new byte[BUF_LEN]; int bufSum = 0;  FileInputStream fis = null; FileChannel channel = null; try { fis = fis.getChannel(); long fileSize = channel.size(); MappedByteBuffer mapbuf = channel; NativeIO.POSIX.mlock(mapbuf, fileSize); int sum = 0; for (int i = 0; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 320, "n_pass": [77, 4, 4]}
{"time": "2023-09-24 03:25:35.395600", "score": "0.9692", "loss": "0.6103", "code": "public void testMlock() throws Exception { TEST_FILE = new File(new File(System.getProperty(\"test.build.data\", \"build/test/data\")), \"testMlockFile\"); final int BUF_LEN = 12289; byte[] buf = new byte[BUF_LEN]; int bufSum = 0;  FileInputStream fis = null; FileChannel channel = null; try { fis = fis.getChannel(); long fileSize = channel.size(); MappedByteBuffer mapbuf = channel; NativeIO.POSIX.mlock(mapbuf, fileSize); int sum = 0; for (int i = 0; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 306, "n_pass": [89, 5, 5]}
{"time": "2023-09-24 03:25:37.737655", "score": "0.8917", "loss": "1.2941", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build.data\", \"build/test/data\")), \"testMlockFile\"); final int BUF_LEN = 12289; byte[] buf = new byte[BUF_LEN]; int bufSum = 0;  FileInputStream fis = null; FileChannel channel = null; try { fis = fis.getChannel(); long fileSize = channel.size(); MappedByteBuffer mapbuf = channel; NativeIO.POSIX.mlock(mapbuf, fileSize); int sum = 0; for (int i = 0; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 299, "n_pass": [153, 6, 6]}
{"time": "2023-09-24 03:25:39.612921", "score": "0.948", "loss": "0.7719", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF_LEN = 12289; byte[] buf = new byte[BUF_LEN]; int bufSum = 0;  FileInputStream fis = null; FileChannel channel = null; try { fis = fis.getChannel(); long fileSize = channel.size(); MappedByteBuffer mapbuf = channel; NativeIO.POSIX.mlock(mapbuf, fileSize); int sum = 0; for (int i = 0; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 292, "n_pass": [155, 7, 7]}
{"time": "2023-09-24 03:25:41.505021", "score": "0.96", "loss": "0.6555", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum = 0;  FileInputStream fis = null; FileChannel channel = null; try { fis = fis.getChannel(); long fileSize = channel.size(); MappedByteBuffer mapbuf = channel; NativeIO.POSIX.mlock(mapbuf, fileSize); int sum = 0; for (int i = 0; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 285, "n_pass": [159, 8, 8]}
{"time": "2023-09-24 03:25:43.501987", "score": "0.9469", "loss": "0.663", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; FileChannel channel = null; try { fis = fis.getChannel(); long fileSize = channel.size(); MappedByteBuffer mapbuf = channel; NativeIO.POSIX.mlock(mapbuf, fileSize); int sum = 0; for (int i = 0; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 278, "n_pass": [164, 9, 9]}
{"time": "2023-09-24 03:25:45.463489", "score": "0.914", "loss": "0.8336", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel(); long fileSize = channel.size(); MappedByteBuffer mapbuf = channel; NativeIO.POSIX.mlock(mapbuf, fileSize); int sum = 0; for (int i = 0; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 271, "n_pass": [166, 10, 10]}
{"time": "2023-09-24 03:25:47.477573", "score": "0.9476", "loss": "0.5515", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel(); long fileSize ; MappedByteBuffer mapbuf = channel; NativeIO.POSIX.mlock(mapbuf, fileSize); int sum = 0; for (int i = 0; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 264, "n_pass": [170, 11, 11]}
{"time": "2023-09-24 03:25:49.754952", "score": "0.9393", "loss": "0.7079", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel(); ; MappedByteBuffer mapbuf = channel; NativeIO.POSIX.mlock(mapbuf, fileSize); int sum = 0; for (int i = 0; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 260, "n_pass": [280, 12, 12]}
{"time": "2023-09-24 03:25:51.617685", "score": "0.7062", "loss": "2.2285", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel(); mapbuf = channel; NativeIO.POSIX.mlock(mapbuf, fileSize); int sum = 0; for (int i = 0; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 256, "n_pass": [281, 13, 13]}
{"time": "2023-09-24 03:25:53.563165", "score": "0.9065", "loss": "0.8578", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel(); channel; NativeIO.POSIX.mlock(mapbuf, fileSize); int sum = 0; for (int i = 0; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 252, "n_pass": [282, 14, 14]}
{"time": "2023-09-24 03:25:55.354988", "score": "0.6717", "loss": "2.4794", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel();NativeIO.POSIX.mlock(mapbuf, fileSize); int sum = 0; for (int i = 0; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 248, "n_pass": [283, 15, 15]}
{"time": "2023-09-24 03:25:57.212908", "score": "0.8872", "loss": "0.9249", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel();mlock(mapbuf, fileSize); int sum = 0; for (int i = 0; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 244, "n_pass": [284, 16, 16]}
{"time": "2023-09-24 03:25:59.152121", "score": "0.8179", "loss": "1.3535", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel();mlock(mapbuf, fileSize); int sum; for (int i = 0; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 240, "n_pass": [288, 17, 17]}
{"time": "2023-09-24 03:26:00.883859", "score": "0.6701", "loss": "2.3774", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel();mlock(mapbuf, fileSize); int sum; for (int i; i < fileSize; i++) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 236, "n_pass": [291, 18, 18]}
{"time": "2023-09-24 03:26:02.627325", "score": "0.7464", "loss": "1.7633", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel();mlock(mapbuf, fileSize); int sum; for (int i; i < fileSize;) { sum += mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 232, "n_pass": [294, 19, 19]}
{"time": "2023-09-24 03:26:04.517127", "score": "0.7911", "loss": "1.617", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel();mlock(mapbuf, fileSize); int sum; for (int i; i < fileSize;) {  mapbuf.get(i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 228, "n_pass": [296, 20, 20]}
{"time": "2023-09-24 03:26:06.395094", "score": "0.915", "loss": "0.7316", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel();mlock(mapbuf, fileSize); int sum; for (int i; i < fileSize;) { (i); } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 224, "n_pass": [297, 21, 21]}
{"time": "2023-09-24 03:26:08.203857", "score": "0.8742", "loss": "1.0428", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel();mlock(mapbuf, fileSize); int sum; for (int i; i < fileSize;) {  } assertEquals(\"Expected sums to be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 220, "n_pass": [298, 22, 22]}
{"time": "2023-09-24 03:26:09.927503", "score": "0.8238", "loss": "1.3634", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel();mlock(mapbuf, fileSize); int sum; for (int i; i < fileSize;) {  } assertEquals(\"Expected be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if (channel != null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 216, "n_pass": [301, 23, 23]}
{"time": "2023-09-24 03:26:11.806381", "score": "0.9157", "loss": "0.6741", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel();mlock(mapbuf, fileSize); int sum; for (int i; i < fileSize;) {  } assertEquals(\"Expected be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if ( null) { channel.close(); } if (fis != null) { fis.close(); } } }", "n_tokens": 212, "n_pass": [310, 24, 24]}
{"time": "2023-09-24 03:26:13.565676", "score": "0.8705", "loss": "0.9295", "code": "public void testMlock() throws Exception {  File(new File(System.getProperty(\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel();mlock(mapbuf, fileSize); int sum; for (int i; i < fileSize;) {  } assertEquals(\"Expected be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if ( null) { channel.close(); } if (fis ) { fis.close(); } } }", "n_tokens": 208, "n_pass": [316, 25, 25]}
{"time": "2023-09-24 03:26:15.771389", "score": "0.9061", "loss": "0.6974", "code": "public void testMlock() throws Exception {  File(new File((\"test.build/test/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel();mlock(mapbuf, fileSize); int sum; for (int i; i < fileSize;) {  } assertEquals(\"Expected be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if ( null) { channel.close(); } if (fis ) { fis.close(); } } }", "n_tokens": 205, "n_pass": [328, 26, 26]}
{"time": "2023-09-24 03:26:17.707911", "score": "0.8284", "loss": "1.1043", "code": "public void testMlock() throws Exception {  File(new File((\"testtest/data\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel();mlock(mapbuf, fileSize); int sum; for (int i; i < fileSize;) {  } assertEquals(\"Expected be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if ( null) { channel.close(); } if (fis ) { fis.close(); } } }", "n_tokens": 202, "n_pass": [330, 27, 27]}
{"time": "2023-09-24 03:26:19.626283", "score": "0.7464", "loss": "1.6095", "code": "public void testMlock() throws Exception {  File(new File((\"test\")), \"testMlockFile\"); final int BUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel();mlock(mapbuf, fileSize); int sum; for (int i; i < fileSize;) {  } assertEquals(\"Expected be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if ( null) { channel.close(); } if (fis ) { fis.close(); } } }", "n_tokens": 199, "n_pass": [331, 28, 28]}
{"time": "2023-09-24 03:26:21.602095", "score": "0.8402", "loss": "1.1314", "code": "public void testMlock() throws Exception {  File(new File((\"test\")), \"testMlockFile\"); finalBUF289; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel();mlock(mapbuf, fileSize); int sum; for (int i; i < fileSize;) {  } assertEquals(\"Expected be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if ( null) { channel.close(); } if (fis ) { fis.close(); } } }", "n_tokens": 196, "n_pass": [336, 29, 29]}
{"time": "2023-09-24 03:26:23.422131", "score": "0.9091", "loss": "0.6559", "code": "public void testMlock() throws Exception {  File(new File((\"test\")), \"testMlockFile\"); final9; byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel();mlock(mapbuf, fileSize); int sum; for (int i; i < fileSize;) {  } assertEquals(\"Expected be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if ( null) { channel.close(); } if (fis ) { fis.close(); } } }", "n_tokens": 193, "n_pass": [337, 30, 30]}
{"time": "2023-09-24 03:26:25.113572", "score": "0.7197", "loss": "1.5064", "code": "public void testMlock() throws Exception {  File(new File((\"test\")), \"testMlockFile\"); finalbyte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.getChannel();mlock(mapbuf, fileSize); int sum; for (int i; i < fileSize;) {  } assertEquals(\"Expected be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if ( null) { channel.close(); } if (fis ) { fis.close(); } } }", "n_tokens": 190, "n_pass": [338, 31, 31]}
{"time": "2023-09-24 03:26:27.000123", "score": "0.8529", "loss": "0.8988", "code": "public void testMlock() throws Exception {  File(new File((\"test\")), \"testMlockFile\"); finalbyte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.mlock(mapbuf, fileSize); int sum; for (int i; i < fileSize;) {  } assertEquals(\"Expected be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if ( null) { channel.close(); } if (fis ) { fis.close(); } } }", "n_tokens": 186, "n_pass": [351, 32, 32]}
{"time": "2023-09-24 03:26:28.737609", "score": "0.8261", "loss": "1.0884", "code": "public void testMlock() throws Exception {  File(new File((\"test\")), \"testMlockFile\"); finalbyte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.mlock(mapbuf, fileSize);; for (int i; i < fileSize;) {  } assertEquals(\"Expected be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if ( null) { channel.close(); } if (fis ) { fis.close(); } } }", "n_tokens": 182, "n_pass": [354, 33, 33]}
{"time": "2023-09-24 03:26:35.153786", "score": "0.7841", "loss": "1.3194", "code": "public void testMlock() throws Exception {  File(new File((\"test\")), \"testMlockFile\"); finalbyte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.mlock(mapbuf, fileSize);for (int i; i < fileSize;) {  } assertEquals(\"Expected be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if ( null) { channel.close(); } if (fis ) { fis.close(); } } }", "n_tokens": 180, "n_pass": [505, 34, 34]}
{"time": "2023-09-24 03:26:36.938503", "score": "0.7705", "loss": "1.4521", "code": "public void testMlock() throws Exception {  File(new File((\"test\")), \"testMlockFile\"); finalbyte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.mlock(mapbuf, fileSize);for (int i; i < fileSize;) {  } assertEquals(\"be equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if ( null) { channel.close(); } if (fis ) { fis.close(); } } }", "n_tokens": 178, "n_pass": [517, 35, 35]}
{"time": "2023-09-24 03:26:38.689643", "score": "0.7879", "loss": "1.3887", "code": "public void testMlock() throws Exception {  File(new File((\"test\")), \"testMlockFile\"); finalbyte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.mlock(mapbuf, fileSize);for (int i; i < fileSize;) {  } assertEquals(\"equal\", bufSum, sum); NativeIO.POSIX.munmap(mapbuf); } finally { if ( null) { channel.close(); } if (fis ) { fis.close(); } } }", "n_tokens": 176, "n_pass": [518, 36, 36]}
{"time": "2023-09-24 03:26:40.547399", "score": "0.749", "loss": "1.4932", "code": "public void testMlock() throws Exception {  File(new File((\"test\")), \"testMlockFile\"); finalbyte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.mlock(mapbuf, fileSize);for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum); NativeIO.POSIX.munmap(mapbuf); } finally { if ( null) { channel.close(); } if (fis ) { fis.close(); } } }", "n_tokens": 174, "n_pass": [521, 37, 37]}
{"time": "2023-09-24 03:26:42.273337", "score": "0.8586", "loss": "0.9071", "code": "public void testMlock() throws Exception {  File(new File((\"test\")), \"testMlockFile\"); finalbyte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.mlock(mapbuf, fileSize);for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum); NativeIO.munmap(mapbuf); } finally { if ( null) { channel.close(); } if (fis ) { fis.close(); } } }", "n_tokens": 172, "n_pass": [525, 38, 38]}
{"time": "2023-09-24 03:26:44.246505", "score": "0.6987", "loss": "1.6965", "code": "public void testMlock() throws Exception {  File(new File((\"test\")), \"testMlockFile\"); finalbyte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.mlock(mapbuf, fileSize);for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum); NativeIO(mapbuf); } finally { if ( null) { channel.close(); } if (fis ) { fis.close(); } } }", "n_tokens": 170, "n_pass": [526, 39, 39]}
{"time": "2023-09-24 03:26:46.048482", "score": "0.7874", "loss": "1.1767", "code": "public void testMlock() throws Exception {  File(new File((\"test\")), \"testMlockFile\"); finalbyte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.mlock(mapbuf, fileSize);for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum); NativeIO(mapbuf); } finally { if ( null) { close(); } if (fis ) { fis.close(); } } }", "n_tokens": 168, "n_pass": [537, 40, 40]}
{"time": "2023-09-24 03:26:47.914894", "score": "0.7874", "loss": "1.2145", "code": "public void testMlock() throws Exception {  File(new File((\"test\")), \"testMlockFile\"); finalbyte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.mlock(mapbuf, fileSize);for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum); NativeIO(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 166, "n_pass": [546, 41, 41]}
{"time": "2023-09-24 03:26:49.647870", "score": "0.8213", "loss": "1.0487", "code": " void testMlock() throws Exception {  File(new File((\"test\")), \"testMlockFile\"); finalbyte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.mlock(mapbuf, fileSize);for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum); NativeIO(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 165, "n_pass": [552, 42, 42]}
{"time": "2023-09-24 03:26:53.853503", "score": "0.7986", "loss": "1.1201", "code": " void testMlock()throws Exception {  File(new File((\"test\")), \"testMlockFile\"); finalbyte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.mlock(mapbuf, fileSize);for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum); NativeIO(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 164, "n_pass": [559, 44, 43]}
{"time": "2023-09-24 03:26:55.598979", "score": "0.7676", "loss": "1.3319", "code": " void testMlock()throws Exception{  File(new File((\"test\")), \"testMlockFile\"); finalbyte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.mlock(mapbuf, fileSize);for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum); NativeIO(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 163, "n_pass": [563, 45, 44]}
{"time": "2023-09-24 03:27:00.764974", "score": "0.7709", "loss": "1.2082", "code": " void testMlock()throws Exception{  File( File((\"test\")), \"testMlockFile\"); finalbyte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.mlock(mapbuf, fileSize);for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum); NativeIO(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 162, "n_pass": [569, 48, 45]}
{"time": "2023-09-24 03:27:04.257496", "score": "0.7588", "loss": "1.3697", "code": " void testMlock()throws Exception{  File( File((\"test\")), \"testMlockFile\");byte[] buf = new byte[BUF_LEN]; int bufSum =fis = null; ; try { fis = fis.mlock(mapbuf, fileSize);for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum); NativeIO(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 160, "n_pass": [578, 50, 46]}
{"time": "2023-09-24 03:27:06.111578", "score": "0.8883", "loss": "0.7635", "code": " void testMlock()throws Exception{  File( File((\"test\")), \"testMlockFile\");byte[] buf = new byte[LEN]; int bufSum =fis = null; ; try { fis = fis.mlock(mapbuf, fileSize);for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum); NativeIO(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 158, "n_pass": [585, 51, 47]}
{"time": "2023-09-24 03:27:07.918958", "score": "0.8781", "loss": "0.7963", "code": " void testMlock()throws Exception{  File( File((\"test\")), \"testMlockFile\");byte[] buf = new byte[LEN]; bufSum =fis = null; ; try { fis = fis.mlock(mapbuf, fileSize);for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum); NativeIO(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 156, "n_pass": [588, 52, 48]}
{"time": "2023-09-24 03:27:09.810555", "score": "0.9227", "loss": "0.553", "code": " void testMlock()throws Exception{  File( File((\"test\")), \"testMlockFile\");byte[] buf = new byte[LEN]; bufSum  = null; ; try { fis = fis.mlock(mapbuf, fileSize);for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum); NativeIO(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 154, "n_pass": [590, 53, 49]}
{"time": "2023-09-24 03:27:11.669079", "score": "0.8404", "loss": "0.9385", "code": " void testMlock()throws Exception{  File( File((\"test\")), \"testMlockFile\");byte[] buf = new byte[LEN]; bufSum  = null; try { fis = fis.mlock(mapbuf, fileSize);for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum); NativeIO(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 152, "n_pass": [593, 54, 50]}
{"time": "2023-09-24 03:27:13.462597", "score": "0.8913", "loss": "0.7055", "code": " void testMlock()throws Exception{  File( File((\"test\")), \"testMlockFile\");byte[] buf = new byte[LEN]; bufSum  = null; try { fis = mlock(mapbuf, fileSize);for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum); NativeIO(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 150, "n_pass": [599, 55, 51]}
{"time": "2023-09-24 03:27:15.219159", "score": "0.8103", "loss": "1.055", "code": " void testMlock()throws Exception{  File( File((\"test\")), \"testMlockFile\");byte[] buf = new byte[LEN]; bufSum  = null; try { fis = mlock( fileSize);for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum); NativeIO(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 148, "n_pass": [601, 56, 52]}
{"time": "2023-09-24 03:27:16.920860", "score": "0.6531", "loss": "2.0182", "code": " void testMlock()throws Exception{  File( File((\"test\")), \"testMlockFile\");byte[] buf = new byte[LEN]; bufSum  = null; try { fis = mlock();for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum); NativeIO(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 146, "n_pass": [602, 57, 53]}
{"time": "2023-09-24 03:27:18.748818", "score": "0.6492", "loss": "1.9107", "code": " void testMlock()throws Exception{  File( File((\"test\")), \"testMlockFile\");byte[] buf = new byte[LEN]; bufSum  = null; try { fis = mlock();for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 144, "n_pass": [620, 58, 54]}
{"time": "2023-09-24 03:27:20.634882", "score": "0.6512", "loss": "1.9176", "code": "void testMlock()throws Exception{  File( File((\"test\")), \"testMlockFile\");byte[] buf = new byte[LEN]; bufSum  = null; try { fis = mlock();for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 143, "n_pass": [644, 59, 55]}
{"time": "2023-09-24 03:27:23.121705", "score": "0.6454", "loss": "1.9737", "code": "void testMlock()throws Exception{ File( File((\"test\")), \"testMlockFile\");byte[] buf = new byte[LEN]; bufSum  = null; try { fis = mlock();for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 142, "n_pass": [654, 60, 56]}
{"time": "2023-09-24 03:27:24.866680", "score": "0.6387", "loss": "1.986", "code": "void testMlock()throws Exception{File( File((\"test\")), \"testMlockFile\");byte[] buf = new byte[LEN]; bufSum  = null; try { fis = mlock();for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 141, "n_pass": [655, 61, 57]}
{"time": "2023-09-24 03:27:26.693856", "score": "0.6222", "loss": "2.1259", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[] buf = new byte[LEN]; bufSum  = null; try { fis = mlock();for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 139, "n_pass": [658, 62, 58]}
{"time": "2023-09-24 03:27:47.505102", "score": "0.6222", "loss": "2.1259", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf = new byte[LEN]; bufSum  = null; try { fis = mlock();for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 138, "n_pass": [870, 64, 59]}
{"time": "2023-09-24 03:27:49.194444", "score": "0.6222", "loss": "2.1259", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf= new byte[LEN]; bufSum  = null; try { fis = mlock();for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 137, "n_pass": [872, 65, 60]}
{"time": "2023-09-24 03:27:50.939133", "score": "0.6222", "loss": "2.1259", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN]; bufSum  = null; try { fis = mlock();for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 136, "n_pass": [874, 66, 61]}
{"time": "2023-09-24 03:27:54.727447", "score": "0.6222", "loss": "2.1259", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum  = null; try { fis = mlock();for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 135, "n_pass": [882, 68, 62]}
{"time": "2023-09-24 03:27:56.618104", "score": "0.6222", "loss": "2.1259", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum = null; try { fis = mlock();for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 134, "n_pass": [884, 69, 63]}
{"time": "2023-09-24 03:27:58.366384", "score": "0.6222", "loss": "2.1259", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum= null; try { fis = mlock();for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 133, "n_pass": [885, 70, 64]}
{"time": "2023-09-24 03:28:00.148294", "score": "0.6222", "loss": "2.1259", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null; try { fis = mlock();for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 132, "n_pass": [887, 71, 65]}
{"time": "2023-09-24 03:28:02.089223", "score": "0.6222", "loss": "2.1259", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try { fis = mlock();for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 131, "n_pass": [890, 72, 66]}
{"time": "2023-09-24 03:28:03.927602", "score": "0.6222", "loss": "2.1259", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{ fis = mlock();for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 130, "n_pass": [892, 73, 67]}
{"time": "2023-09-24 03:28:05.744962", "score": "0.6222", "loss": "2.1259", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis = mlock();for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 129, "n_pass": [894, 74, 68]}
{"time": "2023-09-24 03:28:07.520870", "score": "0.6222", "loss": "2.1259", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis= mlock();for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 128, "n_pass": [896, 75, 69]}
{"time": "2023-09-24 03:28:09.265168", "score": "0.6222", "loss": "2.1259", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for (int i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 127, "n_pass": [898, 76, 70]}
{"time": "2023-09-24 03:28:11.074254", "score": "0.6222", "loss": "2.1259", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(int i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 126, "n_pass": [904, 77, 71]}
{"time": "2023-09-24 03:28:13.836561", "score": "0.6104", "loss": "2.2705", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for( i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 125, "n_pass": [906, 78, 72]}
{"time": "2023-09-24 03:28:15.589707", "score": "0.6104", "loss": "2.2705", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(i; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 124, "n_pass": [907, 79, 73]}
{"time": "2023-09-24 03:28:17.239180", "score": "0.6395", "loss": "2.0424", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(; i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 123, "n_pass": [908, 80, 74]}
{"time": "2023-09-24 03:28:19.045865", "score": "0.6395", "loss": "2.0424", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i < fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 122, "n_pass": [910, 81, 75]}
{"time": "2023-09-24 03:28:20.746679", "score": "0.6395", "loss": "2.0424", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i< fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 121, "n_pass": [912, 82, 76]}
{"time": "2023-09-24 03:28:22.482946", "score": "0.6395", "loss": "2.0424", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;) {  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 120, "n_pass": [914, 83, 77]}
{"time": "2023-09-24 03:28:24.195185", "score": "0.6395", "loss": "2.0424", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){  } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 119, "n_pass": [918, 84, 78]}
{"time": "2023-09-24 03:28:25.876369", "score": "0.6395", "loss": "2.0424", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){ } assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 118, "n_pass": [920, 85, 79]}
{"time": "2023-09-24 03:28:27.669890", "score": "0.6395", "loss": "2.0424", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){} assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 117, "n_pass": [921, 86, 80]}
{"time": "2023-09-24 03:28:29.369673", "score": "0.6395", "loss": "2.0424", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"equal\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 116, "n_pass": [923, 87, 81]}
{"time": "2023-09-24 03:28:31.081093", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",  sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 115, "n_pass": [927, 88, 82]}
{"time": "2023-09-24 03:28:32.872289", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\", sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 114, "n_pass": [930, 89, 83]}
{"time": "2023-09-24 03:28:34.545654", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf); } finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 113, "n_pass": [931, 90, 84]}
{"time": "2023-09-24 03:28:36.260406", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);} finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 112, "n_pass": [939, 91, 85]}
{"time": "2023-09-24 03:28:37.983885", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);}finally { if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 111, "n_pass": [941, 92, 86]}
{"time": "2023-09-24 03:28:39.762721", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);}finally{ if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 110, "n_pass": [943, 93, 87]}
{"time": "2023-09-24 03:28:41.516999", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);}finally{if ( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 109, "n_pass": [945, 94, 88]}
{"time": "2023-09-24 03:28:43.199228", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);}finally{if( null) { close(); } if (fis ) { close(); } } }", "n_tokens": 108, "n_pass": [947, 95, 89]}
{"time": "2023-09-24 03:28:44.935296", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);}finally{if(null) { close(); } if (fis ) { close(); } } }", "n_tokens": 107, "n_pass": [949, 96, 90]}
{"time": "2023-09-24 03:28:46.738969", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);}finally{if(null){ close(); } if (fis ) { close(); } } }", "n_tokens": 106, "n_pass": [952, 97, 91]}
{"time": "2023-09-24 03:28:48.638650", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);}finally{if(null){close(); } if (fis ) { close(); } } }", "n_tokens": 105, "n_pass": [954, 98, 92]}
{"time": "2023-09-24 03:28:50.455004", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);}finally{if(null){close();} if (fis ) { close(); } } }", "n_tokens": 104, "n_pass": [959, 99, 93]}
{"time": "2023-09-24 03:28:52.183089", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);}finally{if(null){close();}if (fis ) { close(); } } }", "n_tokens": 103, "n_pass": [961, 100, 94]}
{"time": "2023-09-24 03:28:53.961004", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);}finally{if(null){close();}if(fis ) { close(); } } }", "n_tokens": 102, "n_pass": [963, 101, 95]}
{"time": "2023-09-24 03:28:55.679766", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);}finally{if(null){close();}if(fis) { close(); } } }", "n_tokens": 101, "n_pass": [966, 102, 96]}
{"time": "2023-09-24 03:28:57.391110", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);}finally{if(null){close();}if(fis){ close(); } } }", "n_tokens": 100, "n_pass": [968, 103, 97]}
{"time": "2023-09-24 03:28:59.063815", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);}finally{if(null){close();}if(fis){close(); } } }", "n_tokens": 99, "n_pass": [970, 104, 98]}
{"time": "2023-09-24 03:29:00.871290", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);}finally{if(null){close();}if(fis){close();} } }", "n_tokens": 98, "n_pass": [975, 105, 99]}
{"time": "2023-09-24 03:29:02.584362", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);}finally{if(null){close();}if(fis){close();}} }", "n_tokens": 97, "n_pass": [977, 106, 100]}
{"time": "2023-09-24 03:29:04.294870", "score": "0.6213", "loss": "2.1986", "code": "void testMlock()throws Exception{File(((\"test\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);}finally{if(null){close();}if(fis){close();}}}", "n_tokens": 96, "n_pass": [979, 107, 101]}
{"time": "2023-09-24 03:29:06.843898", "score": "0.6355", "loss": "2.0656", "code": "void testMlock()throws Exception{File(((\"\")), \"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);}finally{if(null){close();}if(fis){close();}}}", "n_tokens": 95, "n_pass": [995, 108, 102]}
{"time": "2023-09-24 03:29:08.634868", "score": "0.6355", "loss": "2.0656", "code": "void testMlock()throws Exception{File(((\"\")),\"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i<fileSize;){}assertEquals(\"\",sum);(mapbuf);}finally{if(null){close();}if(fis){close();}}}", "n_tokens": 94, "n_pass": [1000, 109, 103]}
{"time": "2023-09-24 03:29:17.477521", "score": "0.7147", "loss": "1.5915", "code": "void testMlock()throws Exception{File(((\"\")),\"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;ifileSize;){}assertEquals(\"\",sum);(mapbuf);}finally{if(null){close();}if(fis){close();}}}", "n_tokens": 93, "n_pass": [1034, 114, 104]}
{"time": "2023-09-24 03:29:19.203372", "score": "0.634", "loss": "2.0752", "code": "void testMlock()throws Exception{File(((\"\")),\"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;i;){}assertEquals(\"\",sum);(mapbuf);}finally{if(null){close();}if(fis){close();}}}", "n_tokens": 92, "n_pass": [1035, 115, 105]}
{"time": "2023-09-24 03:29:29.010577", "score": "0.6498", "loss": "1.9525", "code": "void testMlock()throws Exception{File(((\"\")),\"testMlockFile\");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;;){}assertEquals(\"\",sum);(mapbuf);}finally{if(null){close();}if(fis){close();}}}", "n_tokens": 91, "n_pass": [1127, 120, 106]}

Minimal simplified code:
void testMlock()throws Exception{File((("")),"testMlockFile");byte[]buf=new byte[LEN];bufSum=null;try{fis=mlock();for(;;){}assertEquals("",sum);(mapbuf);}finally{if(null){close();}if(fis){close();}}}

