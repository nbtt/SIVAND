
path = /Users/lap13494/workspace/ppl-extra-final/java-small/test/hadoop-splitted/StructureGenerator_genDirStructure_1.java
method_name = genDirStructure
method_body = private INode genDirStructure(String rootName, int maxDepth) { INode root = new INode(rootName); if (maxDepth > 0) { maxDepth--; int minDepth = maxDepth * 2 / 3; int numOfSubDirs = minWidth + r.nextInt(maxWidth - minWidth + 1); for (int i = 0; i < numOfSubDirs; i++) { int childDepth = (maxDepth == 0) ? 0 : (r.nextInt(maxDepth - minDepth + 1) + minDepth); INode child = genDirStructure("dir" + i, childDepth); root.addChild(child); } } return root; }
predict, score, loss = genDirStructure, 0.8215703964233398, 0.8617556095123291

Trace of simplified code(s):
{"time": "2023-09-23 23:47:03.202642", "score": "0.81", "loss": "0.9445", "code": "private INode genDirStructure(String rootName, int maxDepth) { INode root = new INode(rootName); if (maxDepth > 0) { maxDepth--; int minDepth = maxDepth * 2 / 3; int numOfSubDirs = minWidth + r.nextInt(maxWidth - minWidth + 1); for (int i = 0; i < numOfSubDirs; i++) { int childDepth = (maxDepth == 0) ? 0 : (r.nextInt(maxDepth - minDepth + 1) + minDepth); INode child = genDirStructure(\"dir\" + i, childDepth); root.addChild(child); } } return root; }", "n_tokens": 200, "n_pass": [1, 1, 1]}
{"time": "2023-09-23 23:47:05.403411", "score": "0.8152", "loss": "0.9126", "code": "private INode genDirStructure(String rootName, int maxDepth) { new INode(rootName); if (maxDepth > 0) { maxDepth--; int minDepth = maxDepth * 2 / 3; int numOfSubDirs = minWidth + r.nextInt(maxWidth - minWidth + 1); for (int i = 0; i < numOfSubDirs; i++) { int childDepth = (maxDepth == 0) ? 0 : (r.nextInt(maxDepth - minDepth + 1) + minDepth); INode child = genDirStructure(\"dir\" + i, childDepth); root.addChild(child); } } return root; }", "n_tokens": 194, "n_pass": [95, 2, 2]}
{"time": "2023-09-23 23:47:07.180792", "score": "0.8619", "loss": "0.6688", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if (maxDepth > 0) { maxDepth--; int minDepth = maxDepth * 2 / 3; int numOfSubDirs = minWidth + r.nextInt(maxWidth - minWidth + 1); for (int i = 0; i < numOfSubDirs; i++) { int childDepth = (maxDepth == 0) ? 0 : (r.nextInt(maxDepth - minDepth + 1) + minDepth); INode child = genDirStructure(\"dir\" + i, childDepth); root.addChild(child); } } return root; }", "n_tokens": 188, "n_pass": [96, 3, 3]}
{"time": "2023-09-23 23:47:09.557962", "score": "0.8218", "loss": "0.7922", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if (maxDepth > 0) { maxDepth--; int minDepth = maxDepth * 2 / 3; int numOfSubDirs = nextInt(maxWidth - minWidth + 1); for (int i = 0; i < numOfSubDirs; i++) { int childDepth = (maxDepth == 0) ? 0 : (r.nextInt(maxDepth - minDepth + 1) + minDepth); INode child = genDirStructure(\"dir\" + i, childDepth); root.addChild(child); } } return root; }", "n_tokens": 182, "n_pass": [104, 4, 4]}
{"time": "2023-09-23 23:47:11.481408", "score": "0.851", "loss": "0.6041", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if (maxDepth > 0) { maxDepth--; int minDepth = maxDepth * 2 / 3; int numOfSubDirs = nextInt(maxWidth - minWidth + 1); for (int i = 0; i < numOfSubDirs; i++) { int childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); INode child = genDirStructure(\"dir\" + i, childDepth); root.addChild(child); } } return root; }", "n_tokens": 175, "n_pass": [116, 5, 5]}
{"time": "2023-09-23 23:47:13.145304", "score": "0.6719", "loss": "1.9421", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if (maxDepth > 0) { maxDepth--; int minDepth = maxDepth * 2 / 3; int numOfSubDirs = nextInt(maxWidth - minWidth + 1); for (int i = 0; i < numOfSubDirs; i++) { int childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); INode child = genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 168, "n_pass": [120, 6, 6]}
{"time": "2023-09-23 23:47:15.239919", "score": "0.8994", "loss": "0.4266", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if (maxDepth > 0) { maxDepth--; int minDepth = maxDepth * 2 / 3; nextInt(maxWidth - minWidth + 1); for (int i = 0; i < numOfSubDirs; i++) { int childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); INode child = genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 162, "n_pass": [133, 7, 7]}
{"time": "2023-09-23 23:47:17.607176", "score": "0.761", "loss": "1.3525", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if (maxDepth > 0) { maxDepth--; int minDepth = maxDepth * 2 / 3; nextInt(maxWidthminWidth + 1); for (int i = 0; i < numOfSubDirs; i++) { int childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); INode child = genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 159, "n_pass": [213, 8, 8]}
{"time": "2023-09-23 23:47:19.354962", "score": "0.8858", "loss": "0.5105", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if (maxDepth > 0) { maxDepth--; int minDepth = maxDepth * 2 / 3; nextInt(maxWidthminWidth + 1); for (int i ; i < numOfSubDirs; i++) { int childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); INode child = genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 156, "n_pass": [219, 9, 9]}
{"time": "2023-09-23 23:47:21.106647", "score": "0.8546", "loss": "0.7222", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if (maxDepth > 0) { maxDepth--; int minDepth = maxDepth * 2 / 3; nextInt(maxWidthminWidth + 1); for (int i ; inumOfSubDirs; i++) { int childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); INode child = genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 153, "n_pass": [221, 10, 10]}
{"time": "2023-09-23 23:47:22.890187", "score": "0.8411", "loss": "0.7775", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if (maxDepth > 0) { maxDepth--; int minDepth = maxDepth * 2 / 3; nextInt(maxWidthminWidth + 1); for (int i ; inumOfSubDirs; ) { int childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); INode child = genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 150, "n_pass": [223, 11, 11]}
{"time": "2023-09-23 23:47:24.671614", "score": "0.8955", "loss": "0.4502", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if (maxDepth > 0) { maxDepth--; int minDepth = maxDepth * 2 / 3; nextInt(maxWidthminWidth + 1); for (int i ; inumOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); INode child = genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 147, "n_pass": [225, 12, 12]}
{"time": "2023-09-23 23:47:26.715324", "score": "0.8604", "loss": "0.6129", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if (maxDepth > 0) { maxDepth--; int minDepth = maxDepth * 2 / 3; nextInt(maxWidthminWidth + 1); for (int i ; inumOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth);child = genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 144, "n_pass": [237, 13, 13]}
{"time": "2023-09-23 23:47:28.619287", "score": "0.8707", "loss": "0.4764", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if (maxDepth > 0) { maxDepth--; int minDepth = maxDepth * 2 / 3; nextInt(maxWidthminWidth + 1); for (int i ; inumOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 141, "n_pass": [238, 14, 14]}
{"time": "2023-09-23 23:47:30.763044", "score": "0.8653", "loss": "0.5003", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if (maxDepth0) { maxDepth--; int minDepth = maxDepth * 2 / 3; nextInt(maxWidthminWidth + 1); for (int i ; inumOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 138, "n_pass": [254, 15, 15]}
{"time": "2023-09-23 23:47:32.524214", "score": "0.856", "loss": "0.5378", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if (maxDepth0) { maxDepth--;minDepth = maxDepth * 2 / 3; nextInt(maxWidthminWidth + 1); for (int i ; inumOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 135, "n_pass": [258, 16, 16]}
{"time": "2023-09-23 23:47:34.491403", "score": "0.8563", "loss": "0.5367", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if (maxDepth0) { maxDepth--;minDepth = maxDepth  / 3; nextInt(maxWidthminWidth + 1); for (int i ; inumOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 132, "n_pass": [261, 17, 17]}
{"time": "2023-09-23 23:47:36.221857", "score": "0.8557", "loss": "0.5478", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if (maxDepth0) { maxDepth--;minDepth = maxDepth  / nextInt(maxWidthminWidth + 1); for (int i ; inumOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 129, "n_pass": [263, 18, 18]}
{"time": "2023-09-23 23:47:38.870745", "score": "0.8462", "loss": "0.6127", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if (maxDepth0) { maxDepthminDepth = maxDepth  / nextInt(maxWidthminWidth + 1); for (int i ; inumOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 126, "n_pass": [301, 19, 19]}
{"time": "2023-09-23 23:47:47.422685", "score": "0.8462", "loss": "0.6127", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if(maxDepth0) { maxDepthminDepth = maxDepth  / nextInt(maxWidthminWidth + 1); for (int i ; inumOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 125, "n_pass": [423, 20, 20]}
{"time": "2023-09-23 23:47:49.162073", "score": "0.8512", "loss": "0.5857", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if(0) { maxDepthminDepth = maxDepth  / nextInt(maxWidthminWidth + 1); for (int i ; inumOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 124, "n_pass": [425, 21, 21]}
{"time": "2023-09-23 23:47:50.931970", "score": "0.8512", "loss": "0.5857", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if(0){ maxDepthminDepth = maxDepth  / nextInt(maxWidthminWidth + 1); for (int i ; inumOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 123, "n_pass": [428, 22, 22]}
{"time": "2023-09-23 23:47:52.692730", "score": "0.8512", "loss": "0.5857", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if(0){maxDepthminDepth = maxDepth  / nextInt(maxWidthminWidth + 1); for (int i ; inumOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 122, "n_pass": [430, 23, 23]}
{"time": "2023-09-23 23:47:54.507282", "score": "0.8606", "loss": "0.5337", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if(0){minDepth = maxDepth  / nextInt(maxWidthminWidth + 1); for (int i ; inumOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 121, "n_pass": [431, 24, 24]}
{"time": "2023-09-23 23:47:56.298348", "score": "0.8606", "loss": "0.5337", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if(0){minDepth= maxDepth  / nextInt(maxWidthminWidth + 1); for (int i ; inumOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 120, "n_pass": [433, 25, 25]}
{"time": "2023-09-23 23:47:58.139935", "score": "0.8606", "loss": "0.5337", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if(0){minDepth=maxDepth  / nextInt(maxWidthminWidth + 1); for (int i ; inumOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 119, "n_pass": [435, 26, 26]}
{"time": "2023-09-23 23:47:59.989734", "score": "0.8639", "loss": "0.5318", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if(0){minDepth=maxDepth  /(maxWidthminWidth + 1); for (int i ; inumOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 117, "n_pass": [438, 27, 27]}
{"time": "2023-09-23 23:48:01.812487", "score": "0.8663", "loss": "0.5165", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if(0){minDepth=maxDepth  /(maxWidth+ 1); for (int i ; inumOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 115, "n_pass": [440, 28, 28]}
{"time": "2023-09-23 23:48:03.580676", "score": "0.8662", "loss": "0.5171", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if(0){minDepth=maxDepth  /(maxWidth1); for (int i ; inumOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 113, "n_pass": [441, 29, 29]}
{"time": "2023-09-23 23:48:05.314173", "score": "0.8722", "loss": "0.5074", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if(0){minDepth=maxDepth  /(maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth == 0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 111, "n_pass": [448, 30, 30]}
{"time": "2023-09-23 23:48:07.440650", "score": "0.8709", "loss": "0.5037", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if(0){minDepth=maxDepth  /(maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth= 0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 109, "n_pass": [455, 31, 31]}
{"time": "2023-09-23 23:48:09.142061", "score": "0.8639", "loss": "0.5492", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if(0){minDepth=maxDepth  /(maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth0) ? 0 : (r.nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 107, "n_pass": [456, 32, 32]}
{"time": "2023-09-23 23:48:10.833423", "score": "0.865", "loss": "0.5429", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if(0){minDepth=maxDepth  /(maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth0) ? 0 : (nextInt( 1) + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 105, "n_pass": [462, 33, 33]}
{"time": "2023-09-23 23:48:12.594607", "score": "0.8627", "loss": "0.56", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if(0){minDepth=maxDepth  /(maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); root.addChild(child); } } return root; }", "n_tokens": 103, "n_pass": [464, 34, 34]}
{"time": "2023-09-23 23:48:14.399949", "score": "0.8764", "loss": "0.4779", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if(0){minDepth=maxDepth  /(maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } } return root; }", "n_tokens": 101, "n_pass": [473, 35, 35]}
{"time": "2023-09-23 23:48:16.221164", "score": "0.8665", "loss": "0.5033", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if(0){minDepth=maxDepth  /(maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } } root; }", "n_tokens": 99, "n_pass": [479, 36, 36]}
{"time": "2023-09-23 23:48:17.922220", "score": "0.864", "loss": "0.5027", "code": "private INode genDirStructure(String rootName, int maxDepth) { ; if(0){minDepth=maxDepth  /(maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 97, "n_pass": [480, 37, 37]}
{"time": "2023-09-23 23:48:19.701296", "score": "0.864", "loss": "0.5027", "code": " INode genDirStructure(String rootName, int maxDepth) { ; if(0){minDepth=maxDepth  /(maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 96, "n_pass": [482, 38, 38]}
{"time": "2023-09-23 23:48:21.445575", "score": "0.864", "loss": "0.5027", "code": "INode genDirStructure(String rootName, int maxDepth) { ; if(0){minDepth=maxDepth  /(maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 95, "n_pass": [483, 39, 39]}
{"time": "2023-09-23 23:48:24.219204", "score": "0.864", "loss": "0.5027", "code": "INode genDirStructure(String rootName,int maxDepth) { ; if(0){minDepth=maxDepth  /(maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 94, "n_pass": [492, 40, 40]}
{"time": "2023-09-23 23:48:26.046599", "score": "0.864", "loss": "0.5027", "code": "INode genDirStructure(String rootName,int maxDepth){ ; if(0){minDepth=maxDepth  /(maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 93, "n_pass": [497, 41, 41]}
{"time": "2023-09-23 23:48:27.817375", "score": "0.864", "loss": "0.5027", "code": "INode genDirStructure(String rootName,int maxDepth){; if(0){minDepth=maxDepth  /(maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 92, "n_pass": [499, 42, 42]}
{"time": "2023-09-23 23:48:29.531016", "score": "0.864", "loss": "0.5027", "code": "INode genDirStructure(String rootName,int maxDepth){ if(0){minDepth=maxDepth  /(maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 91, "n_pass": [500, 43, 43]}
{"time": "2023-09-23 23:48:31.228640", "score": "0.864", "loss": "0.5027", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){minDepth=maxDepth  /(maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 90, "n_pass": [501, 44, 44]}
{"time": "2023-09-23 23:48:33.372749", "score": "0.8637", "loss": "0.4964", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){minDepth=maxDepth (maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 88, "n_pass": [510, 45, 45]}
{"time": "2023-09-23 23:48:36.789249", "score": "0.8613", "loss": "0.5205", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){minDepthmaxDepth (maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 87, "n_pass": [563, 46, 46]}
{"time": "2023-09-23 23:48:38.496874", "score": "0.8713", "loss": "0.4694", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){minDepth(maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 85, "n_pass": [564, 47, 47]}
{"time": "2023-09-23 23:48:41.862268", "score": "0.8701", "loss": "0.472", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i ;numOfSubDirs; ) {childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 84, "n_pass": [616, 48, 48]}
{"time": "2023-09-23 23:48:53.250852", "score": "0.8701", "loss": "0.472", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;numOfSubDirs; ) {childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 83, "n_pass": [735, 49, 49]}
{"time": "2023-09-23 23:48:55.049773", "score": "0.8654", "loss": "0.496", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;; ) {childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 82, "n_pass": [736, 50, 50]}
{"time": "2023-09-23 23:48:56.935241", "score": "0.8654", "loss": "0.496", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;;) {childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 81, "n_pass": [738, 51, 51]}
{"time": "2023-09-23 23:48:58.717310", "score": "0.8654", "loss": "0.496", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;;){childDepth = (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 80, "n_pass": [740, 52, 52]}
{"time": "2023-09-23 23:49:00.482119", "score": "0.8654", "loss": "0.496", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;;){childDepth= (maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 79, "n_pass": [743, 53, 53]}
{"time": "2023-09-23 23:49:02.552121", "score": "0.8654", "loss": "0.496", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;;){childDepth=(maxDepth0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 78, "n_pass": [745, 54, 54]}
{"time": "2023-09-23 23:49:04.271396", "score": "0.8661", "loss": "0.4906", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;;){childDepth=(0) ? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 77, "n_pass": [747, 55, 55]}
{"time": "2023-09-23 23:49:06.009964", "score": "0.8661", "loss": "0.4906", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;;){childDepth=(0)? 0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 76, "n_pass": [750, 56, 56]}
{"time": "2023-09-23 23:49:07.753990", "score": "0.8661", "loss": "0.4906", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;;){childDepth=(0)?0 : (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 75, "n_pass": [752, 57, 57]}
{"time": "2023-09-23 23:49:09.548284", "score": "0.8661", "loss": "0.4906", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;;){childDepth=(0)?0: (nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 74, "n_pass": [754, 58, 58]}
{"time": "2023-09-23 23:49:11.301088", "score": "0.8661", "loss": "0.4906", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;;){childDepth=(0)?0:(nextInt() + minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 73, "n_pass": [756, 59, 59]}
{"time": "2023-09-23 23:49:13.050126", "score": "0.8661", "loss": "0.4906", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;;){childDepth=(0)?0:(nextInt()+ minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 72, "n_pass": [761, 60, 60]}
{"time": "2023-09-23 23:49:14.780698", "score": "0.8661", "loss": "0.4906", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;;){childDepth=(0)?0:(nextInt()+minDepth); genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 71, "n_pass": [763, 61, 61]}
{"time": "2023-09-23 23:49:16.600495", "score": "0.8661", "loss": "0.4906", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;;){childDepth=(0)?0:(nextInt()+minDepth);genDirStructure(\"dir\"); addChild(child); } }  }", "n_tokens": 70, "n_pass": [767, 62, 62]}
{"time": "2023-09-23 23:49:21.804755", "score": "0.8661", "loss": "0.4906", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;;){childDepth=(0)?0:(nextInt()+minDepth);genDirStructure(\"dir\");addChild(child); } }  }", "n_tokens": 69, "n_pass": [775, 65, 63]}
{"time": "2023-09-23 23:49:23.574974", "score": "0.8585", "loss": "0.5671", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;;){childDepth=(0)?0:(nextInt()+minDepth);genDirStructure(\"dir\");(child); } }  }", "n_tokens": 68, "n_pass": [776, 66, 64]}
{"time": "2023-09-23 23:49:25.352196", "score": "0.8585", "loss": "0.5671", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;;){childDepth=(0)?0:(nextInt()+minDepth);genDirStructure(\"dir\");(child);} }  }", "n_tokens": 67, "n_pass": [781, 67, 65]}
{"time": "2023-09-23 23:49:27.003280", "score": "0.8585", "loss": "0.5671", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;;){childDepth=(0)?0:(nextInt()+minDepth);genDirStructure(\"dir\");(child);}}  }", "n_tokens": 66, "n_pass": [783, 68, 66]}
{"time": "2023-09-23 23:49:28.826275", "score": "0.8585", "loss": "0.5671", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;;){childDepth=(0)?0:(nextInt()+minDepth);genDirStructure(\"dir\");(child);}} }", "n_tokens": 65, "n_pass": [785, 69, 67]}
{"time": "2023-09-23 23:49:30.578194", "score": "0.8585", "loss": "0.5671", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(maxWidth1); for (int i;;){childDepth=(0)?0:(nextInt()+minDepth);genDirStructure(\"dir\");(child);}}}", "n_tokens": 64, "n_pass": [786, 70, 68]}
{"time": "2023-09-23 23:49:33.460739", "score": "0.8154", "loss": "0.7543", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(1); for (int i;;){childDepth=(0)?0:(nextInt()+minDepth);genDirStructure(\"dir\");(child);}}}", "n_tokens": 63, "n_pass": [807, 71, 69]}
{"time": "2023-09-23 23:49:35.109504", "score": "0.8154", "loss": "0.7543", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(1);for (int i;;){childDepth=(0)?0:(nextInt()+minDepth);genDirStructure(\"dir\");(child);}}}", "n_tokens": 62, "n_pass": [811, 72, 70]}
{"time": "2023-09-23 23:49:36.830383", "score": "0.8154", "loss": "0.7543", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(1);for(int i;;){childDepth=(0)?0:(nextInt()+minDepth);genDirStructure(\"dir\");(child);}}}", "n_tokens": 61, "n_pass": [813, 73, 71]}
{"time": "2023-09-23 23:49:38.563612", "score": "0.8343", "loss": "0.6738", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(1);for( i;;){childDepth=(0)?0:(nextInt()+minDepth);genDirStructure(\"dir\");(child);}}}", "n_tokens": 60, "n_pass": [815, 74, 72]}
{"time": "2023-09-23 23:49:40.262426", "score": "0.8343", "loss": "0.6738", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(1);for(i;;){childDepth=(0)?0:(nextInt()+minDepth);genDirStructure(\"dir\");(child);}}}", "n_tokens": 59, "n_pass": [816, 75, 73]}
{"time": "2023-09-23 23:49:41.922755", "score": "0.8276", "loss": "0.6983", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(1);for(;;){childDepth=(0)?0:(nextInt()+minDepth);genDirStructure(\"dir\");(child);}}}", "n_tokens": 58, "n_pass": [817, 76, 74]}
{"time": "2023-09-23 23:49:45.778649", "score": "0.7015", "loss": "1.3827", "code": "INode genDirStructure(String rootName,int maxDepth){if(0){(1);for(;;){childDepth=(0)?0:(nextInt()+minDepth);genDirStructure(\"\");(child);}}}", "n_tokens": 57, "n_pass": [841, 78, 75]}

Minimal simplified code:
INode genDirStructure(String rootName,int maxDepth){if(0){(1);for(;;){childDepth=(0)?0:(nextInt()+minDepth);genDirStructure("");(child);}}}

