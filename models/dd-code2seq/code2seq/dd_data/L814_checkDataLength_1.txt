
path = /Users/lap13494/workspace/ppl-extra-final/java-small/test/hadoop-splitted/Server_checkDataLength_0.java
method_name = checkDataLength
method_body = private void checkDataLength(int dataLength) throws IOException { if (dataLength < 0) { String error = "Unexpected data length " + dataLength + "!! from " + getHostAddress(); LOG.warn(error); throw new IOException(error); } else if (dataLength > maxDataLength) { String error = "Requested data length " + dataLength + " is longer than maximum configured RPC length " + maxDataLength + ". RPC came from " + getHostAddress(); LOG.warn(error); throw new IOException(error); } }
predict, score, loss = checkDataLength, 0.7724084854125977, 1.0486583709716797

Trace of simplified code(s):
{"time": "2023-09-24 02:46:25.964845", "score": "0.7724", "loss": "1.0487", "code": "private void checkDataLength(int dataLength) throws IOException { if (dataLength < 0) { String error = \"Unexpected data length \" + dataLength + \"!! from \" + getHostAddress(); LOG.warn(error); throw new IOException(error); } else if (dataLength > maxDataLength) { String error = \"Requested data length \" + dataLength + \" is longer than maximum configured RPC length \" + maxDataLength + \". RPC came from \" + getHostAddress(); LOG.warn(error); throw new IOException(error); } }", "n_tokens": 183, "n_pass": [1, 1, 1]}
{"time": "2023-09-24 02:46:27.759866", "score": "0.7677", "loss": "1.0409", "code": "private void checkDataLength(int dataLength) throws IOException { if (dataLength < 0) { String error = \"Unexpected data length \" +(error); throw new IOException(error); } else if (dataLength > maxDataLength) { String error = \"Requested data length \" + dataLength + \" is longer than maximum configured RPC length \" + maxDataLength + \". RPC came from \" + getHostAddress(); LOG.warn(error); throw new IOException(error); } }", "n_tokens": 160, "n_pass": [22, 2, 2]}
{"time": "2023-09-24 02:46:29.513309", "score": "0.79", "loss": "0.9184", "code": "private void checkDataLength(int dataLength) throws IOException { if (dataLength < 0) { String error = \"Unexpected data length \" +(error); throw new IOException(error); } else if (dataLength > maxDataLength) { String error = \"Requested data length \"  + maxDataLength + \". RPC came from \" + getHostAddress(); LOG.warn(error); throw new IOException(error); } }", "n_tokens": 137, "n_pass": [24, 3, 3]}
{"time": "2023-09-24 02:46:31.216670", "score": "0.7884", "loss": "0.9093", "code": "private void checkDataLength(int dataLength) throws IOException { if (dataLength < 0) { String error = \"Unexpected data length \" +(error); throw new IOException(error); } else if (dataLength > maxDataLength) { String error = \"Requested data length \" ; LOG.warn(error); throw new IOException(error); } }", "n_tokens": 114, "n_pass": [25, 4, 4]}
{"time": "2023-09-24 02:46:33.003626", "score": "0.7802", "loss": "0.9712", "code": "private void checkDataLength(int dataLength) throws IOException { if (dataLength < 0) { String error = \"Unexpected data length \" +(error); throw new IOException(error); } else if (dataLength > maxDataLength) { String  ; LOG.warn(error); throw new IOException(error); } }", "n_tokens": 102, "n_pass": [50, 5, 5]}
{"time": "2023-09-24 02:46:34.834995", "score": "0.7874", "loss": "0.9294", "code": "private void checkDataLength(int dataLength) throws IOException { if (dataLength < 0) { String error = \"Unexpected data length \" +(error); throw new IOException(error); } else if (dataLength > maxDataLength) { String (error); throw new IOException(error); } }", "n_tokens": 96, "n_pass": [78, 6, 6]}
{"time": "2023-09-24 02:46:36.689268", "score": "0.8384", "loss": "0.6699", "code": "private void checkDataLength(int dataLength){ if (dataLength < 0) { String error = \"Unexpected data length \" +(error); throw new IOException(error); } else if (dataLength > maxDataLength) { String (error); throw new IOException(error); } }", "n_tokens": 91, "n_pass": [83, 7, 7]}
{"time": "2023-09-24 02:46:38.610589", "score": "0.8268", "loss": "0.7545", "code": "private void checkDataLength(int dataLength){ if (dataLength < 0) { String error = \"\" +(error); throw new IOException(error); } else if (dataLength > maxDataLength) { String (error); throw new IOException(error); } }", "n_tokens": 85, "n_pass": [88, 8, 8]}
{"time": "2023-09-24 02:46:40.536230", "score": "0.7808", "loss": "1.1687", "code": "private void checkDataLength(int dataLength){ if (dataLength < 0) { String error = \"\" +(error)IOException(error); } else if (dataLength > maxDataLength) { String (error); throw new IOException(error); } }", "n_tokens": 79, "n_pass": [90, 9, 9]}
{"time": "2023-09-24 02:46:42.501658", "score": "0.7133", "loss": "1.7932", "code": "private void checkDataLength(int dataLength){ if (dataLength < 0) { String error = \"\" +(error)IOException(error); } else if (dataLength ) { String (error); throw new IOException(error); } }", "n_tokens": 76, "n_pass": [138, 10, 10]}
{"time": "2023-09-24 02:46:44.223963", "score": "0.7453", "loss": "1.4435", "code": "private void checkDataLength(int dataLength){ if (dataLength < 0) { String error = \"\" +(error)IOException(error); } else if (dataLength ) {(error); throw new IOException(error); } }", "n_tokens": 73, "n_pass": [140, 11, 11]}
{"time": "2023-09-24 02:46:45.929246", "score": "0.7588", "loss": "1.438", "code": "private void checkDataLength(int dataLength){ if (dataLength < 0) { String error = \"\" +(error)IOException(error); } else if (dataLength ) {; throw new IOException(error); } }", "n_tokens": 70, "n_pass": [141, 12, 12]}
{"time": "2023-09-24 02:46:51.138704", "score": "0.7588", "loss": "1.438", "code": "void checkDataLength(int dataLength){ if (dataLength < 0) { String error = \"\" +(error)IOException(error); } else if (dataLength ) {; throw new IOException(error); } }", "n_tokens": 68, "n_pass": [147, 15, 13]}
{"time": "2023-09-24 02:46:53.235025", "score": "0.7418", "loss": "1.5836", "code": "void checkDataLength(int dataLength){ if (dataLength0) { String error = \"\" +(error)IOException(error); } else if (dataLength ) {; throw new IOException(error); } }", "n_tokens": 65, "n_pass": [154, 16, 14]}
{"time": "2023-09-24 02:46:54.991500", "score": "0.5945", "loss": "2.7502", "code": "void checkDataLength(int dataLength){ if (dataLength0) { String= \"\" +(error)IOException(error); } else if (dataLength ) {; throw new IOException(error); } }", "n_tokens": 62, "n_pass": [157, 17, 15]}
{"time": "2023-09-24 02:46:56.797141", "score": "0.6288", "loss": "2.5861", "code": "void checkDataLength(int dataLength){ if (dataLength0) { String= \"\" +IOException(error); } else if (dataLength ) {; throw new IOException(error); } }", "n_tokens": 59, "n_pass": [160, 18, 16]}
{"time": "2023-09-24 02:47:04.859959", "score": "0.6288", "loss": "2.5861", "code": "void checkDataLength(int dataLength){ if (dataLength0) { String=\"\" +IOException(error); } else if (dataLength ) {; throw new IOException(error); } }", "n_tokens": 58, "n_pass": [225, 21, 17]}
{"time": "2023-09-24 02:47:06.538726", "score": "0.6288", "loss": "2.5861", "code": "void checkDataLength(int dataLength){ if (dataLength0) { String=\"\"+IOException(error); } else if (dataLength ) {; throw new IOException(error); } }", "n_tokens": 57, "n_pass": [228, 22, 18]}
{"time": "2023-09-24 02:47:08.286995", "score": "0.7529", "loss": "1.4234", "code": "void checkDataLength(int dataLength){ if (dataLength0) { String=\"\"+IOException(error); } if (dataLength ) {; throw new IOException(error); } }", "n_tokens": 55, "n_pass": [233, 23, 19]}
{"time": "2023-09-24 02:47:11.791829", "score": "0.6858", "loss": "1.9012", "code": "void checkDataLength(int dataLength){ if (dataLength0) { String=\"\"+IOException(error); } if (dataLength ) {; throw IOException(error); } }", "n_tokens": 53, "n_pass": [240, 25, 20]}
{"time": "2023-09-24 02:47:13.499772", "score": "0.6878", "loss": "2.0928", "code": "void checkDataLength(int dataLength){ if (dataLength0) { String=\"\"+IOException(error); } if (dataLength ) {; throw(error); } }", "n_tokens": 51, "n_pass": [241, 26, 21]}
{"time": "2023-09-24 02:47:15.922237", "score": "0.6878", "loss": "2.0928", "code": "void checkDataLength(int dataLength){if (dataLength0) { String=\"\"+IOException(error); } if (dataLength ) {; throw(error); } }", "n_tokens": 50, "n_pass": [255, 27, 22]}
{"time": "2023-09-24 02:47:17.699374", "score": "0.6878", "loss": "2.0928", "code": "void checkDataLength(int dataLength){if(dataLength0) { String=\"\"+IOException(error); } if (dataLength ) {; throw(error); } }", "n_tokens": 49, "n_pass": [257, 28, 23]}
{"time": "2023-09-24 02:47:19.283948", "score": "0.5683", "loss": "3.0684", "code": "void checkDataLength(int dataLength){if(0) { String=\"\"+IOException(error); } if (dataLength ) {; throw(error); } }", "n_tokens": 48, "n_pass": [259, 29, 24]}
{"time": "2023-09-24 02:47:20.892422", "score": "0.5683", "loss": "3.0684", "code": "void checkDataLength(int dataLength){if(0){ String=\"\"+IOException(error); } if (dataLength ) {; throw(error); } }", "n_tokens": 47, "n_pass": [262, 30, 25]}
{"time": "2023-09-24 02:47:22.499863", "score": "0.5683", "loss": "3.0684", "code": "void checkDataLength(int dataLength){if(0){String=\"\"+IOException(error); } if (dataLength ) {; throw(error); } }", "n_tokens": 46, "n_pass": [264, 31, 26]}
{"time": "2023-09-24 02:47:30.150034", "score": "0.63", "loss": "2.6662", "code": "void checkDataLength(int dataLength){if(0){String=\"\"+IOException(); } if (dataLength ) {; throw(error); } }", "n_tokens": 45, "n_pass": [326, 33, 27]}
{"time": "2023-09-24 02:47:31.806237", "score": "0.63", "loss": "2.6662", "code": "void checkDataLength(int dataLength){if(0){String=\"\"+IOException();} if (dataLength ) {; throw(error); } }", "n_tokens": 44, "n_pass": [329, 34, 28]}
{"time": "2023-09-24 02:47:33.615189", "score": "0.63", "loss": "2.6662", "code": "void checkDataLength(int dataLength){if(0){String=\"\"+IOException();}if (dataLength ) {; throw(error); } }", "n_tokens": 43, "n_pass": [331, 35, 29]}
{"time": "2023-09-24 02:47:35.450835", "score": "0.63", "loss": "2.6662", "code": "void checkDataLength(int dataLength){if(0){String=\"\"+IOException();}if(dataLength ) {; throw(error); } }", "n_tokens": 42, "n_pass": [333, 36, 30]}
{"time": "2023-09-24 02:47:37.271899", "score": "0.63", "loss": "2.6662", "code": "void checkDataLength(int dataLength){if(0){String=\"\"+IOException();}if(dataLength) {; throw(error); } }", "n_tokens": 41, "n_pass": [336, 37, 31]}
{"time": "2023-09-24 02:47:38.977252", "score": "0.63", "loss": "2.6662", "code": "void checkDataLength(int dataLength){if(0){String=\"\"+IOException();}if(dataLength){; throw(error); } }", "n_tokens": 40, "n_pass": [338, 38, 32]}
{"time": "2023-09-24 02:47:40.624197", "score": "0.63", "loss": "2.6662", "code": "void checkDataLength(int dataLength){if(0){String=\"\"+IOException();}if(dataLength){ throw(error); } }", "n_tokens": 39, "n_pass": [340, 39, 33]}
{"time": "2023-09-24 02:47:42.301494", "score": "0.63", "loss": "2.6662", "code": "void checkDataLength(int dataLength){if(0){String=\"\"+IOException();}if(dataLength){throw(error); } }", "n_tokens": 38, "n_pass": [341, 40, 34]}
{"time": "2023-09-24 02:47:45.730142", "score": "0.63", "loss": "2.6662", "code": "void checkDataLength(int dataLength){if(0){String=\"\"+IOException();}if(dataLength){throw(error);} }", "n_tokens": 37, "n_pass": [347, 42, 35]}
{"time": "2023-09-24 02:47:47.356655", "score": "0.63", "loss": "2.6662", "code": "void checkDataLength(int dataLength){if(0){String=\"\"+IOException();}if(dataLength){throw(error);}}", "n_tokens": 36, "n_pass": [349, 43, 36]}

Minimal simplified code:
void checkDataLength(int dataLength){if(0){String=""+IOException();}if(dataLength){throw(error);}}

