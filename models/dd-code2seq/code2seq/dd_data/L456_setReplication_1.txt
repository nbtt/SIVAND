
path = /Users/lap13494/workspace/ppl-extra-final/java-small/test/hadoop-splitted/DistCpV1_setReplication_0.java
method_name = setReplication
method_body = private static void setReplication(Configuration conf, JobConf jobConf, Path srcfilelist, int numMaps) throws IOException { int numMaxMaps = new JobClient(jobConf).getClusterStatus().getMaxMapTasks(); short replication = (short) Math.ceil(Math.sqrt(Math.min(numMaxMaps, numMaps))); FileSystem fs = srcfilelist.getFileSystem(conf); FileStatus srcStatus = fs.getFileStatus(srcfilelist); if (srcStatus.getReplication() < replication) { if (!fs.setReplication(srcfilelist, replication)) { throw new IOException("Unable to increase the replication of file " + srcfilelist); } } }
predict, score, loss = setReplication, 0.5682883262634277, 2.744100570678711

Trace of simplified code(s):
{"time": "2023-09-24 01:17:34.607863", "score": "0.492", "loss": "3.5163", "code": "private static void setReplication(Configuration conf, JobConf jobConf, Path srcfilelist, int numMaps) throws IOException { int numMaxMaps = new JobClient(jobConf).getClusterStatus().getMaxMapTasks(); short replication = (short) Math.ceil(Math.sqrt(Math.min(numMaxMaps, numMaps))); FileSystem fs = srcfilelist.getFileSystem(conf); FileStatus srcStatus = fs.getFileStatus(srcfilelist); if (srcStatus.getReplication() < replication) { if (!fs.setReplication(srcfilelist, replication)) { throw new IOException(\"Unable to increase the replication of file \" + srcfilelist); } } }", "n_tokens": 182, "n_pass": [1, 1, 1]}
{"time": "2023-09-24 01:17:36.779354", "score": "0.5904", "loss": "2.6366", "code": "private static void setReplication(Configuration conf, JobConf jobConf, Path srcfilelist, int numMaps) throws IOException { int numMaxMaps = new JobClient(jobConf).getClusterStatus().getMaxMapTasks(); short replication = (short) Math.ceil(Math.sqrt(Math.min(numMaxMaps, numMaps))); FileSystem fs; if (srcStatus.getReplication() < replication) { if (!fs.setReplication(srcfilelist, replication)) { throw new IOException(\"Unable to increase the replication of file \" + srcfilelist); } } }", "n_tokens": 159, "n_pass": [24, 2, 2]}
{"time": "2023-09-24 01:17:38.531762", "score": "0.6132", "loss": "2.3128", "code": "private static void setReplication(Configuration conf, JobConf jobConf, Path srcfilelist, int numMaps) throws IOException { int numMaxMaps = new JobClient(jobConf).getClusterStatus().getMaxMapTasks(); short replication = (short) Math; if (srcStatus.getReplication() < replication) { if (!fs.setReplication(srcfilelist, replication)) { throw new IOException(\"Unable to increase the replication of file \" + srcfilelist); } } }", "n_tokens": 136, "n_pass": [30, 3, 3]}
{"time": "2023-09-24 01:17:40.442984", "score": "0.5963", "loss": "2.3271", "code": "private static void setReplication(Configuration conf, JobConf jobConf, Path srcfilelist, int numMaps) throws IOException { int numMaxMaps = new JobClient(jobConf).getClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (!fs.setReplication(srcfilelist, replication)) { throw new IOException(\"Unable to increase the replication of file \" + srcfilelist); } } }", "n_tokens": 125, "n_pass": [60, 4, 4]}
{"time": "2023-09-24 01:17:42.349652", "score": "0.6848", "loss": "1.6381", "code": "private static void setReplication(Configuration conf, JobConf jobConf, Path srcfilelist, int numMaps) throws IOException { int numMaxMaps = new JobClient(jobConf).getClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (!fs.setReplication(srcfilelist, replication)) { throw new IOException(\"Unable to of file \" + srcfilelist); } } }", "n_tokens": 119, "n_pass": [102, 5, 5]}
{"time": "2023-09-24 01:17:44.391587", "score": "0.7107", "loss": "1.4463", "code": "private static void setReplication(Configuration jobConf, Path srcfilelist, int numMaps) throws IOException { int numMaxMaps = new JobClient(jobConf).getClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (!fs.setReplication(srcfilelist, replication)) { throw new IOException(\"Unable to of file \" + srcfilelist); } } }", "n_tokens": 114, "n_pass": [107, 6, 6]}
{"time": "2023-09-24 01:17:46.233252", "score": "0.7045", "loss": "1.4359", "code": "private static void setReplication(Configuration srcfilelist, int numMaps) throws IOException { int numMaxMaps = new JobClient(jobConf).getClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (!fs.setReplication(srcfilelist, replication)) { throw new IOException(\"Unable to of file \" + srcfilelist); } } }", "n_tokens": 109, "n_pass": [108, 7, 7]}
{"time": "2023-09-24 01:17:49.714272", "score": "0.7382", "loss": "1.202", "code": "private static void setReplication(Configuration srcfilelist, int numMaps) throws IOException { int numMaxMaps = newgetClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (!fs.setReplication(srcfilelist, replication)) { throw new IOException(\"Unable to of file \" + srcfilelist); } } }", "n_tokens": 103, "n_pass": [113, 9, 8]}
{"time": "2023-09-24 01:17:51.906212", "score": "0.571", "loss": "2.2378", "code": "private static void setReplication(Configuration numMaps) throws IOException { int numMaxMaps = newgetClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (!fs.setReplication(srcfilelist, replication)) { throw new IOException(\"Unable to of file \" + srcfilelist); } } }", "n_tokens": 98, "n_pass": [128, 10, 9]}
{"time": "2023-09-24 01:17:53.625709", "score": "0.5721", "loss": "2.3759", "code": "private static void setReplication(Configuration numMaps) throws IOException { intgetClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (!fs.setReplication(srcfilelist, replication)) { throw new IOException(\"Unable to of file \" + srcfilelist); } } }", "n_tokens": 92, "n_pass": [131, 11, 10]}
{"time": "2023-09-24 01:17:55.911366", "score": "0.4972", "loss": "2.8498", "code": "private static void setReplication(Configuration numMaps) throws IOException { intgetClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (setReplication(srcfilelist, replication)) { throw new IOException(\"Unable to of file \" + srcfilelist); } } }", "n_tokens": 89, "n_pass": [190, 12, 11]}
{"time": "2023-09-24 01:17:59.410630", "score": "0.5203", "loss": "2.8641", "code": "private static void setReplication(Configuration numMaps) throws IOException { intgetClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (setReplication(srcfilelist, replication)) { throwIOException(\"Unable to of file \" + srcfilelist); } } }", "n_tokens": 86, "n_pass": [194, 14, 12]}
{"time": "2023-09-24 01:18:01.119073", "score": "0.5218", "loss": "2.8148", "code": "private static void setReplication(Configuration numMaps) throws IOException { intgetClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (setReplication(srcfilelist, replication)) { throwIOException(\" of file \" + srcfilelist); } } }", "n_tokens": 83, "n_pass": [196, 15, 13]}
{"time": "2023-09-24 01:18:02.844891", "score": "0.5432", "loss": "2.7237", "code": "private static void setReplication(Configuration numMaps) throws IOException { intgetClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (setReplication(srcfilelist, replication)) { throwIOException(\"file \" + srcfilelist); } } }", "n_tokens": 80, "n_pass": [197, 16, 14]}
{"time": "2023-09-24 01:18:04.563785", "score": "0.5432", "loss": "2.7237", "code": "static void setReplication(Configuration numMaps) throws IOException { intgetClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (setReplication(srcfilelist, replication)) { throwIOException(\"file \" + srcfilelist); } } }", "n_tokens": 78, "n_pass": [203, 17, 15]}
{"time": "2023-09-24 01:18:06.289832", "score": "0.5432", "loss": "2.7237", "code": "void setReplication(Configuration numMaps) throws IOException { intgetClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (setReplication(srcfilelist, replication)) { throwIOException(\"file \" + srcfilelist); } } }", "n_tokens": 76, "n_pass": [204, 18, 16]}
{"time": "2023-09-24 01:18:10.077010", "score": "0.3593", "loss": "4.0099", "code": "void setReplication(Configuration numMaps) throws IOException { intgetClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (setReplication(srcfilelist)) { throwIOException(\"file \" + srcfilelist); } } }", "n_tokens": 73, "n_pass": [222, 20, 17]}
{"time": "2023-09-24 01:18:16.859457", "score": "0.3661", "loss": "3.9865", "code": "void setReplication(Configuration numMaps) throws IOException { intgetClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (setReplication(srcfilelist)) {IOException(\"file \" + srcfilelist); } } }", "n_tokens": 71, "n_pass": [304, 22, 18]}
{"time": "2023-09-24 01:18:19.479962", "score": "0.3661", "loss": "3.9865", "code": "void setReplication(Configuration numMaps)throws IOException { intgetClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (setReplication(srcfilelist)) {IOException(\"file \" + srcfilelist); } } }", "n_tokens": 70, "n_pass": [322, 23, 19]}
{"time": "2023-09-24 01:18:21.428718", "score": "0.3661", "loss": "3.9865", "code": "void setReplication(Configuration numMaps)throws IOException{ intgetClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (setReplication(srcfilelist)) {IOException(\"file \" + srcfilelist); } } }", "n_tokens": 69, "n_pass": [326, 24, 20]}
{"time": "2023-09-24 01:18:23.147901", "score": "0.3661", "loss": "3.9865", "code": "void setReplication(Configuration numMaps)throws IOException{intgetClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (setReplication(srcfilelist)) {IOException(\"file \" + srcfilelist); } } }", "n_tokens": 68, "n_pass": [328, 25, 21]}
{"time": "2023-09-24 01:18:24.898831", "score": "0.3562", "loss": "4.0235", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();Math; if (srcStatus.getReplication() < replication) { if (setReplication(srcfilelist)) {IOException(\"file \" + srcfilelist); } } }", "n_tokens": 67, "n_pass": [329, 26, 22]}
{"time": "2023-09-24 01:18:26.739342", "score": "0.3984", "loss": "3.7088", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();; if (srcStatus.getReplication() < replication) { if (setReplication(srcfilelist)) {IOException(\"file \" + srcfilelist); } } }", "n_tokens": 66, "n_pass": [338, 27, 23]}
{"time": "2023-09-24 01:18:28.487651", "score": "0.3984", "loss": "3.7088", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks(); if (srcStatus.getReplication() < replication) { if (setReplication(srcfilelist)) {IOException(\"file \" + srcfilelist); } } }", "n_tokens": 65, "n_pass": [339, 28, 24]}
{"time": "2023-09-24 01:18:30.212139", "score": "0.3984", "loss": "3.7088", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if (srcStatus.getReplication() < replication) { if (setReplication(srcfilelist)) {IOException(\"file \" + srcfilelist); } } }", "n_tokens": 64, "n_pass": [340, 29, 25]}
{"time": "2023-09-24 01:18:31.982336", "score": "0.4063", "loss": "3.872", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if (srcStatus() < replication) { if (setReplication(srcfilelist)) {IOException(\"file \" + srcfilelist); } } }", "n_tokens": 62, "n_pass": [343, 30, 26]}
{"time": "2023-09-24 01:18:33.647486", "score": "0.4405", "loss": "3.7306", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if (srcStatus < replication) { if (setReplication(srcfilelist)) {IOException(\"file \" + srcfilelist); } } }", "n_tokens": 60, "n_pass": [344, 31, 27]}
{"time": "2023-09-24 01:18:40.635049", "score": "0.4405", "loss": "3.7306", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if (srcStatus < replication) { if(setReplication(srcfilelist)) {IOException(\"file \" + srcfilelist); } } }", "n_tokens": 59, "n_pass": [425, 32, 28]}
{"time": "2023-09-24 01:18:46.125341", "score": "0.4405", "loss": "3.7306", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if (srcStatus < replication) { if(setReplication(srcfilelist)){IOException(\"file \" + srcfilelist); } } }", "n_tokens": 58, "n_pass": [432, 35, 29]}
{"time": "2023-09-24 01:18:47.830009", "score": "0.4621", "loss": "3.4743", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if (srcStatus < replication) { if(setReplication(srcfilelist)){(\"file \" + srcfilelist); } } }", "n_tokens": 57, "n_pass": [434, 36, 30]}
{"time": "2023-09-24 01:18:49.644047", "score": "0.4441", "loss": "3.5411", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if (srcStatus < replication) { if(setReplication(srcfilelist)){(\" \" + srcfilelist); } } }", "n_tokens": 56, "n_pass": [437, 37, 31]}
{"time": "2023-09-24 01:18:51.403002", "score": "0.4357", "loss": "3.615", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if (srcStatus < replication) { if(setReplication(srcfilelist)){(\"\" + srcfilelist); } } }", "n_tokens": 55, "n_pass": [438, 38, 32]}
{"time": "2023-09-24 01:18:53.140279", "score": "0.4357", "loss": "3.615", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if (srcStatus < replication) { if(setReplication(srcfilelist)){(\"\"+ srcfilelist); } } }", "n_tokens": 54, "n_pass": [440, 39, 33]}
{"time": "2023-09-24 01:18:54.906013", "score": "0.4357", "loss": "3.615", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if (srcStatus < replication) { if(setReplication(srcfilelist)){(\"\"+srcfilelist); } } }", "n_tokens": 53, "n_pass": [442, 40, 34]}
{"time": "2023-09-24 01:18:56.663468", "score": "0.4357", "loss": "3.615", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if (srcStatus < replication) { if(setReplication(srcfilelist)){(\"\"+srcfilelist);} } }", "n_tokens": 52, "n_pass": [446, 41, 35]}
{"time": "2023-09-24 01:18:58.382494", "score": "0.4357", "loss": "3.615", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if (srcStatus < replication) { if(setReplication(srcfilelist)){(\"\"+srcfilelist);}} }", "n_tokens": 51, "n_pass": [448, 42, 36]}
{"time": "2023-09-24 01:19:00.105862", "score": "0.4357", "loss": "3.615", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if (srcStatus < replication) { if(setReplication(srcfilelist)){(\"\"+srcfilelist);}}}", "n_tokens": 50, "n_pass": [450, 43, 37]}
{"time": "2023-09-24 01:19:02.754528", "score": "0.4357", "loss": "3.615", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if(srcStatus < replication) { if(setReplication(srcfilelist)){(\"\"+srcfilelist);}}}", "n_tokens": 49, "n_pass": [473, 44, 38]}
{"time": "2023-09-24 01:19:04.686715", "score": "0.4357", "loss": "3.615", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if(srcStatus< replication) { if(setReplication(srcfilelist)){(\"\"+srcfilelist);}}}", "n_tokens": 48, "n_pass": [476, 45, 39]}
{"time": "2023-09-24 01:19:06.531717", "score": "0.4357", "loss": "3.615", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if(srcStatus<replication) { if(setReplication(srcfilelist)){(\"\"+srcfilelist);}}}", "n_tokens": 47, "n_pass": [478, 46, 40]}
{"time": "2023-09-24 01:19:08.474292", "score": "0.4357", "loss": "3.615", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if(srcStatus<replication){ if(setReplication(srcfilelist)){(\"\"+srcfilelist);}}}", "n_tokens": 46, "n_pass": [481, 47, 41]}
{"time": "2023-09-24 01:19:10.254229", "score": "0.4357", "loss": "3.615", "code": "void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if(srcStatus<replication){if(setReplication(srcfilelist)){(\"\"+srcfilelist);}}}", "n_tokens": 45, "n_pass": [483, 48, 42]}

Minimal simplified code:
void setReplication(Configuration numMaps)throws IOException{getClusterStatus().getMaxMapTasks();if(srcStatus<replication){if(setReplication(srcfilelist)){(""+srcfilelist);}}}

