
path = /Users/lap13494/workspace/ppl-extra-final/java-small/test/hadoop-splitted/DistCpV1_copy_1.java
method_name = copy
method_body = public static void copy(Configuration conf, String srcPath, String destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { final Path src = new Path(srcPath); List<Path> tmp = new ArrayList<Path>(); if (srcAsList) { tmp.addAll(fetchFileList(conf, src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.IGNORE_READ_FAILURES) : EnumSet.noneOf(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, dst, logPath, flags, null, Long.MAX_VALUE, Long.MAX_VALUE, null, false)); }
predict, score, loss = copy, 0.8506497144699097, 0.5948991775512695

Trace of simplified code(s):
{"time": "2023-09-24 01:04:18.399515", "score": "0.9182", "loss": "0.7174", "code": "public static void copy(Configuration conf, String srcPath, String destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { final Path src = new Path(srcPath); List<Path> tmp = new ArrayList<Path>(); if (srcAsList) { tmp.addAll(fetchFileList(conf, src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.IGNORE_READ_FAILURES) : EnumSet.noneOf(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, dst, logPath, flags, null, Long.MAX_VALUE, Long.MAX_VALUE, null, false)); }", "n_tokens": 221, "n_pass": [1, 1, 1]}
{"time": "2023-09-24 01:04:20.511827", "score": "0.918", "loss": "0.4833", "code": "public static void copy(Configuration conf, String srcPath, String destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { final Path src = new Path(srcPath); List<Path> tmp = new ArrayList<Path>(); if (srcAsList) { tmp.addAll(fetchFileList(conf, src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.IGNORE_READ_FAILURES) : EnumSet.noneOf(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, dst, logPath, flagsMAX_VALUE, null, false)); }", "n_tokens": 207, "n_pass": [58, 2, 2]}
{"time": "2023-09-24 01:04:22.950869", "score": "0.8042", "loss": "1.1219", "code": "public static void copy(Configuration conf,String destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { final Path src = new Path(srcPath); List<Path> tmp = new ArrayList<Path>(); if (srcAsList) { tmp.addAll(fetchFileList(conf, src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.IGNORE_READ_FAILURES) : EnumSet.noneOf(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, dst, logPath, flagsMAX_VALUE, null, false)); }", "n_tokens": 201, "n_pass": [107, 3, 3]}
{"time": "2023-09-24 01:04:25.530640", "score": "0.8572", "loss": "1.0165", "code": "public static void copy(Configuration conf,String destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { final Path src = new Path(srcPath); List<Path> tmp = new ArrayList<Path>(); if (srcAsList) { tmp.addAll(fetchFileList(conf, src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.IGNORE_READ_FAILURES) : EnumSet.noneOf(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, MAX_VALUE, null, false)); }", "n_tokens": 194, "n_pass": [132, 4, 4]}
{"time": "2023-09-24 01:04:30.222484", "score": "0.6505", "loss": "1.8796", "code": "public static void copy(Configuration conf,String destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { final Path src = new Path(srcPath); List<Path> tmp = new ArrayList<Path>(); if (srcAsList) { tmp.addAll(fetchFileList(conf, src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.IGNORE_READ_FAILURES) : EnumSet.noneOf(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, nullVALUE, null, false)); }", "n_tokens": 190, "n_pass": [217, 6, 5]}
{"time": "2023-09-24 01:04:31.985036", "score": "0.6418", "loss": "1.5616", "code": "public static void copy(Configuration conf,String destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { final Path src = new Path(srcPath); List<Path> tmp = new ArrayList<Path>(); if (srcAsList) { tmp.addAll(fetchFileList(conf, src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.IGNORE_READ_FAILURES) : EnumSet.noneOf(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 186, "n_pass": [218, 7, 6]}
{"time": "2023-09-24 01:04:33.826191", "score": "0.8429", "loss": "0.668", "code": " void copy(Configuration conf,String destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { final Path src = new Path(srcPath); List<Path> tmp = new ArrayList<Path>(); if (srcAsList) { tmp.addAll(fetchFileList(conf, src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.IGNORE_READ_FAILURES) : EnumSet.noneOf(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 183, "n_pass": [221, 8, 7]}
{"time": "2023-09-24 01:04:35.936625", "score": "0.797", "loss": "1.223", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { final Path src = new Path(srcPath); List<Path> tmp = new ArrayList<Path>(); if (srcAsList) { tmp.addAll(fetchFileList(conf, src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.IGNORE_READ_FAILURES) : EnumSet.noneOf(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 180, "n_pass": [224, 9, 8]}
{"time": "2023-09-24 01:04:37.741209", "score": "0.7815", "loss": "1.2149", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { finalsrc = new Path(srcPath); List<Path> tmp = new ArrayList<Path>(); if (srcAsList) { tmp.addAll(fetchFileList(conf, src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.IGNORE_READ_FAILURES) : EnumSet.noneOf(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 177, "n_pass": [234, 10, 9]}
{"time": "2023-09-24 01:04:39.395693", "score": "0.4926", "loss": "2.2287", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { finalsrc =Path(srcPath); List<Path> tmp = new ArrayList<Path>(); if (srcAsList) { tmp.addAll(fetchFileList(conf, src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.IGNORE_READ_FAILURES) : EnumSet.noneOf(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 174, "n_pass": [236, 11, 10]}
{"time": "2023-09-24 01:04:41.527093", "score": "0.393", "loss": "2.4661", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { finalsrc =Path(srcPath); List<Path> tmp = new ArrayList(); if (srcAsList) { tmp.addAll(fetchFileList(conf, src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.IGNORE_READ_FAILURES) : EnumSet.noneOf(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 171, "n_pass": [243, 12, 11]}
{"time": "2023-09-24 01:04:43.371764", "score": "0.704", "loss": "1.6137", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { finalsrc =Path(srcPath); List<Path> tmp = new ArrayList(); if (srcAsList) { (fetchFileList(conf, src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.IGNORE_READ_FAILURES) : EnumSet.noneOf(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 168, "n_pass": [248, 13, 12]}
{"time": "2023-09-24 01:04:45.136347", "score": "0.7996", "loss": "0.9651", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { finalsrc =Path(srcPath); List<Path> tmp = new ArrayList(); if (srcAsList) { (fetchFileList(src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.IGNORE_READ_FAILURES) : EnumSet.noneOf(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 165, "n_pass": [250, 14, 13]}
{"time": "2023-09-24 01:04:47.602147", "score": "0.8495", "loss": "0.8466", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { finalsrc =Path(srcPath); List<Path> tmp = new ArrayList(); if (srcAsList) { (fetchFileList(src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.FAILURES) : EnumSet.noneOf(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 161, "n_pass": [261, 15, 14]}
{"time": "2023-09-24 01:04:49.293468", "score": "0.881", "loss": "0.7308", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { finalsrc =Path(srcPath); List<Path> tmp = new ArrayList(); if (srcAsList) { (fetchFileList(src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.FAILURES) :(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 157, "n_pass": [263, 16, 15]}
{"time": "2023-09-24 01:04:51.577120", "score": "0.9144", "loss": "0.5627", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { finalPath(srcPath); List<Path> tmp = new ArrayList(); if (srcAsList) { (fetchFileList(src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.FAILURES) :(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 154, "n_pass": [286, 17, 16]}
{"time": "2023-09-24 01:04:57.812627", "score": "0.9491", "loss": "0.8239", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = new ArrayList(); if (srcAsList) { (fetchFileList(src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.FAILURES) :(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 152, "n_pass": [424, 18, 17]}
{"time": "2023-09-24 01:05:00.236233", "score": "0.9099", "loss": "0.6727", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } else { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.FAILURES) :(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 150, "n_pass": [432, 19, 18]}
{"time": "2023-09-24 01:05:02.021291", "score": "0.8745", "loss": "0.7402", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } { tmp.add(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.FAILURES) :(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 148, "n_pass": [444, 20, 19]}
{"time": "2023-09-24 01:05:03.836372", "score": "0.9513", "loss": "0.6646", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } { tmp(src); } EnumSet<Options> flags = ignoreReadFailures ? EnumSet.of(Options.FAILURES) :(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 146, "n_pass": [447, 21, 20]}
{"time": "2023-09-24 01:05:06.271942", "score": "0.967", "loss": "0.5297", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } { tmp(src); } EnumSet<Options> flags = ignoreReadFailures ? of(Options.FAILURES) :(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 144, "n_pass": [458, 22, 21]}
{"time": "2023-09-24 01:05:08.008701", "score": "0.9612", "loss": "0.5444", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } { tmp(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options.class); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 142, "n_pass": [460, 23, 22]}
{"time": "2023-09-24 01:05:09.794372", "score": "0.9709", "loss": "0.4367", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } { tmp(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options); final Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 140, "n_pass": [464, 24, 23]}
{"time": "2023-09-24 01:05:11.524582", "score": "0.9689", "loss": "0.4456", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } { tmp(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options); Path dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 138, "n_pass": [466, 25, 24]}
{"time": "2023-09-24 01:05:13.428629", "score": "0.9451", "loss": "0.3986", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } { tmp(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options); dst = new Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 136, "n_pass": [467, 26, 25]}
{"time": "2023-09-24 01:05:15.364498", "score": "0.9583", "loss": "0.3579", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } { tmp(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options); dst = Path(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 134, "n_pass": [470, 27, 26]}
{"time": "2023-09-24 01:05:17.300345", "score": "0.9658", "loss": "0.3767", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } { tmp(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options); dst =(destPath); copy(conf, new Arguments(tmp, null, false)); }", "n_tokens": 132, "n_pass": [471, 28, 27]}
{"time": "2023-09-24 01:05:19.020616", "score": "0.9631", "loss": "0.4137", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } { tmp(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options); dst =(destPath); copy(conf, Arguments(tmp, null, false)); }", "n_tokens": 130, "n_pass": [477, 29, 28]}
{"time": "2023-09-24 01:05:20.840225", "score": "0.9595", "loss": "0.4303", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } { tmp(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options); dst =(destPath); copy(conf, Arguments( null, false)); }", "n_tokens": 128, "n_pass": [479, 30, 29]}
{"time": "2023-09-24 01:05:22.564988", "score": "0.9513", "loss": "0.4096", "code": " void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } { tmp(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options); dst =(destPath); copy(conf, Arguments( nullfalse)); }", "n_tokens": 126, "n_pass": [481, 31, 30]}
{"time": "2023-09-24 01:05:24.227555", "score": "0.9513", "loss": "0.4096", "code": "void copy(ConfigurationString destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } { tmp(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options); dst =(destPath); copy(conf, Arguments( nullfalse)); }", "n_tokens": 125, "n_pass": [485, 32, 31]}
{"time": "2023-09-24 01:05:26.735090", "score": "0.9491", "loss": "0.4414", "code": "void copy(String destPath, Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } { tmp(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options); dst =(destPath); copy(conf, Arguments( nullfalse)); }", "n_tokens": 124, "n_pass": [490, 33, 32]}
{"time": "2023-09-24 01:05:28.422445", "score": "0.9491", "loss": "0.4414", "code": "void copy(String destPath,Path logPath, boolean srcAsList, boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } { tmp(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options); dst =(destPath); copy(conf, Arguments( nullfalse)); }", "n_tokens": 123, "n_pass": [495, 34, 33]}
{"time": "2023-09-24 01:05:30.176665", "score": "0.9491", "loss": "0.4414", "code": "void copy(String destPath,Path logPath,boolean srcAsList, boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } { tmp(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options); dst =(destPath); copy(conf, Arguments( nullfalse)); }", "n_tokens": 122, "n_pass": [500, 35, 34]}
{"time": "2023-09-24 01:05:31.968687", "score": "0.9491", "loss": "0.4414", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } { tmp(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options); dst =(destPath); copy(conf, Arguments( nullfalse)); }", "n_tokens": 121, "n_pass": [505, 36, 35]}
{"time": "2023-09-24 01:05:34.440803", "score": "0.9449", "loss": "0.4799", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options); dst =(destPath); copy(conf, Arguments( nullfalse)); }", "n_tokens": 119, "n_pass": [531, 37, 36]}
{"time": "2023-09-24 01:05:37.077476", "score": "0.9465", "loss": "0.4724", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options); dst(destPath); copy(conf, Arguments( nullfalse)); }", "n_tokens": 117, "n_pass": [548, 38, 37]}
{"time": "2023-09-24 01:05:38.914965", "score": "0.8708", "loss": "0.9161", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options); dst(destPath); copy(confArguments( nullfalse)); }", "n_tokens": 115, "n_pass": [553, 39, 38]}
{"time": "2023-09-24 01:05:40.655507", "score": "0.8491", "loss": "1.124", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options); dst(destPath); copy(confArguments(false)); }", "n_tokens": 113, "n_pass": [555, 40, 39]}
{"time": "2023-09-24 01:05:44.849567", "score": "0.798", "loss": "1.3439", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath); copy(confArguments(false)); }", "n_tokens": 111, "n_pass": [615, 41, 40]}
{"time": "2023-09-24 01:05:46.599328", "score": "0.3666", "loss": "3.0282", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);(confArguments(false)); }", "n_tokens": 109, "n_pass": [618, 42, 41]}
{"time": "2023-09-24 01:06:00.373411", "score": "0.3692", "loss": "3.0278", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);(Arguments(false)); }", "n_tokens": 108, "n_pass": [774, 43, 42]}
{"time": "2023-09-24 01:06:02.075717", "score": "0.3952", "loss": "3.035", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false)); }", "n_tokens": 107, "n_pass": [775, 44, 43]}
{"time": "2023-09-24 01:06:03.876367", "score": "0.3952", "loss": "3.035", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures) throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 106, "n_pass": [781, 45, 44]}
{"time": "2023-09-24 01:06:06.520531", "score": "0.3952", "loss": "3.035", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException { (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 105, "n_pass": [803, 46, 45]}
{"time": "2023-09-24 01:06:08.349823", "score": "0.3952", "loss": "3.035", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{ (srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 104, "n_pass": [807, 47, 46]}
{"time": "2023-09-24 01:06:10.335670", "score": "0.3952", "loss": "3.035", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath); List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 103, "n_pass": [809, 48, 47]}
{"time": "2023-09-24 01:06:12.433306", "score": "0.3952", "loss": "3.035", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path> tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 102, "n_pass": [814, 49, 48]}
{"time": "2023-09-24 01:06:14.569273", "score": "0.3952", "loss": "3.035", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp = ArrayList(); if (srcAsList) { (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 101, "n_pass": [819, 50, 49]}
{"time": "2023-09-24 01:06:16.233108", "score": "0.3952", "loss": "3.035", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp= ArrayList(); if (srcAsList) { (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 100, "n_pass": [821, 51, 50]}
{"time": "2023-09-24 01:06:18.056414", "score": "0.3952", "loss": "3.035", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList(); if (srcAsList) { (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 99, "n_pass": [823, 52, 51]}
{"time": "2023-09-24 01:06:19.822469", "score": "0.3952", "loss": "3.035", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if (srcAsList) { (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 98, "n_pass": [828, 53, 52]}
{"time": "2023-09-24 01:06:21.615983", "score": "0.3952", "loss": "3.035", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if(srcAsList) { (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 97, "n_pass": [830, 54, 53]}
{"time": "2023-09-24 01:06:23.278837", "score": "0.3952", "loss": "3.035", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if(srcAsList){ (fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 96, "n_pass": [834, 55, 54]}
{"time": "2023-09-24 01:06:25.106850", "score": "0.3952", "loss": "3.035", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if(srcAsList){(fetchFileList(src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 95, "n_pass": [836, 56, 55]}
{"time": "2023-09-24 01:06:26.894754", "score": "0.4802", "loss": "2.0428", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if(srcAsList){((src)); } {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 94, "n_pass": [838, 57, 56]}
{"time": "2023-09-24 01:06:28.629908", "score": "0.4802", "loss": "2.0428", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if(srcAsList){((src));} {(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 93, "n_pass": [844, 58, 57]}
{"time": "2023-09-24 01:06:30.345465", "score": "0.4802", "loss": "2.0428", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if(srcAsList){((src));}{(src); } EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 92, "n_pass": [846, 59, 58]}
{"time": "2023-09-24 01:06:32.083939", "score": "0.4802", "loss": "2.0428", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if(srcAsList){((src));}{(src);} EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 91, "n_pass": [852, 60, 59]}
{"time": "2023-09-24 01:06:33.818640", "score": "0.4802", "loss": "2.0428", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if(srcAsList){((src));}{(src);}EnumSet<Options> flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 90, "n_pass": [854, 61, 60]}
{"time": "2023-09-24 01:06:35.961346", "score": "0.4802", "loss": "2.0428", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if(srcAsList){((src));}{(src);}EnumSet<Options>flags = ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 89, "n_pass": [859, 62, 61]}
{"time": "2023-09-24 01:06:37.677945", "score": "0.4802", "loss": "2.0428", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if(srcAsList){((src));}{(src);}EnumSet<Options>flags= ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 88, "n_pass": [861, 63, 62]}
{"time": "2023-09-24 01:06:39.421384", "score": "0.4802", "loss": "2.0428", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if(srcAsList){((src));}{(src);}EnumSet<Options>flags=ignoreReadFailures ? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 87, "n_pass": [863, 64, 63]}
{"time": "2023-09-24 01:06:41.200016", "score": "0.4802", "loss": "2.0428", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if(srcAsList){((src));}{(src);}EnumSet<Options>flags=ignoreReadFailures? of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 86, "n_pass": [865, 65, 64]}
{"time": "2023-09-24 01:06:42.873511", "score": "0.4802", "loss": "2.0428", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if(srcAsList){((src));}{(src);}EnumSet<Options>flags=ignoreReadFailures?of(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 85, "n_pass": [867, 66, 65]}
{"time": "2023-09-24 01:06:44.688925", "score": "0.6383", "loss": "1.8235", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if(srcAsList){((src));}{(src);}EnumSet<Options>flags=ignoreReadFailures?(FAILURES) :(Options);(destPath);((false));}", "n_tokens": 84, "n_pass": [868, 67, 66]}
{"time": "2023-09-24 01:06:46.475593", "score": "0.6383", "loss": "1.8235", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if(srcAsList){((src));}{(src);}EnumSet<Options>flags=ignoreReadFailures?(FAILURES):(Options);(destPath);((false));}", "n_tokens": 83, "n_pass": [872, 68, 67]}
{"time": "2023-09-24 01:06:48.577642", "score": "0.5272", "loss": "2.0475", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if(srcAsList){((src));}{(src);}EnumSet<Options>flags=ignoreReadFailures?(FAILURES):(Options)(destPath);((false));}", "n_tokens": 82, "n_pass": [877, 69, 68]}
{"time": "2023-09-24 01:06:50.298960", "score": "0.463", "loss": "2.2972", "code": "void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if(srcAsList){((src));}{(src);}EnumSet<Options>flags=ignoreReadFailures?(FAILURES):(Options)(destPath)((false));}", "n_tokens": 81, "n_pass": [881, 70, 69]}

Minimal simplified code:
void copy(String destPath,Path logPath,boolean srcAsList,boolean ignoreReadFailures)throws IOException{(srcPath);List<Path>tmp=ArrayList();if(srcAsList){((src));}{(src);}EnumSet<Options>flags=ignoreReadFailures?(FAILURES):(Options)(destPath)((false));}

