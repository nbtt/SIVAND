
path = /Users/lap13494/workspace/ppl-extra-final/java-small/test/hadoop-splitted/AsyncDataService_execute_0.java
method_name = execute
method_body = synchronized void execute(Runnable task) { if (executor == null) { throw new RuntimeException("AsyncDataService is already shutdown"); } if (LOG.isDebugEnabled()) { LOG.debug("Current active thread number: " + executor.getActiveCount() + " queue size:" + executor.getQueue().size() + " scheduled task number:" + executor.getTaskCount()); } executor.execute(task); }
predict, score, loss = execute, 0.7687679529190063, 0.5594416856765747

Trace of simplified code(s):
{"time": "2023-09-24 01:41:13.076168", "score": "0.7688", "loss": "0.5594", "code": "synchronized void execute(Runnable task) { if (executor == null) { throw new RuntimeException(\"AsyncDataService is already shutdown\"); } if (LOG.isDebugEnabled()) { LOG.debug(\"Current active thread number: \" + executor.getActiveCount() + \" queue size:\" + executor.getQueue().size() + \" scheduled task number:\" + executor.getTaskCount()); } executor.execute(task); }", "n_tokens": 137, "n_pass": [1, 1, 1]}
{"time": "2023-09-24 01:41:14.915070", "score": "0.8739", "loss": "0.3906", "code": "synchronized void execute(Runnable task) { if (executor == null) { throw new RuntimeException(\"AsyncDataService number: \" + executor.getActiveCount() + \" queue size:\" + executor.getQueue().size() + \" scheduled task number:\" + executor.getTaskCount()); } executor.execute(task); }", "n_tokens": 103, "n_pass": [9, 2, 2]}
{"time": "2023-09-24 01:41:18.554926", "score": "0.8669", "loss": "0.4041", "code": "synchronized void execute(Runnable task) { if (executor == null) { throw new RuntimeException(+ executor.getActiveCount() + \" queue size:\" + executor.getQueue().size() + \" scheduled task number:\" + executor.getTaskCount()); } executor.execute(task); }", "n_tokens": 95, "n_pass": [36, 4, 3]}
{"time": "2023-09-24 01:41:20.458857", "score": "0.8421", "loss": "0.4568", "code": "synchronized void execute(Runnable task) { if (executor == null) { throw new RuntimeException( \" queue size:\" + executor.getQueue().size() + \" scheduled task number:\" + executor.getTaskCount()); } executor.execute(task); }", "n_tokens": 86, "n_pass": [37, 5, 4]}
{"time": "2023-09-24 01:41:22.256969", "score": "0.8923", "loss": "0.346", "code": "synchronized void execute(Runnable task) { if (executor == null) { throw new RuntimeException(+ executor.getQueue().size() + \" scheduled task number:\" + executor.getTaskCount()); } executor.execute(task); }", "n_tokens": 77, "n_pass": [38, 6, 5]}
{"time": "2023-09-24 01:41:24.262435", "score": "0.8444", "loss": "0.4187", "code": "synchronized void execute(Runnable task) { if (executor == null) { throw new RuntimeException(getQueue().size() + \" scheduled task number:\" + executor.getTaskCount()); } executor.execute(task); }", "n_tokens": 73, "n_pass": [66, 7, 6]}
{"time": "2023-09-24 01:41:25.974009", "score": "0.8976", "loss": "0.3445", "code": "synchronized void execute(Runnable task) { if (executor == null) { throw new RuntimeException(size() + \" scheduled task number:\" + executor.getTaskCount()); } executor.execute(task); }", "n_tokens": 69, "n_pass": [67, 8, 7]}
{"time": "2023-09-24 01:41:27.890275", "score": "0.8871", "loss": "0.361", "code": "synchronized void execute(Runnable task) { if (executor == null) { throw new RuntimeException(+ \" scheduled task number:\" + executor.getTaskCount()); } executor.execute(task); }", "n_tokens": 65, "n_pass": [68, 9, 8]}
{"time": "2023-09-24 01:41:29.603635", "score": "0.9298", "loss": "0.3544", "code": "synchronized void execute(Runnable task) { if (executor == null) { throw new RuntimeException(+ \" number:\" + executor.getTaskCount()); } executor.execute(task); }", "n_tokens": 61, "n_pass": [70, 10, 9]}
{"time": "2023-09-24 01:41:31.711164", "score": "0.9268", "loss": "0.3518", "code": "synchronized void execute(Runnable task) { if ( null) { throw new RuntimeException(+ \" number:\" + executor.getTaskCount()); } executor.execute(task); }", "n_tokens": 57, "n_pass": [80, 11, 10]}
{"time": "2023-09-24 01:41:33.903133", "score": "0.8389", "loss": "0.6719", "code": "synchronized void execute(Runnable task) { if ( null) { new RuntimeException(+ \" number:\" + executor.getTaskCount()); } executor.execute(task); }", "n_tokens": 55, "n_pass": [123, 12, 11]}
{"time": "2023-09-24 01:41:35.595710", "score": "0.8353", "loss": "0.7777", "code": "synchronized void execute(Runnable task) { if ( null) { RuntimeException(+ \" number:\" + executor.getTaskCount()); } executor.execute(task); }", "n_tokens": 53, "n_pass": [124, 13, 12]}
{"time": "2023-09-24 01:41:37.307279", "score": "0.8007", "loss": "0.8446", "code": "synchronized void execute(Runnable task) { if ( null) { RuntimeException(\" number:\" + executor.getTaskCount()); } executor.execute(task); }", "n_tokens": 51, "n_pass": [126, 14, 13]}
{"time": "2023-09-24 01:41:38.927309", "score": "0.8801", "loss": "0.5556", "code": "synchronized void execute(Runnable task) { if ( null) { RuntimeException(\" \" + executor.getTaskCount()); } executor.execute(task); }", "n_tokens": 49, "n_pass": [128, 15, 14]}
{"time": "2023-09-24 01:41:40.681310", "score": "0.8603", "loss": "0.6527", "code": "synchronized void execute(Runnable task) { if ( null) { RuntimeException(\" \" + getTaskCount()); } executor.execute(task); }", "n_tokens": 47, "n_pass": [131, 16, 15]}
{"time": "2023-09-24 01:41:44.057798", "score": "0.8817", "loss": "0.7586", "code": "synchronized void execute(Runnable task) { if ( null) { RuntimeException(\" \" + getTaskCount()); } executor.execute; }", "n_tokens": 44, "n_pass": [136, 18, 16]}
{"time": "2023-09-24 01:41:45.673668", "score": "0.8817", "loss": "0.7586", "code": "void execute(Runnable task) { if ( null) { RuntimeException(\" \" + getTaskCount()); } executor.execute; }", "n_tokens": 42, "n_pass": [138, 19, 17]}
{"time": "2023-09-24 01:41:54.146846", "score": "0.8817", "loss": "0.7586", "code": "void execute(Runnable task){ if ( null) { RuntimeException(\" \" + getTaskCount()); } executor.execute; }", "n_tokens": 41, "n_pass": [204, 21, 18]}
{"time": "2023-09-24 01:41:55.853773", "score": "0.8817", "loss": "0.7586", "code": "void execute(Runnable task){if ( null) { RuntimeException(\" \" + getTaskCount()); } executor.execute; }", "n_tokens": 40, "n_pass": [205, 22, 19]}
{"time": "2023-09-24 01:41:57.530405", "score": "0.8817", "loss": "0.7586", "code": "void execute(Runnable task){if( null) { RuntimeException(\" \" + getTaskCount()); } executor.execute; }", "n_tokens": 39, "n_pass": [207, 23, 20]}
{"time": "2023-09-24 01:41:59.131998", "score": "0.8817", "loss": "0.7586", "code": "void execute(Runnable task){if(null) { RuntimeException(\" \" + getTaskCount()); } executor.execute; }", "n_tokens": 38, "n_pass": [209, 24, 21]}
{"time": "2023-09-24 01:42:00.743566", "score": "0.8817", "loss": "0.7586", "code": "void execute(Runnable task){if(null){ RuntimeException(\" \" + getTaskCount()); } executor.execute; }", "n_tokens": 37, "n_pass": [212, 25, 22]}
{"time": "2023-09-24 01:42:02.494018", "score": "0.8817", "loss": "0.7586", "code": "void execute(Runnable task){if(null){RuntimeException(\" \" + getTaskCount()); } executor.execute; }", "n_tokens": 36, "n_pass": [214, 26, 23]}
{"time": "2023-09-24 01:42:04.172741", "score": "0.8196", "loss": "1.0177", "code": "void execute(Runnable task){if(null){(\" \" + getTaskCount()); } executor.execute; }", "n_tokens": 35, "n_pass": [215, 27, 24]}
{"time": "2023-09-24 01:42:05.850176", "score": "0.8366", "loss": "0.9404", "code": "void execute(Runnable task){if(null){(\"\" + getTaskCount()); } executor.execute; }", "n_tokens": 34, "n_pass": [218, 28, 25]}
{"time": "2023-09-24 01:42:07.485686", "score": "0.8366", "loss": "0.9404", "code": "void execute(Runnable task){if(null){(\"\"+ getTaskCount()); } executor.execute; }", "n_tokens": 33, "n_pass": [220, 29, 26]}
{"time": "2023-09-24 01:42:09.153592", "score": "0.8366", "loss": "0.9404", "code": "void execute(Runnable task){if(null){(\"\"+getTaskCount()); } executor.execute; }", "n_tokens": 32, "n_pass": [222, 30, 27]}
{"time": "2023-09-24 01:42:10.723677", "score": "0.8366", "loss": "0.9404", "code": "void execute(Runnable task){if(null){(\"\"+getTaskCount());} executor.execute; }", "n_tokens": 31, "n_pass": [228, 31, 28]}
{"time": "2023-09-24 01:42:12.436925", "score": "0.7209", "loss": "1.4603", "code": "void execute(Runnable task){if(null){(\"\"+getTaskCount());} execute; }", "n_tokens": 29, "n_pass": [230, 32, 29]}
{"time": "2023-09-24 01:42:14.005456", "score": "0.2685", "loss": "3.1053", "code": "void execute(Runnable task){if(null){(\"\"+getTaskCount());}  }", "n_tokens": 27, "n_pass": [231, 33, 30]}
{"time": "2023-09-24 01:42:16.960331", "score": "0.2685", "loss": "3.1053", "code": "void execute(Runnable task){if(null){(\"\"+getTaskCount());} }", "n_tokens": 26, "n_pass": [261, 34, 31]}
{"time": "2023-09-24 01:42:19.550202", "score": "0.2685", "loss": "3.1053", "code": "void execute(Runnable task){if(null){(\"\"+getTaskCount());}}", "n_tokens": 25, "n_pass": [286, 35, 32]}

Minimal simplified code:
void execute(Runnable task){if(null){(""+getTaskCount());}}

