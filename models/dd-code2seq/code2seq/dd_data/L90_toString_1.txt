
path = /Users/lap13494/workspace/ppl-extra-final/java-small/test/hadoop-splitted/ProportionalCapacityPreemptionPolicy_toString_0.java
method_name = toString
method_body = public String toString() { StringBuilder sb = new StringBuilder(); sb.append(" NAME: " + queueName).append(" CUR: ").append(current).append(" PEN: ").append(pending).append(" GAR: ").append(guaranteed).append(" NORM: ").append(normalizedGuarantee).append(" IDEAL_ASSIGNED: ").append(idealAssigned).append(" IDEAL_PREEMPT: ").append(toBePreempted).append(" ACTUAL_PREEMPT: ").append(actuallyPreempted).append("\n"); return sb.toString(); }
predict, score, loss = toString, 0.984657883644104, 0.051508717238903046

Trace of simplified code(s):
{"time": "2023-09-23 23:19:15.798948", "score": "0.9861", "loss": "0.045", "code": "public String toString() { StringBuilder sb = new StringBuilder(); sb.append(\" NAME: \" + queueName).append(\" CUR: \").append(current).append(\" PEN: \").append(pending).append(\" GAR: \").append(guaranteed).append(\" NORM: \").append(normalizedGuarantee).append(\" IDEAL_ASSIGNED: \").append(idealAssigned).append(\" IDEAL_PREEMPT: \").append(toBePreempted).append(\" ACTUAL_PREEMPT: \").append(actuallyPreempted).append(\"\\n\"); return sb.toString(); }", "n_tokens": 169, "n_pass": [1, 1, 1]}
{"time": "2023-09-23 23:19:17.880931", "score": "0.9854", "loss": "0.0465", "code": "public String toString() { StringBuilder sb = new StringBuilder(); sb.append(\" NAME: \" + queueName).append(current).append(\" PEN: \").append(pending).append(\" GAR: \").append(guaranteed).append(\" NORM: \").append(normalizedGuarantee).append(\" IDEAL_ASSIGNED: \").append(idealAssigned).append(\" IDEAL_PREEMPT: \").append(toBePreempted).append(\" ACTUAL_PREEMPT: \").append(actuallyPreempted).append(\"\\n\"); return sb.toString(); }", "n_tokens": 159, "n_pass": [48, 2, 2]}
{"time": "2023-09-23 23:19:19.624212", "score": "0.9922", "loss": "0.0248", "code": "public String toString() { StringBuilder sb = new StringBuilder(); sb.append(\" NAME: \" + queueName).append(current).append(\" PEN: \").append(pending).append(\" GAR: \").append().append(normalizedGuarantee).append(\" IDEAL_ASSIGNED: \").append(idealAssigned).append(\" IDEAL_PREEMPT: \").append(toBePreempted).append(\" ACTUAL_PREEMPT: \").append(actuallyPreempted).append(\"\\n\"); return sb.toString(); }", "n_tokens": 148, "n_pass": [52, 3, 3]}
{"time": "2023-09-23 23:19:21.378411", "score": "0.9891", "loss": "0.0359", "code": "public String toString() { StringBuilder sb = new StringBuilder(); sb.append(\" NAME: \" + queueName).append(current).append(\" PEN: \").append(pending).append(\" GAR: \").append().append(normalizedGuarantee).append(\" IDEAL_ASSIGNED: \").append(idealAssigned).append(\" IDEAL_PREEMPT:  ACTUAL_PREEMPT: \").append(actuallyPreempted).append(\"\\n\"); return sb.toString(); }", "n_tokens": 137, "n_pass": [56, 4, 4]}
{"time": "2023-09-23 23:19:23.315077", "score": "0.9892", "loss": "0.0342", "code": "public String toString() { StringBuilder sb = new StringBuilder(); sb.append(\" NAME: \" + queueName).append(current).append(\" PEN: \").append(pending).append(\" GAR: \").append().append(normalizedGuarantee).append(\" IDEAL_ASSIGNED: \").append(idealAssigned).append(\" IDEAL_PREEMPT: \").append(actuallyPreempted).append(\"\\n\"); return sb.toString(); }", "n_tokens": 131, "n_pass": [96, 5, 5]}
{"time": "2023-09-23 23:19:25.049392", "score": "0.9782", "loss": "0.0661", "code": "public String toString() { StringBuilder sb = new StringBuilder(); sb.append(\" NAME: \" + queueName).append(current).append(\" PEN: \").append(pending).append(\" GAR: \").append().append(normalizedGuarantee).append(\" IDEAL_ASSIGNED: \").append(idealAssigned).append(\" IDEAL_PREEMPT: \").append(actuallyPreempted).append; return sb.toString(); }", "n_tokens": 125, "n_pass": [99, 6, 6]}
{"time": "2023-09-23 23:19:26.815442", "score": "0.8511", "loss": "0.5687", "code": "public String toString() { StringBuilder sb = new StringBuilder(); sb.append(\" NAME: \" + queueName).append(current).append(\" PEN: \").append(pending).append(\" GAR: \").append().append(normalizedGuarantee).append(\" IDEAL_ASSIGNED: \").append(idealAssigned).append(\" IDEAL_PREEMPT: \").append(actuallyPreempted).appendtoString(); }", "n_tokens": 119, "n_pass": [100, 7, 7]}
{"time": "2023-09-23 23:19:28.571931", "score": "0.8657", "loss": "0.5068", "code": "public String toString() {  new StringBuilder(); sb.append(\" NAME: \" + queueName).append(current).append(\" PEN: \").append(pending).append(\" GAR: \").append().append(normalizedGuarantee).append(\" IDEAL_ASSIGNED: \").append(idealAssigned).append(\" IDEAL_PREEMPT: \").append(actuallyPreempted).appendtoString(); }", "n_tokens": 114, "n_pass": [104, 8, 8]}
{"time": "2023-09-23 23:19:30.361699", "score": "0.8609", "loss": "0.5439", "code": "public String toString() {  new StringBuilder(); sb.append(\" NAME: \" + queueName).append(\" PEN: \").append(pending).append(\" GAR: \").append().append(normalizedGuarantee).append(\" IDEAL_ASSIGNED: \").append(idealAssigned).append(\" IDEAL_PREEMPT: \").append(actuallyPreempted).appendtoString(); }", "n_tokens": 109, "n_pass": [110, 9, 9]}
{"time": "2023-09-23 23:19:32.074713", "score": "0.8614", "loss": "0.5435", "code": "public String toString() {  new StringBuilder(); sb.append(\" NAME: \" + queueName).append(\" PEN: \").append(\" GAR: \").append().append(normalizedGuarantee).append(\" IDEAL_ASSIGNED: \").append(idealAssigned).append(\" IDEAL_PREEMPT: \").append(actuallyPreempted).appendtoString(); }", "n_tokens": 104, "n_pass": [113, 10, 10]}
{"time": "2023-09-23 23:19:33.719501", "score": "0.8683", "loss": "0.5372", "code": "public String toString() {  new StringBuilder(); sb.append(\" NAME: \" + queueName).append(\" PEN: \").append(\" GAR: \").append().append(\" IDEAL_ASSIGNED: \").append(idealAssigned).append(\" IDEAL_PREEMPT: \").append(actuallyPreempted).appendtoString(); }", "n_tokens": 99, "n_pass": [117, 11, 11]}
{"time": "2023-09-23 23:19:35.548349", "score": "0.8789", "loss": "0.5051", "code": "public String toString() {  new StringBuilder(); sb.append(\" NAME: \" + queueName).append(\" PEN: \").append(\" GAR: \").append().append(\" IDEAL_ASSIGNED: \").append(\" IDEAL_PREEMPT: \").append(actuallyPreempted).appendtoString(); }", "n_tokens": 94, "n_pass": [120, 12, 12]}
{"time": "2023-09-23 23:19:37.257926", "score": "0.984", "loss": "0.0523", "code": "public String toString() {  new StringBuilder(); sb.append(\" NAME: \" + queueName).append(\" PEN: \").append(\" GAR: \").append().append(\" IDEAL_ASSIGNED: \").append(\" IDEAL_PREEMPT: \").toString(); }", "n_tokens": 88, "n_pass": [123, 13, 13]}
{"time": "2023-09-23 23:19:39.533436", "score": "0.984", "loss": "0.0523", "code": "String toString() {  new StringBuilder(); sb.append(\" NAME: \" + queueName).append(\" PEN: \").append(\" GAR: \").append().append(\" IDEAL_ASSIGNED: \").append(\" IDEAL_PREEMPT: \").toString(); }", "n_tokens": 86, "n_pass": [177, 14, 14]}
{"time": "2023-09-23 23:19:41.530483", "score": "0.9896", "loss": "0.0368", "code": "String toString() {  StringBuilder(); sb.append(\" NAME: \" + queueName).append(\" PEN: \").append(\" GAR: \").append().append(\" IDEAL_ASSIGNED: \").append(\" IDEAL_PREEMPT: \").toString(); }", "n_tokens": 84, "n_pass": [182, 15, 15]}
{"time": "2023-09-23 23:19:43.163063", "score": "0.9874", "loss": "0.0404", "code": "String toString() {  StringBuilder; sb.append(\" NAME: \" + queueName).append(\" PEN: \").append(\" GAR: \").append().append(\" IDEAL_ASSIGNED: \").append(\" IDEAL_PREEMPT: \").toString(); }", "n_tokens": 82, "n_pass": [184, 16, 16]}
{"time": "2023-09-23 23:19:44.828809", "score": "0.987", "loss": "0.0455", "code": "String toString() {  StringBuildersb.append(\" NAME: \" + queueName).append(\" PEN: \").append(\" GAR: \").append().append(\" IDEAL_ASSIGNED: \").append(\" IDEAL_PREEMPT: \").toString(); }", "n_tokens": 80, "n_pass": [185, 17, 17]}
{"time": "2023-09-23 23:19:46.544460", "score": "0.9623", "loss": "0.1403", "code": "String toString() {  StringBuilderappend(\" NAME: \" + queueName).append(\" PEN: \").append(\" GAR: \").append().append(\" IDEAL_ASSIGNED: \").append(\" IDEAL_PREEMPT: \").toString(); }", "n_tokens": 78, "n_pass": [186, 18, 18]}
{"time": "2023-09-23 23:19:48.397094", "score": "0.963", "loss": "0.1294", "code": "String toString() {  StringBuilderappend(\"  \" + queueName).append(\" PEN: \").append(\" GAR: \").append().append(\" IDEAL_ASSIGNED: \").append(\" IDEAL_PREEMPT: \").toString(); }", "n_tokens": 76, "n_pass": [189, 19, 19]}
{"time": "2023-09-23 23:19:50.536496", "score": "0.9685", "loss": "0.1166", "code": "String toString() {  StringBuilderappend(\"  \" + queueName).append(\" \").append(\" GAR: \").append().append(\" IDEAL_ASSIGNED: \").append(\" IDEAL_PREEMPT: \").toString(); }", "n_tokens": 73, "n_pass": [194, 20, 20]}
{"time": "2023-09-23 23:19:52.672579", "score": "0.9284", "loss": "0.3099", "code": "String toString() {  StringBuilderappend(\"  \" + queueName).append(\" \").append(\" GAR: \").appendappend(\" IDEAL_ASSIGNED: \").append(\" IDEAL_PREEMPT: \").toString(); }", "n_tokens": 70, "n_pass": [200, 21, 21]}
{"time": "2023-09-23 23:19:54.445488", "score": "0.9148", "loss": "0.3855", "code": "String toString() {  StringBuilderappend(\"  \" + queueName).append(\" \").append(\" GAR: \").appendappend(\"ASSIGNED: \").append(\" IDEAL_PREEMPT: \").toString(); }", "n_tokens": 67, "n_pass": [202, 22, 22]}
{"time": "2023-09-23 23:19:57.832259", "score": "0.9166", "loss": "0.4456", "code": "String toString() {  StringBuilderappend(\"  \" + queueName).append(\" \").append(\" GAR: \").appendappend(\"ASSIGNED: \").append(\"PREEMPT: \").toString(); }", "n_tokens": 64, "n_pass": [206, 24, 23]}
{"time": "2023-09-23 23:19:59.508657", "score": "0.8104", "loss": "0.9399", "code": "String toString() {  StringBuilderappend(\"  \" + queueName).append(\" \").append(\" GAR: \").appendappend(\"ASSIGNED: \").append(\"\").toString(); }", "n_tokens": 61, "n_pass": [207, 25, 24]}
{"time": "2023-09-23 23:20:01.586161", "score": "0.9102", "loss": "0.3612", "code": "String toString() { append(\"  \" + queueName).append(\" \").append(\" GAR: \").appendappend(\"ASSIGNED: \").append(\"\").toString(); }", "n_tokens": 59, "n_pass": [215, 26, 25]}
{"time": "2023-09-23 23:20:03.364254", "score": "0.7527", "loss": "1.1138", "code": "String toString() { append(\"  \" + queueName).append(\" \").append(\" GAR: \").appendappend(\"\").append(\"\").toString(); }", "n_tokens": 56, "n_pass": [228, 27, 26]}
{"time": "2023-09-23 23:20:08.049425", "score": "0.5712", "loss": "2.3983", "code": "String toString() { append(\"  \" + queueName).append(\" \").append(\" GAR: \").appendappend().append(\"\").toString(); }", "n_tokens": 54, "n_pass": [294, 28, 27]}
{"time": "2023-09-23 23:20:12.489965", "score": "0.5712", "loss": "2.3983", "code": "String toString(){ append(\"  \" + queueName).append(\" \").append(\" GAR: \").appendappend().append(\"\").toString(); }", "n_tokens": 53, "n_pass": [307, 30, 28]}
{"time": "2023-09-23 23:20:14.128711", "score": "0.5712", "loss": "2.3983", "code": "String toString(){append(\"  \" + queueName).append(\" \").append(\" GAR: \").appendappend().append(\"\").toString(); }", "n_tokens": 52, "n_pass": [309, 31, 29]}
{"time": "2023-09-23 23:20:16.018035", "score": "0.7739", "loss": "0.8761", "code": "String toString(){(\"  \" + queueName).append(\" \").append(\" GAR: \").appendappend().append(\"\").toString(); }", "n_tokens": 51, "n_pass": [310, 32, 30]}
{"time": "2023-09-23 23:20:17.720191", "score": "0.8017", "loss": "0.7203", "code": "String toString(){(\" \" + queueName).append(\" \").append(\" GAR: \").appendappend().append(\"\").toString(); }", "n_tokens": 50, "n_pass": [313, 33, 31]}
{"time": "2023-09-23 23:20:19.413170", "score": "0.7876", "loss": "0.8135", "code": "String toString(){(\"\" + queueName).append(\" \").append(\" GAR: \").appendappend().append(\"\").toString(); }", "n_tokens": 49, "n_pass": [314, 34, 32]}
{"time": "2023-09-23 23:20:20.973313", "score": "0.7876", "loss": "0.8135", "code": "String toString(){(\"\"+ queueName).append(\" \").append(\" GAR: \").appendappend().append(\"\").toString(); }", "n_tokens": 48, "n_pass": [316, 35, 33]}
{"time": "2023-09-23 23:20:22.695241", "score": "0.7876", "loss": "0.8135", "code": "String toString(){(\"\"+queueName).append(\" \").append(\" GAR: \").appendappend().append(\"\").toString(); }", "n_tokens": 47, "n_pass": [318, 36, 34]}
{"time": "2023-09-23 23:20:24.385321", "score": "0.7777", "loss": "0.8917", "code": "String toString(){(\"\"+queueName).append(\"\").append(\" GAR: \").appendappend().append(\"\").toString(); }", "n_tokens": 46, "n_pass": [325, 37, 35]}
{"time": "2023-09-23 23:20:26.112109", "score": "0.8009", "loss": "0.7869", "code": "String toString(){(\"\"+queueName).append(\"\").append(\": \").appendappend().append(\"\").toString(); }", "n_tokens": 44, "n_pass": [331, 38, 36]}
{"time": "2023-09-23 23:20:27.824179", "score": "0.8578", "loss": "0.5711", "code": "String toString(){(\"\"+queueName).append(\"\").append(\"\").appendappend().append(\"\").toString(); }", "n_tokens": 42, "n_pass": [332, 39, 37]}
{"time": "2023-09-23 23:20:29.477227", "score": "0.8853", "loss": "0.3895", "code": "String toString(){(\"\"+queueName).append(\"\").append(\"\").appendappend().append().toString(); }", "n_tokens": 40, "n_pass": [338, 40, 38]}
{"time": "2023-09-23 23:20:32.965886", "score": "0.8853", "loss": "0.3895", "code": "String toString(){(\"\"+queueName).append(\"\").append(\"\").appendappend().append().toString();}", "n_tokens": 39, "n_pass": [393, 41, 39]}
{"time": "2023-09-23 23:20:35.705924", "score": "0.9975", "loss": "0.0106", "code": "String toString(){(\"\"+queueName).append(\"\").append(\"\").append().append().toString();}", "n_tokens": 38, "n_pass": [419, 42, 40]}

Minimal simplified code:
String toString(){(""+queueName).append("").append("").append().append().toString();}

