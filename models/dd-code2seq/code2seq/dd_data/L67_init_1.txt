
path = /Users/lap13494/workspace/ppl-extra-final/java-small/test/hadoop-splitted/ProportionalCapacityPreemptionPolicy_init_0.java
method_name = init
method_body = public void init(Configuration config, EventHandler<ContainerPreemptEvent> disp, PreemptableResourceScheduler sched) { LOG.info("Preemption monitor:" + this.getClass().getCanonicalName()); assert null == scheduler : "Unexpected duplicate call to init"; if (!(sched instanceof CapacityScheduler)) { throw new YarnRuntimeException("Class " + sched.getClass().getCanonicalName() + " not instance of " + CapacityScheduler.class.getCanonicalName()); } dispatcher = disp; scheduler = (CapacityScheduler) sched; maxIgnoredOverCapacity = config.getDouble(MAX_IGNORED_OVER_CAPACITY, 0.1); naturalTerminationFactor = config.getDouble(NATURAL_TERMINATION_FACTOR, 0.2); maxWaitTime = config.getLong(WAIT_TIME_BEFORE_KILL, 15000); monitoringInterval = config.getLong(MONITORING_INTERVAL, 3000); percentageClusterPreemptionAllowed = config.getFloat(TOTAL_PREEMPTION_PER_ROUND, (float) 0.1); observeOnly = config.getBoolean(OBSERVE_ONLY, false); rc = scheduler.getResourceCalculator(); }
predict, score, loss = init, 0.4298335015773773, 1.4638046026229858

Trace of simplified code(s):
{"time": "2023-09-23 23:13:43.138150", "score": "0.5444", "loss": "1.0908", "code": "public void init(Configuration config, EventHandler<ContainerPreemptEvent> disp, PreemptableResourceScheduler sched) { LOG.info(\"Preemption monitor:\" + this.getClass().getCanonicalName()); assert null == scheduler : \"Unexpected duplicate call to init\"; if (!(sched instanceof CapacityScheduler)) { throw new YarnRuntimeException(\"Class \" + sched.getClass().getCanonicalName() + \" not instance of \" + CapacityScheduler.class.getCanonicalName()); } dispatcher = disp; scheduler = (CapacityScheduler) sched; maxIgnoredOverCapacity = config.getDouble(MAX_IGNORED_OVER_CAPACITY, 0.1); naturalTerminationFactor = config.getDouble(NATURAL_TERMINATION_FACTOR, 0.2); maxWaitTime = config.getLong(WAIT_TIME_BEFORE_KILL, 15000); monitoringInterval = config.getLong(MONITORING_INTERVAL, 3000); percentageClusterPreemptionAllowed = config.getFloat(TOTAL_PREEMPTION_PER_ROUND, (float) 0.1); observeOnly = config.getBoolean(OBSERVE_ONLY, false); rc = scheduler.getResourceCalculator(); }", "n_tokens": 302, "n_pass": [1, 1, 1]}
{"time": "2023-09-23 23:13:45.325219", "score": "0.4239", "loss": "1.2999", "code": "public void init(Configuration config, EventHandler<ContainerPreemptEvent> disp, PreemptableResourceScheduler sched) { LOG.info(\"Preemption monitor:\" + this.getClass().getCanonicalName()); assert null == scheduler : \"Unexpected duplicate call to init\"; if (!(sched instanceof CapacityScheduler)) { throw new YarnRuntimeException(\"Class \" + sched.getClass().getCanonicalName() + \" not instance of \" + CapacityScheduler.class.getCanonicalName()); } dispatcher = disp; scheduler = monitoringInterval = config.getLong(MONITORING_INTERVAL, 3000); percentageClusterPreemptionAllowed = config.getFloat(TOTAL_PREEMPTION_PER_ROUND, (float) 0.1); observeOnly = config.getBoolean(OBSERVE_ONLY, false); rc = scheduler.getResourceCalculator(); }", "n_tokens": 226, "n_pass": [10, 2, 2]}
{"time": "2023-09-23 23:13:46.973601", "score": "0.4831", "loss": "1.9282", "code": "public void init(Configuration config, EventHandler<ContainerPreemptEvent> disp, PreemptableResourceScheduler sched) { LOG.info(\"Preemption monitor:\" + this.getClass().getCanonicalName()); assert null == scheduler : \"Unexpected duplicate call to init\"; monitoringInterval = config.getLong(MONITORING_INTERVAL, 3000); percentageClusterPreemptionAllowed = config.getFloat(TOTAL_PREEMPTION_PER_ROUND, (float) 0.1); observeOnly = config.getBoolean(OBSERVE_ONLY, false); rc = scheduler.getResourceCalculator(); }", "n_tokens": 151, "n_pass": [13, 3, 3]}
{"time": "2023-09-23 23:13:48.837818", "score": "0.5368", "loss": "1.653", "code": "public void init(Configuration config, EventHandler<ContainerPreemptEvent> disp, PreemptableResourceScheduler sched) { LOG.info(\"Preemption monitor:\" + this.getClass().getCanonicalName()); assert null == scheduler : \"Unexpected duplicate call to init\";  percentageClusterPreemptionAllowed = config.getFloat(TOTAL_PREEMPTION_PER_ROUND, (float) 0.1); observeOnly = config.getBoolean(OBSERVE_ONLY, false); rc = scheduler.getResourceCalculator(); }", "n_tokens": 132, "n_pass": [30, 4, 4]}
{"time": "2023-09-23 23:13:51.173442", "score": "0.3325", "loss": "2.3593", "code": "public void init(Configuration config, EventHandler<ContainerPreemptEvent> disp, PreemptableResourceScheduler sched) { LOG.info(\"Preemption monitor:\" + this.getClass().getCanonicalName()); assert null == scheduler : \"\";  percentageClusterPreemptionAllowed = config.getFloat(TOTAL_PREEMPTION_PER_ROUND, (float) 0.1); observeOnly = config.getBoolean(OBSERVE_ONLY, false); rc = scheduler.getResourceCalculator(); }", "n_tokens": 123, "n_pass": [64, 5, 5]}
{"time": "2023-09-23 23:13:52.981286", "score": "0.2562", "loss": "3.185", "code": "public void init(Configuration config, EventHandler<ContainerPreemptEvent> disp, PreemptableResourceScheduler sched) { LOG.info(\"Preemption monitor:\" + this.getClass().getCanonicalName()); assert null == scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_PREEMPTION_PER_ROUND, (float) 0.1); observeOnly = config.getBoolean(OBSERVE_ONLY, false); rc = scheduler.getResourceCalculator(); }", "n_tokens": 118, "n_pass": [105, 6, 6]}
{"time": "2023-09-23 23:13:58.535444", "score": "0.2546", "loss": "2.9919", "code": "public void init(Configuration config, EventHandler<ContainerPreemptEvent> disp, PreemptableResourceScheduler sched) { LOG.info(\"Preemption monitor:\" + this.getClass().getCanonicalName()); assert null == scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_PREEMPTION_PER_ROUND, (float) 0.1); observeOnly = config.getBoolean(OBSERVE); rc = scheduler.getResourceCalculator(); }", "n_tokens": 113, "n_pass": [112, 9, 7]}
{"time": "2023-09-23 23:14:02.404077", "score": "0.2607", "loss": "3.1967", "code": "public void init(Configuration <ContainerPreemptEvent> disp, PreemptableResourceScheduler sched) { LOG.info(\"Preemption monitor:\" + this.getClass().getCanonicalName()); assert null == scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_PREEMPTION_PER_ROUND, (float) 0.1); observeOnly = config.getBoolean(OBSERVE); rc = scheduler.getResourceCalculator(); }", "n_tokens": 109, "n_pass": [118, 11, 8]}
{"time": "2023-09-23 23:14:04.089425", "score": "0.3052", "loss": "1.9698", "code": "public void init(Configuration disp, PreemptableResourceScheduler sched) { LOG.info(\"Preemption monitor:\" + this.getClass().getCanonicalName()); assert null == scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_PREEMPTION_PER_ROUND, (float) 0.1); observeOnly = config.getBoolean(OBSERVE); rc = scheduler.getResourceCalculator(); }", "n_tokens": 105, "n_pass": [119, 12, 9]}
{"time": "2023-09-23 23:14:05.892279", "score": "0.2707", "loss": "1.849", "code": "public void init(Configuration  sched) { LOG.info(\"Preemption monitor:\" + this.getClass().getCanonicalName()); assert null == scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_PREEMPTION_PER_ROUND, (float) 0.1); observeOnly = config.getBoolean(OBSERVE); rc = scheduler.getResourceCalculator(); }", "n_tokens": 101, "n_pass": [120, 13, 10]}
{"time": "2023-09-23 23:14:07.730630", "score": "0.2836", "loss": "1.74", "code": "public void init(Configuration  sched) { LOG.info(\"Preemption monitor:\" + this.getClass().getCanonicalName()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_PREEMPTION_PER_ROUND, (float) 0.1); observeOnly = config.getBoolean(OBSERVE); rc = scheduler.getResourceCalculator(); }", "n_tokens": 96, "n_pass": [128, 14, 11]}
{"time": "2023-09-23 23:14:09.463593", "score": "0.2738", "loss": "1.7903", "code": "public void init(Configuration  sched) { LOG.info(\"Preemption monitor:\" + this.getClass().getCanonicalName()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_PREEMPTION_PER_ROUND,0.1); observeOnly = config.getBoolean(OBSERVE); rc = scheduler.getResourceCalculator(); }", "n_tokens": 91, "n_pass": [133, 15, 12]}
{"time": "2023-09-23 23:14:11.564856", "score": "0.2172", "loss": "2.2607", "code": "public void init(Configuration  sched) { LOG.info(\"Preemption monitor:\" + this.getClass().getCanonicalName()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_PREEMPTION_PER_ROUND,0.1);config.getBoolean(OBSERVE); rc = scheduler.getResourceCalculator(); }", "n_tokens": 86, "n_pass": [135, 16, 13]}
{"time": "2023-09-23 23:14:18.570761", "score": "0.1922", "loss": "2.5007", "code": "public void init(Configuration  sched) { LOG.info(\"Preemption monitor:\" + this.getClass().getCanonicalName()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_PREEMPTION_PER_ROUND,0.1);config.getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 83, "n_pass": [195, 19, 14]}
{"time": "2023-09-23 23:14:20.266524", "score": "0.1922", "loss": "2.5007", "code": "void init(Configuration  sched) { LOG.info(\"Preemption monitor:\" + this.getClass().getCanonicalName()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_PREEMPTION_PER_ROUND,0.1);config.getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 81, "n_pass": [198, 20, 15]}
{"time": "2023-09-23 23:14:22.410252", "score": "0.1662", "loss": "2.6041", "code": "void init(Configuration  sched) { info(\"Preemption monitor:\" + this.getClass().getCanonicalName()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_PREEMPTION_PER_ROUND,0.1);config.getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 79, "n_pass": [205, 21, 16]}
{"time": "2023-09-23 23:14:27.931003", "score": "0.1625", "loss": "2.5689", "code": "void init(Configuration  sched) { info(\"Preemption monitor:\" + this.getClass().getCanonicalName); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_PREEMPTION_PER_ROUND,0.1);config.getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 77, "n_pass": [215, 24, 17]}
{"time": "2023-09-23 23:14:41.064947", "score": "0.1803", "loss": "2.4947", "code": "void init(Configuration  sched) { info(\"Preemption monitor:\" + this.getClass()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_PREEMPTION_PER_ROUND,0.1);config.getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 75, "n_pass": [247, 31, 18]}
{"time": "2023-09-23 23:14:46.386154", "score": "0.1745", "loss": "2.6723", "code": "void init(Configuration  sched) { info(\"Preemption monitor:\" + this.getClass()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_PREEMPTIONROUND,0.1);config.getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 72, "n_pass": [256, 34, 19]}
{"time": "2023-09-23 23:15:06.212846", "score": "0.1766", "loss": "2.5805", "code": "void init(Configuration  sched) { info(\"Preemption monitor:\" + this.getClass()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_ROUND,0.1);config.getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 71, "n_pass": [350, 42, 20]}
{"time": "2023-09-23 23:15:10.228023", "score": "0.1936", "loss": "2.4161", "code": "void init(Configuration  sched) { info(\"Preemption monitor:\" + this.getClass()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_ROUND,0.1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 69, "n_pass": [354, 44, 21]}
{"time": "2023-09-23 23:15:15.362297", "score": "0.1936", "loss": "2.4161", "code": "void init(Configuration sched) { info(\"Preemption monitor:\" + this.getClass()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_ROUND,0.1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 68, "n_pass": [368, 46, 22]}
{"time": "2023-09-23 23:15:17.051485", "score": "0.1936", "loss": "2.4161", "code": "void init(Configuration sched){ info(\"Preemption monitor:\" + this.getClass()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_ROUND,0.1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 67, "n_pass": [372, 47, 23]}
{"time": "2023-09-23 23:15:18.934916", "score": "0.1936", "loss": "2.4161", "code": "void init(Configuration sched){info(\"Preemption monitor:\" + this.getClass()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_ROUND,0.1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 66, "n_pass": [374, 48, 24]}
{"time": "2023-09-23 23:15:22.412668", "score": "0.1747", "loss": "2.5004", "code": "void init(Configuration sched){info(\" monitor:\" + this.getClass()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_ROUND,0.1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 65, "n_pass": [378, 50, 25]}
{"time": "2023-09-23 23:15:24.173150", "score": "0.1747", "loss": "2.5004", "code": "void init(Configuration sched){info(\"monitor:\" + this.getClass()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_ROUND,0.1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 64, "n_pass": [379, 51, 26]}
{"time": "2023-09-23 23:15:27.636889", "score": "0.1747", "loss": "2.5004", "code": "void init(Configuration sched){info(\"monitor\" + this.getClass()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_ROUND,0.1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 63, "n_pass": [381, 53, 27]}
{"time": "2023-09-23 23:15:29.338701", "score": "0.1747", "loss": "2.5004", "code": "void init(Configuration sched){info(\"monitor\"+ this.getClass()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_ROUND,0.1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 62, "n_pass": [383, 54, 28]}
{"time": "2023-09-23 23:15:31.100282", "score": "0.1747", "loss": "2.5004", "code": "void init(Configuration sched){info(\"monitor\"+this.getClass()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_ROUND,0.1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 61, "n_pass": [385, 55, 29]}
{"time": "2023-09-23 23:15:32.853251", "score": "0.1866", "loss": "2.3611", "code": "void init(Configuration sched){info(\"monitor\"+thisgetClass()); assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_ROUND,0.1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 60, "n_pass": [387, 56, 30]}
{"time": "2023-09-23 23:15:34.946138", "score": "0.1866", "loss": "2.3611", "code": "void init(Configuration sched){info(\"monitor\"+thisgetClass());assert scheduler : \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_ROUND,0.1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 59, "n_pass": [393, 57, 31]}
{"time": "2023-09-23 23:15:40.333549", "score": "0.1866", "loss": "2.3611", "code": "void init(Configuration sched){info(\"monitor\"+thisgetClass());assert scheduler: \"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_ROUND,0.1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 58, "n_pass": [397, 60, 32]}
{"time": "2023-09-23 23:15:42.025061", "score": "0.1866", "loss": "2.3611", "code": "void init(Configuration sched){info(\"monitor\"+thisgetClass());assert scheduler:\"\";  percentageClusterPreemptionAllowedgetFloat(TOTAL_ROUND,0.1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 57, "n_pass": [399, 61, 33]}
{"time": "2023-09-23 23:15:43.696059", "score": "0.1866", "loss": "2.3611", "code": "void init(Configuration sched){info(\"monitor\"+thisgetClass());assert scheduler:\"\"; percentageClusterPreemptionAllowedgetFloat(TOTAL_ROUND,0.1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 56, "n_pass": [403, 62, 34]}
{"time": "2023-09-23 23:15:45.476012", "score": "0.1866", "loss": "2.3611", "code": "void init(Configuration sched){info(\"monitor\"+thisgetClass());assert scheduler:\"\";percentageClusterPreemptionAllowedgetFloat(TOTAL_ROUND,0.1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 55, "n_pass": [404, 63, 35]}
{"time": "2023-09-23 23:15:52.430593", "score": "0.1985", "loss": "2.2715", "code": "void init(Configuration sched){info(\"monitor\"+thisgetClass());assert scheduler:\"\";percentageClusterPreemptionAllowedgetFloat(TOTALROUND,0.1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 54, "n_pass": [409, 67, 36]}
{"time": "2023-09-23 23:15:54.128903", "score": "0.2056", "loss": "2.2171", "code": "void init(Configuration sched){info(\"monitor\"+thisgetClass());assert scheduler:\"\";percentageClusterPreemptionAllowedgetFloat(TOTALROUND,1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 52, "n_pass": [411, 68, 37]}
{"time": "2023-09-23 23:16:01.773225", "score": "0.1987", "loss": "2.2596", "code": "void init(Configuration sched){info(\"monitor\"+getClass());assert scheduler:\"\";percentageClusterPreemptionAllowedgetFloat(TOTALROUND,1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 51, "n_pass": [436, 72, 38]}
{"time": "2023-09-23 23:16:11.582663", "score": "0.1879", "loss": "2.2599", "code": "void init(Configuration sched){info(\"monitor\"+getClass());assert scheduler:\"\";percentageClusterPreemptionAllowedgetFloat(ROUND,1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 50, "n_pass": [452, 77, 39]}
{"time": "2023-09-23 23:16:13.283548", "score": "0.213", "loss": "2.1578", "code": "void init(Configuration sched){info(\"monitor\"+getClass());assert scheduler:\"\";percentageClusterPreemptionAllowedgetFloat(1).getBoolean(OBSERVE); rc =getResourceCalculator(); }", "n_tokens": 48, "n_pass": [453, 78, 40]}
{"time": "2023-09-23 23:16:29.423862", "score": "0.213", "loss": "2.1578", "code": "void init(Configuration sched){info(\"monitor\"+getClass());assert scheduler:\"\";percentageClusterPreemptionAllowedgetFloat(1).getBoolean(OBSERVE);rc =getResourceCalculator(); }", "n_tokens": 47, "n_pass": [513, 86, 41]}
{"time": "2023-09-23 23:16:31.117453", "score": "0.213", "loss": "2.1578", "code": "void init(Configuration sched){info(\"monitor\"+getClass());assert scheduler:\"\";percentageClusterPreemptionAllowedgetFloat(1).getBoolean(OBSERVE);rc=getResourceCalculator(); }", "n_tokens": 46, "n_pass": [514, 87, 42]}
{"time": "2023-09-23 23:16:34.938123", "score": "0.213", "loss": "2.1578", "code": "void init(Configuration sched){info(\"monitor\"+getClass());assert scheduler:\"\";percentageClusterPreemptionAllowedgetFloat(1).getBoolean(OBSERVE);rc=getResourceCalculator();}", "n_tokens": 45, "n_pass": [520, 89, 43]}
{"time": "2023-09-23 23:16:49.580450", "score": "0.2755", "loss": "1.8307", "code": "void init(Configuration sched){info(\"monitor\"+getClass());assert scheduler:\"\";percentageClusterPreemptionAllowedgetFloat(1).getBoolean();rc=getResourceCalculator();}", "n_tokens": 44, "n_pass": [557, 97, 44]}
{"time": "2023-09-23 23:16:55.517057", "score": "0.2834", "loss": "1.7574", "code": "void init(Configuration sched){info(\"\"+getClass());assert scheduler:\"\";percentageClusterPreemptionAllowedgetFloat(1).getBoolean();rc=getResourceCalculator();}", "n_tokens": 43, "n_pass": [579, 100, 45]}
{"time": "2023-09-23 23:16:57.193083", "score": "0.2603", "loss": "1.9949", "code": "void init(Configuration sched){info(\"\"+getClass()); scheduler:\"\";percentageClusterPreemptionAllowedgetFloat(1).getBoolean();rc=getResourceCalculator();}", "n_tokens": 42, "n_pass": [587, 101, 46]}
{"time": "2023-09-23 23:16:58.894311", "score": "0.2603", "loss": "1.9949", "code": "void init(Configuration sched){info(\"\"+getClass());scheduler:\"\";percentageClusterPreemptionAllowedgetFloat(1).getBoolean();rc=getResourceCalculator();}", "n_tokens": 41, "n_pass": [588, 102, 47]}
{"time": "2023-09-23 23:17:00.751357", "score": "0.2437", "loss": "1.9807", "code": "void init(Configuration sched){info(\"\"+getClass());scheduler:\"\";getFloat(1).getBoolean();rc=getResourceCalculator();}", "n_tokens": 40, "n_pass": [594, 103, 48]}

Minimal simplified code:
void init(Configuration sched){info(""+getClass());scheduler:"";getFloat(1).getBoolean();rc=getResourceCalculator();}

