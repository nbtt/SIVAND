
path = /Users/lap13494/workspace/ppl-extra-final/java-small/test/hadoop-splitted/AccessControlList_addGroup_0.java
method_name = addGroup
method_body = public void addGroup(String group) { if (isWildCardACLValue(group)) { throw new IllegalArgumentException("Group " + group + " can not be added"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); groupsList.add(group); groupsMapping.cacheGroupsAdd(groupsList); groups.add(group); } }
predict, score, loss = addGroup, 0.9259271621704102, 0.45498746633529663

Trace of simplified code(s):
{"time": "2023-09-24 01:46:54.064472", "score": "0.9259", "loss": "0.455", "code": "public void addGroup(String group) { if (isWildCardACLValue(group)) { throw new IllegalArgumentException(\"Group \" + group + \" can not be added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); groupsList.add(group); groupsMapping.cacheGroupsAdd(groupsList); groups.add(group); } }", "n_tokens": 113, "n_pass": [1, 1, 1]}
{"time": "2023-09-24 01:46:56.431539", "score": "0.9152", "loss": "0.4706", "code": "public void addGroup(String group) { if (isWildCardACLValue(group)) { throw new IllegalArgumentException(\"Group \" + group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); groupsList.add(group); groupsMapping.cacheGroupsAdd(groupsList); groups.add(group); } }", "n_tokens": 106, "n_pass": [50, 2, 2]}
{"time": "2023-09-24 01:46:58.183872", "score": "0.8397", "loss": "0.7372", "code": "public void addGroup(String group) { if (isWildCardACLValue(group)) { throw new IllegalArgumentException(\"Group \" + group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); groupsList.add(groupgroupsList); groups.add(group); } }", "n_tokens": 99, "n_pass": [56, 3, 3]}
{"time": "2023-09-24 01:47:00.046355", "score": "0.8369", "loss": "0.7016", "code": "public void addGroup(String group) { if (isWildCardACLValue(group)) { throw new IllegalArgumentException(\"Group \" + group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); groupsList.add(groupgroupsList);(group); } }", "n_tokens": 95, "n_pass": [100, 4, 4]}
{"time": "2023-09-24 01:47:01.797135", "score": "0.8301", "loss": "0.7496", "code": "public void addGroup(String group) { if (isWildCardACLValue(group)) { throw new IllegalArgumentException(\"Group \" + group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); groupsList.add(groupgroupsList); } }", "n_tokens": 91, "n_pass": [101, 5, 5]}
{"time": "2023-09-24 01:47:05.667070", "score": "0.7718", "loss": "1.3135", "code": "public void addGroup(String group) { if (isWildCardACLValue(group)) {  IllegalArgumentException(\"Group \" + group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); groupsList.add(groupgroupsList); } }", "n_tokens": 88, "n_pass": [111, 7, 6]}
{"time": "2023-09-24 01:47:08.120636", "score": "0.5127", "loss": "3.1796", "code": "public void addGroup() { if (isWildCardACLValue(group)) {  IllegalArgumentException(\"Group \" + group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); groupsList.add(groupgroupsList); } }", "n_tokens": 85, "n_pass": [131, 8, 7]}
{"time": "2023-09-24 01:47:12.552781", "score": "0.5127", "loss": "3.1796", "code": "public void addGroup(){ if (isWildCardACLValue(group)) {  IllegalArgumentException(\"Group \" + group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); groupsList.add(groupgroupsList); } }", "n_tokens": 84, "n_pass": [207, 9, 8]}
{"time": "2023-09-24 01:47:14.232923", "score": "0.5127", "loss": "3.1796", "code": "public void addGroup(){if (isWildCardACLValue(group)) {  IllegalArgumentException(\"Group \" + group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); groupsList.add(groupgroupsList); } }", "n_tokens": 83, "n_pass": [209, 10, 9]}
{"time": "2023-09-24 01:47:17.737051", "score": "0.4183", "loss": "3.8023", "code": "public void addGroup(){if (isWildCardACLValue(group)) {  IllegalArgumentException(\"\" + group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); groupsList.add(groupgroupsList); } }", "n_tokens": 81, "n_pass": [218, 12, 10]}
{"time": "2023-09-24 01:47:22.024808", "score": "0.3251", "loss": "4.2156", "code": "public void addGroup(){if (isWildCardACLValue(group)) {  IllegalArgumentException(\"\" + group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 79, "n_pass": [242, 14, 11]}
{"time": "2023-09-24 01:47:25.631838", "score": "0.3251", "loss": "4.2156", "code": " void addGroup(){if (isWildCardACLValue(group)) {  IllegalArgumentException(\"\" + group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 78, "n_pass": [248, 16, 12]}
{"time": "2023-09-24 01:47:27.411305", "score": "0.3251", "loss": "4.2156", "code": "void addGroup(){if (isWildCardACLValue(group)) {  IllegalArgumentException(\"\" + group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 77, "n_pass": [249, 17, 13]}
{"time": "2023-09-24 01:47:42.976316", "score": "0.3251", "loss": "4.2156", "code": "void addGroup(){if(isWildCardACLValue(group)) {  IllegalArgumentException(\"\" + group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 76, "n_pass": [362, 21, 14]}
{"time": "2023-09-24 01:47:44.701833", "score": "0.4243", "loss": "3.1258", "code": "void addGroup(){if((group)) {  IllegalArgumentException(\"\" + group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 75, "n_pass": [363, 22, 15]}
{"time": "2023-09-24 01:47:46.571343", "score": "0.4243", "loss": "3.1258", "code": "void addGroup(){if((group)){  IllegalArgumentException(\"\" + group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 74, "n_pass": [368, 23, 16]}
{"time": "2023-09-24 01:47:48.263376", "score": "0.4243", "loss": "3.1258", "code": "void addGroup(){if((group)){ IllegalArgumentException(\"\" + group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 73, "n_pass": [370, 24, 17]}
{"time": "2023-09-24 01:47:50.012540", "score": "0.4243", "loss": "3.1258", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\" + group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 72, "n_pass": [371, 25, 18]}
{"time": "2023-09-24 01:47:53.539204", "score": "0.4243", "loss": "3.1258", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+ group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 71, "n_pass": [376, 27, 19]}
{"time": "2023-09-24 01:47:55.252082", "score": "0.4243", "loss": "3.1258", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+group + \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 70, "n_pass": [378, 28, 20]}
{"time": "2023-09-24 01:47:58.779941", "score": "0.4243", "loss": "3.1258", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+group+ \"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 69, "n_pass": [380, 30, 21]}
{"time": "2023-09-24 01:48:00.541377", "score": "0.4243", "loss": "3.1258", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+group+\"added\"); } if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 68, "n_pass": [382, 31, 22]}
{"time": "2023-09-24 01:48:04.114513", "score": "0.4243", "loss": "3.1258", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+group+\"added\");} if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 67, "n_pass": [388, 33, 23]}
{"time": "2023-09-24 01:48:05.887660", "score": "0.4243", "loss": "3.1258", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+group+\"added\");}if (!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 66, "n_pass": [390, 34, 24]}
{"time": "2023-09-24 01:48:07.686818", "score": "0.4243", "loss": "3.1258", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+group+\"added\");}if(!isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 65, "n_pass": [392, 35, 25]}
{"time": "2023-09-24 01:48:09.363942", "score": "0.4752", "loss": "2.8225", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+group+\"added\");}if(isAllAllowed()) { List<String> groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 64, "n_pass": [394, 36, 26]}
{"time": "2023-09-24 01:48:11.166129", "score": "0.4752", "loss": "2.8225", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+group+\"added\");}if(isAllAllowed()){ List<String> groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 63, "n_pass": [399, 37, 27]}
{"time": "2023-09-24 01:48:12.944557", "score": "0.4752", "loss": "2.8225", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+group+\"added\");}if(isAllAllowed()){List<String> groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 62, "n_pass": [401, 38, 28]}
{"time": "2023-09-24 01:48:15.171857", "score": "0.4752", "loss": "2.8225", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+group+\"added\");}if(isAllAllowed()){List<String>groupsList = new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 61, "n_pass": [406, 39, 29]}
{"time": "2023-09-24 01:48:17.073456", "score": "0.4752", "loss": "2.8225", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+group+\"added\");}if(isAllAllowed()){List<String>groupsList= new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 60, "n_pass": [408, 40, 30]}
{"time": "2023-09-24 01:48:18.889756", "score": "0.4752", "loss": "2.8225", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+group+\"added\");}if(isAllAllowed()){List<String>groupsList=new LinkedList<String>(); add(groupgroupsList); } }", "n_tokens": 59, "n_pass": [410, 41, 31]}
{"time": "2023-09-24 01:48:20.688020", "score": "0.5003", "loss": "2.762", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+group+\"added\");}if(isAllAllowed()){List<String>groupsList=new LinkedList<>(); add(groupgroupsList); } }", "n_tokens": 58, "n_pass": [415, 42, 32]}
{"time": "2023-09-24 01:48:22.417738", "score": "0.5003", "loss": "2.762", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+group+\"added\");}if(isAllAllowed()){List<String>groupsList=new LinkedList<>();add(groupgroupsList); } }", "n_tokens": 57, "n_pass": [420, 43, 33]}
{"time": "2023-09-24 01:48:24.157655", "score": "0.4494", "loss": "3.0493", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+group+\"added\");}if(isAllAllowed()){List<String>groupsList=new LinkedList<>();(groupgroupsList); } }", "n_tokens": 56, "n_pass": [421, 44, 34]}
{"time": "2023-09-24 01:48:25.747394", "score": "0.6", "loss": "1.9904", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+group+\"added\");}if(isAllAllowed()){List<String>groupsList=new LinkedList<>();(groupsList); } }", "n_tokens": 55, "n_pass": [423, 45, 35]}
{"time": "2023-09-24 01:48:27.566092", "score": "0.6", "loss": "1.9904", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+group+\"added\");}if(isAllAllowed()){List<String>groupsList=new LinkedList<>();(groupsList);} }", "n_tokens": 54, "n_pass": [427, 46, 36]}
{"time": "2023-09-24 01:48:29.247542", "score": "0.6", "loss": "1.9904", "code": "void addGroup(){if((group)){IllegalArgumentException(\"\"+group+\"added\");}if(isAllAllowed()){List<String>groupsList=new LinkedList<>();(groupsList);}}", "n_tokens": 53, "n_pass": [429, 47, 37]}
{"time": "2023-09-24 01:48:31.706769", "score": "0.5222", "loss": "2.6123", "code": "void addGroup(){if((group)){(\"\"+group+\"added\");}if(isAllAllowed()){List<String>groupsList=new LinkedList<>();(groupsList);}}", "n_tokens": 52, "n_pass": [444, 48, 38]}

Minimal simplified code:
void addGroup(){if((group)){(""+group+"added");}if(isAllAllowed()){List<String>groupsList=new LinkedList<>();(groupsList);}}

