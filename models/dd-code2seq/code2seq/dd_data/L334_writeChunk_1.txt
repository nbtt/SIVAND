
path = /Users/lap13494/workspace/ppl-extra-final/java-small/test/hadoop-splitted/Chunk_writeChunk_0.java
method_name = writeChunk
method_body = private void writeChunk(byte[] chunk, int offset, int len, boolean last) throws IOException { if (last) { Utils.writeVInt(out, len); if (len > 0) { out.write(chunk, offset, len); } } else { if (len > 0) { Utils.writeVInt(out, -len); out.write(chunk, offset, len); } } }
predict, score, loss = writeChunk, 0.8351356983184814, 0.6219492554664612

Trace of simplified code(s):
{"time": "2023-09-24 00:37:31.113564", "score": "0.8335", "loss": "0.6334", "code": "private void writeChunk(byte[] chunk, int offset, int len, boolean last) throws IOException { if (last) { Utils.writeVInt(out, len); if (len > 0) { out.write(chunk, offset, len); } } else { if (len > 0) { Utils.writeVInt(out, -len); out.write(chunk, offset, len); } } }", "n_tokens": 130, "n_pass": [1, 1, 1]}
{"time": "2023-09-24 00:37:33.328302", "score": "0.8784", "loss": "0.5861", "code": "private void writeChunk(byte[] chunk, int offset, int len, boolean last) throws IOException { if (last) { Utils.writeVInt(out, len); if (len > 0) { out.write(chunk, offset, len); } { Utils.writeVInt(out, -len); out.write(chunk, offset, len); } } }", "n_tokens": 114, "n_pass": [25, 2, 2]}
{"time": "2023-09-24 00:37:35.382614", "score": "0.8615", "loss": "0.6179", "code": "private void writeChunk(byte[] chunk, int offset, int len, boolean last) throws IOException { if (last) { Utils.writeVInt(out, len); if (len > 0) { out.write(chunk, offset, len); } { Utils.writeVInt(out); out.write(chunk, offset, len); } } }", "n_tokens": 110, "n_pass": [91, 3, 3]}
{"time": "2023-09-24 00:37:37.436589", "score": "0.8494", "loss": "0.7024", "code": "private void writeChunk(byte[] chunk, int offsetlen, boolean last) throws IOException { if (last) { Utils.writeVInt(out, len); if (len > 0) { out.write(chunk, offset, len); } { Utils.writeVInt(out); out.write(chunk, offset, len); } } }", "n_tokens": 106, "n_pass": [100, 4, 4]}
{"time": "2023-09-24 00:37:39.133959", "score": "0.9274", "loss": "0.3809", "code": "private void writeChunk(byte[] chunk, int offsetlen, boolean last) { if (last) { Utils.writeVInt(out, len); if (len > 0) { out.write(chunk, offset, len); } { Utils.writeVInt(out); out.write(chunk, offset, len); } } }", "n_tokens": 102, "n_pass": [103, 5, 5]}
{"time": "2023-09-24 00:37:40.897048", "score": "0.9325", "loss": "0.3991", "code": "private void writeChunk(byte[] chunk, int offsetlen, boolean last) { if (last) { Utils.writeVInt(out, len); if (0) { out.write(chunk, offset, len); } { Utils.writeVInt(out); out.write(chunk, offset, len); } } }", "n_tokens": 98, "n_pass": [110, 6, 6]}
{"time": "2023-09-24 00:37:43.158937", "score": "0.9051", "loss": "0.4664", "code": "private void writeChunk(byte[] chunk, int offsetlen, boolean last) { if (last) { Utils.writeVInt(out, len); if (0) { out(chunk, offset, len); } { Utils.writeVInt(out); out.write(chunk, offset, len); } } }", "n_tokens": 96, "n_pass": [186, 7, 7]}
{"time": "2023-09-24 00:37:44.868513", "score": "0.9048", "loss": "0.5034", "code": "private void writeChunk(byte[] chunk, int offsetlen, boolean last) { if (last) { Utils.writeVInt(out, len); if (0) { out(chunkoffset, len); } { Utils.writeVInt(out); out.write(chunk, offset, len); } } }", "n_tokens": 94, "n_pass": [188, 8, 8]}
{"time": "2023-09-24 00:37:46.707863", "score": "0.8217", "loss": "0.7691", "code": "private void writeChunk(byte[] chunk, int offsetlen, boolean last) { if (last) { Utils.writeVInt(out, len); if (0) { out(chunkoffset, len); } { Utils(out); out.write(chunk, offset, len); } } }", "n_tokens": 92, "n_pass": [195, 9, 9]}
{"time": "2023-09-24 00:37:48.473051", "score": "0.6028", "loss": "1.8305", "code": "private void writeChunk(byte[] chunk, int offsetlen, boolean last) { if (last) { Utils.writeVInt(out, len); if (0) { out(chunkoffset, len); } { Utils(out); out(chunk, offset, len); } } }", "n_tokens": 90, "n_pass": [199, 10, 10]}
{"time": "2023-09-24 00:37:51.909734", "score": "0.6336", "loss": "1.6218", "code": "private void writeChunk(byte[] chunk, int offsetlen, boolean last) { if (last) { Utils.writeVInt(out, len); if (0) { out(chunkoffset, len); } { Utils(out); out(chunk,  len); } } }", "n_tokens": 88, "n_pass": [202, 12, 11]}
{"time": "2023-09-24 00:37:53.660890", "score": "0.6336", "loss": "1.6218", "code": "void writeChunk(byte[] chunk, int offsetlen, boolean last) { if (last) { Utils.writeVInt(out, len); if (0) { out(chunkoffset, len); } { Utils(out); out(chunk,  len); } } }", "n_tokens": 86, "n_pass": [207, 13, 12]}
{"time": "2023-09-24 00:37:55.781784", "score": "0.5765", "loss": "1.9146", "code": "void writeChunk(byte[] chunk, int offsetlen, boolean last) { if (last) { writeVInt(out, len); if (0) { out(chunkoffset, len); } { Utils(out); out(chunk,  len); } } }", "n_tokens": 84, "n_pass": [224, 14, 13]}
{"time": "2023-09-24 00:37:59.556419", "score": "0.5941", "loss": "1.79", "code": "void writeChunk(byte[] chunk, int offsetlen, boolean last) { if (last) { writeVInt(out, len); if (0) { out(chunkoffset, len); } {(out); out(chunk,  len); } } }", "n_tokens": 82, "n_pass": [240, 16, 14]}
{"time": "2023-09-24 00:38:12.485499", "score": "0.5941", "loss": "1.79", "code": "void writeChunk(byte[] chunk, int offsetlen, boolean last) { if (last) { writeVInt(out, len); if (0) { out(chunkoffset, len); } {(out);out(chunk,  len); } } }", "n_tokens": 81, "n_pass": [365, 18, 15]}
{"time": "2023-09-24 00:38:14.215639", "score": "0.5941", "loss": "1.79", "code": "void writeChunk(byte[] chunk, int offsetlen, boolean last) { if (last) { writeVInt(out, len); if (0) { out(chunkoffset, len); } {(out);out(chunk, len); } } }", "n_tokens": 80, "n_pass": [369, 19, 16]}
{"time": "2023-09-24 00:38:15.962578", "score": "0.5941", "loss": "1.79", "code": "void writeChunk(byte[] chunk, int offsetlen, boolean last) { if (last) { writeVInt(out, len); if (0) { out(chunkoffset, len); } {(out);out(chunk,len); } } }", "n_tokens": 79, "n_pass": [370, 20, 17]}
{"time": "2023-09-24 00:38:17.663594", "score": "0.5941", "loss": "1.79", "code": "void writeChunk(byte[] chunk, int offsetlen, boolean last) { if (last) { writeVInt(out, len); if (0) { out(chunkoffset, len); } {(out);out(chunk,len);} } }", "n_tokens": 78, "n_pass": [374, 21, 18]}
{"time": "2023-09-24 00:38:20.103275", "score": "0.5941", "loss": "1.79", "code": "void writeChunk(byte[]chunk, int offsetlen, boolean last) { if (last) { writeVInt(out, len); if (0) { out(chunkoffset, len); } {(out);out(chunk,len);} } }", "n_tokens": 77, "n_pass": [385, 22, 19]}
{"time": "2023-09-24 00:38:21.841051", "score": "0.5941", "loss": "1.79", "code": "void writeChunk(byte[]chunk,int offsetlen, boolean last) { if (last) { writeVInt(out, len); if (0) { out(chunkoffset, len); } {(out);out(chunk,len);} } }", "n_tokens": 76, "n_pass": [388, 23, 20]}
{"time": "2023-09-24 00:38:23.552264", "score": "0.6319", "loss": "1.5523", "code": "void writeChunk(byte[]chunk,int len, boolean last) { if (last) { writeVInt(out, len); if (0) { out(chunkoffset, len); } {(out);out(chunk,len);} } }", "n_tokens": 75, "n_pass": [391, 24, 21]}
{"time": "2023-09-24 00:38:25.420907", "score": "0.6319", "loss": "1.5523", "code": "void writeChunk(byte[]chunk,int len,boolean last) { if (last) { writeVInt(out, len); if (0) { out(chunkoffset, len); } {(out);out(chunk,len);} } }", "n_tokens": 74, "n_pass": [394, 25, 22]}
{"time": "2023-09-24 00:38:27.104236", "score": "0.6319", "loss": "1.5523", "code": "void writeChunk(byte[]chunk,int len,boolean last){ if (last) { writeVInt(out, len); if (0) { out(chunkoffset, len); } {(out);out(chunk,len);} } }", "n_tokens": 73, "n_pass": [399, 26, 23]}
{"time": "2023-09-24 00:38:28.844817", "score": "0.6319", "loss": "1.5523", "code": "void writeChunk(byte[]chunk,int len,boolean last){if (last) { writeVInt(out, len); if (0) { out(chunkoffset, len); } {(out);out(chunk,len);} } }", "n_tokens": 72, "n_pass": [401, 27, 24]}
{"time": "2023-09-24 00:38:30.742803", "score": "0.6319", "loss": "1.5523", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last) { writeVInt(out, len); if (0) { out(chunkoffset, len); } {(out);out(chunk,len);} } }", "n_tokens": 71, "n_pass": [403, 28, 25]}
{"time": "2023-09-24 00:38:32.506079", "score": "0.6319", "loss": "1.5523", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){ writeVInt(out, len); if (0) { out(chunkoffset, len); } {(out);out(chunk,len);} } }", "n_tokens": 70, "n_pass": [407, 29, 26]}
{"time": "2023-09-24 00:38:34.366597", "score": "0.6319", "loss": "1.5523", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){writeVInt(out, len); if (0) { out(chunkoffset, len); } {(out);out(chunk,len);} } }", "n_tokens": 69, "n_pass": [409, 30, 27]}
{"time": "2023-09-24 00:38:36.024631", "score": "0.6319", "loss": "1.5523", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){writeVInt(out,len); if (0) { out(chunkoffset, len); } {(out);out(chunk,len);} } }", "n_tokens": 68, "n_pass": [414, 31, 28]}
{"time": "2023-09-24 00:38:37.735037", "score": "0.6319", "loss": "1.5523", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){writeVInt(out,len);if (0) { out(chunkoffset, len); } {(out);out(chunk,len);} } }", "n_tokens": 67, "n_pass": [418, 32, 29]}
{"time": "2023-09-24 00:38:39.476256", "score": "0.6319", "loss": "1.5523", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){writeVInt(out,len);if(0) { out(chunkoffset, len); } {(out);out(chunk,len);} } }", "n_tokens": 66, "n_pass": [420, 33, 30]}
{"time": "2023-09-24 00:38:41.202617", "score": "0.6319", "loss": "1.5523", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){writeVInt(out,len);if(0){ out(chunkoffset, len); } {(out);out(chunk,len);} } }", "n_tokens": 65, "n_pass": [424, 34, 31]}
{"time": "2023-09-24 00:38:42.943415", "score": "0.6319", "loss": "1.5523", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){writeVInt(out,len);if(0){out(chunkoffset, len); } {(out);out(chunk,len);} } }", "n_tokens": 64, "n_pass": [426, 35, 32]}
{"time": "2023-09-24 00:38:46.410806", "score": "0.7709", "loss": "0.8253", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){writeVInt(out,len);if(0){out(chunk, len); } {(out);out(chunk,len);} } }", "n_tokens": 63, "n_pass": [430, 37, 33]}
{"time": "2023-09-24 00:38:48.090934", "score": "0.7709", "loss": "0.8253", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){writeVInt(out,len);if(0){out(chunk,len); } {(out);out(chunk,len);} } }", "n_tokens": 62, "n_pass": [432, 38, 34]}
{"time": "2023-09-24 00:38:50.009866", "score": "0.7709", "loss": "0.8253", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){writeVInt(out,len);if(0){out(chunk,len);} {(out);out(chunk,len);} } }", "n_tokens": 61, "n_pass": [436, 39, 35]}
{"time": "2023-09-24 00:38:51.759962", "score": "0.7709", "loss": "0.8253", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){writeVInt(out,len);if(0){out(chunk,len);}{(out);out(chunk,len);} } }", "n_tokens": 60, "n_pass": [438, 40, 36]}
{"time": "2023-09-24 00:38:53.891011", "score": "0.809", "loss": "0.7452", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){writeVInt(out,len);if(0){out(chunk,len);}{(out);out(chunklen);} } }", "n_tokens": 59, "n_pass": [447, 41, 37]}
{"time": "2023-09-24 00:38:55.641298", "score": "0.8032", "loss": "0.7275", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){writeVInt(out,len);if(0){out(chunk,len);}{(out);out(chunk);} } }", "n_tokens": 58, "n_pass": [448, 42, 38]}
{"time": "2023-09-24 00:38:58.308678", "score": "0.7401", "loss": "1.0359", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){writeVInt(outlen);if(0){out(chunk,len);}{(out);out(chunk);} } }", "n_tokens": 57, "n_pass": [480, 43, 39]}
{"time": "2023-09-24 00:39:00.067199", "score": "0.7696", "loss": "0.8693", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){writeVInt(out);if(0){out(chunk,len);}{(out);out(chunk);} } }", "n_tokens": 56, "n_pass": [481, 44, 40]}
{"time": "2023-09-24 00:39:01.871269", "score": "0.7643", "loss": "1.0104", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){writeVInt(out);if(0){out(chunklen);}{(out);out(chunk);} } }", "n_tokens": 55, "n_pass": [492, 45, 41]}
{"time": "2023-09-24 00:39:03.565678", "score": "0.8247", "loss": "0.7285", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){writeVInt(out);if(0){out(chunk);}{(out);out(chunk);} } }", "n_tokens": 54, "n_pass": [493, 46, 42]}
{"time": "2023-09-24 00:39:05.590171", "score": "0.8421", "loss": "0.7291", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){writeVInt(out);if(0){out(chunk);}{(out);(chunk);} } }", "n_tokens": 53, "n_pass": [502, 47, 43]}
{"time": "2023-09-24 00:39:08.079309", "score": "0.6336", "loss": "1.9586", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){(out);if(0){out(chunk);}{(out);(chunk);} } }", "n_tokens": 52, "n_pass": [533, 48, 44]}
{"time": "2023-09-24 00:39:11.698764", "score": "0.4865", "loss": "2.6244", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){(out);if(0){out();}{(out);(chunk);} } }", "n_tokens": 51, "n_pass": [545, 50, 45]}
{"time": "2023-09-24 00:39:15.296899", "score": "0.4865", "loss": "2.6244", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){(out);if(0){out();}{(out);(chunk);}} }", "n_tokens": 50, "n_pass": [599, 51, 46]}
{"time": "2023-09-24 00:39:16.986587", "score": "0.4865", "loss": "2.6244", "code": "void writeChunk(byte[]chunk,int len,boolean last){if(last){(out);if(0){out();}{(out);(chunk);}}}", "n_tokens": 49, "n_pass": [600, 52, 47]}

Minimal simplified code:
void writeChunk(byte[]chunk,int len,boolean last){if(last){(out);if(0){out();}{(out);(chunk);}}}

