
path = /Users/lap13494/workspace/ppl-extra-final/java-small/test/hadoop-splitted/TestSequenceFile_main_0.java
method_name = main
method_body = public static void main(String[] args) throws Exception { int count = 1024 * 1024; int megabytes = 1; int factor = 10; boolean create = true; boolean rwonly = false; boolean check = false; boolean fast = false; boolean merge = false; String compressType = "NONE"; String compressionCodec = "org.apache.hadoop.io.compress.DefaultCodec"; Path file = null; int seed = new Random().nextInt(); String usage = "Usage: SequenceFile " + "[-count N] " + "[-seed #] [-check] [-compressType <NONE|RECORD|BLOCK>] " + "-codec <compressionCodec> " + "[[-rwonly] | {[-megabytes M] [-factor F] [-nocreate] [-fast] [-merge]}] " + " file"; if (args.length == 0) { System.err.println(usage); System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals("-count")) { count = Integer.parseInt(args[++i]); } else if (args[i].equals("-megabytes")) { megabytes = Integer.parseInt(args[++i]); } else if (args[i].equals("-factor")) { factor = Integer.parseInt(args[++i]); } else if (args[i].equals("-seed")) { seed = Integer.parseInt(args[++i]); } else if (args[i].equals("-rwonly")) { rwonly = true; } else if (args[i].equals("-nocreate")) { create = false; } else if (args[i].equals("-check")) { check = true; } else if (args[i].equals("-fast")) { fast = true; } else if (args[i].equals("-merge")) { merge = true; } else if (args[i].equals("-compressType")) { compressType = args[++i]; } else if (args[i].equals("-codec")) { compressionCodec = args[++i]; } else { file = new Path(args[i]); } } TestSequenceFile test = new TestSequenceFile(); fs = file.getFileSystem(test.conf); LOG.info("count = " + count); LOG.info("megabytes = " + megabytes); LOG.info("factor = " + factor); LOG.info("create = " + create); LOG.info("seed = " + seed); LOG.info("rwonly = " + rwonly); LOG.info("check = " + check); LOG.info("fast = " + fast); LOG.info("merge = " + merge); LOG.info("compressType = " + compressType); LOG.info("compressionCodec = " + compressionCodec); LOG.info("file = " + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes); } else { test.sortTest(fs, count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }
predict, score, loss = main, 0.916696310043335, 0.10052161663770676

Trace of simplified code(s):
{"time": "2023-09-23 23:31:46.791654", "score": "0.8853", "loss": "0.1432", "code": "public static void main(String[] args) throws Exception { int count = 1024 * 1024; int megabytes = 1; int factor = 10; boolean create = true; boolean rwonly = false; boolean check = false; boolean fast = false; boolean merge = false; String compressType = \"NONE\"; String compressionCodec = \"org.apache.hadoop.io.compress.DefaultCodec\"; Path file = null; int seed = new Random().nextInt(); String usage = \"Usage: SequenceFile \" + \"[-count N] \" + \"[-seed #] [-check] [-compressType <NONE|RECORD|BLOCK>] \" + \"-codec <compressionCodec> \" + \"[[-rwonly] | {[-megabytes M] [-factor F] [-nocreate] [-fast] [-merge]}] \" + \" file\"; if (args.length == 0) { System.err.println(usage); System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) { count = Integer.parseInt(args[++i]); } else if (args[i].equals(\"-megabytes\")) { megabytes = Integer.parseInt(args[++i]); } else if (args[i].equals(\"-factor\")) { factor = Integer.parseInt(args[++i]); } else if (args[i].equals(\"-seed\")) { seed = Integer.parseInt(args[++i]); } else if (args[i].equals(\"-rwonly\")) { rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; } else { file = new Path(args[i]); } } TestSequenceFile test = new TestSequenceFile(); fs = file.getFileSystem(test.conf); LOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor); LOG.info(\"create = \" + create); LOG.info(\"seed = \" + seed); LOG.info(\"rwonly = \" + rwonly); LOG.info(\"check = \" + check); LOG.info(\"fast = \" + fast); LOG.info(\"merge = \" + merge); LOG.info(\"compressType = \" + compressType); LOG.info(\"compressionCodec = \" + compressionCodec); LOG.info(\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes); } else { test.sortTest(fs, count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 1291, "n_pass": [1, 1, 1]}
{"time": "2023-09-23 23:31:49.290590", "score": "0.9577", "loss": "0.0489", "code": "public static void main(String[] args) throws Exception { int count = 1024 * 1024; int megabytes = 1; int factor = 10; boolean create = true; boolean rwonly = false; boolean check; String usage = \"Usage: SequenceFile \" + \"[-count N] \" + \"[-seed #] [-check] [-compressType <NONE|RECORD|BLOCK>] \" + \"-codec <compressionCodec> \" + \"[[-rwonly] | {[-megabytes M] [-factor F] [-nocreate] [-fast] [-merge]}] \" + \" file\"; if (args.length == 0) { System.err.println(usage); System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) { count = Integer.parseInt(args[++i]); } else if (args[i].equals(\"-megabytes\")) { megabytes = Integer.parseInt(args[++i]); } else if (args[i].equals(\"-factor\")) { factor = Integer.parseInt(args[++i]); } else if (args[i].equals(\"-seed\")) { seed = Integer.parseInt(args[++i]); } else if (args[i].equals(\"-rwonly\")) { rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; } else { file = new Path(args[i]); } } TestSequenceFile test = new TestSequenceFile(); fs = file.getFileSystem(test.conf); LOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor); LOG.info(\"create = \" + create); LOG.info(\"seed = \" + seed); LOG.info(\"rwonly = \" + rwonly); LOG.info(\"check = \" + check); LOG.info(\"fast = \" + fast); LOG.info(\"merge = \" + merge); LOG.info(\"compressType = \" + compressType); LOG.info(\"compressionCodec = \" + compressionCodec); LOG.info(\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes); } else { test.sortTest(fs, count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 1211, "n_pass": [45, 2, 2]}
{"time": "2023-09-23 23:31:51.495446", "score": "0.9686", "loss": "0.0401", "code": "public static void main(String[] args) throws Exception { int count = 1024 * 1024; int megabytes = 1; int factor = 10; boolean create = true; boolean rwonly = false; boolean check; String usage = \"Usage: SequenceFile \" + \"[-count N] \" + \"[-seed #] [-check] [-compressType <NONE|RECORD|BLOCK>] \" + \"-codec <compressionCodec> \" + \"[[-rwonly] | {[-megabytes M] [-factor F] [-nocreate] [-fast] [-merge]}] \" + \" file\"; if (args.length == 0) { System.err.println(usage); System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) { count = Integer.parseInt(args[++i]); } else if (args[i].equals(\"-megabytes\")) { megabytes = Integer.parseInt(args[++i]); } else if (args[i].equals(\"-factor\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; } else { file = new Path(args[i]); } } TestSequenceFile test = new TestSequenceFile(); fs = file.getFileSystem(test.conf); LOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor); LOG.info(\"create = \" + create); LOG.info(\"seed = \" + seed); LOG.info(\"rwonly = \" + rwonly); LOG.info(\"check = \" + check); LOG.info(\"fast = \" + fast); LOG.info(\"merge = \" + merge); LOG.info(\"compressType = \" + compressType); LOG.info(\"compressionCodec = \" + compressionCodec); LOG.info(\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes); } else { test.sortTest(fs, count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 1130, "n_pass": [50, 3, 3]}
{"time": "2023-09-23 23:31:54.182179", "score": "0.9658", "loss": "0.0412", "code": "public static void main(String[] args) throws Exception { int count = 1024 * 1024; ; String usage = \"Usage: SequenceFile \" + \"[-count N] \" + \"[-seed #] [-check] [-compressType <NONE|RECORD|BLOCK>] \" + \"-codec <compressionCodec> \" + \"[[-rwonly] | {[-megabytes M] [-factor F] [-nocreate] [-fast] [-merge]}] \" + \" file\"; if (args.length == 0) { System.err.println(usage); System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) { count = Integer.parseInt(args[++i]); } else if (args[i].equals(\"-megabytes\")) { megabytes = Integer.parseInt(args[++i]); } else if (args[i].equals(\"-factor\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; } else { file = new Path(args[i]); } } TestSequenceFile test = new TestSequenceFile(); fs = file.getFileSystem(test.conf); LOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor); LOG.info(\"create = \" + create); LOG.info(\"seed = \" + seed); LOG.info(\"rwonly = \" + rwonly); LOG.info(\"check = \" + check); LOG.info(\"fast = \" + fast); LOG.info(\"merge = \" + merge); LOG.info(\"compressType = \" + compressType); LOG.info(\"compressionCodec = \" + compressionCodec); LOG.info(\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes); } else { test.sortTest(fs, count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 1090, "n_pass": [112, 4, 4]}
{"time": "2023-09-23 23:31:56.443042", "score": "0.9847", "loss": "0.019", "code": "public static void main(String[] args) throws Exception { int count = 1024 * 1024; ; String usage = \"Usage: SequenceFile \" + \"[-count N] \" + \"[-seed #] [- {[-megabytes M] [-factor F] [-nocreate] [-fast] [-merge]}] \" + \" file\"; if (args.length == 0) { System.err.println(usage); System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) { count = Integer.parseInt(args[++i]); } else if (args[i].equals(\"-megabytes\")) { megabytes = Integer.parseInt(args[++i]); } else if (args[i].equals(\"-factor\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; } else { file = new Path(args[i]); } } TestSequenceFile test = new TestSequenceFile(); fs = file.getFileSystem(test.conf); LOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor); LOG.info(\"create = \" + create); LOG.info(\"seed = \" + seed); LOG.info(\"rwonly = \" + rwonly); LOG.info(\"check = \" + check); LOG.info(\"fast = \" + fast); LOG.info(\"merge = \" + merge); LOG.info(\"compressType = \" + compressType); LOG.info(\"compressionCodec = \" + compressionCodec); LOG.info(\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes); } else { test.sortTest(fs, count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 1050, "n_pass": [114, 5, 5]}
{"time": "2023-09-23 23:31:58.378189", "score": "0.9542", "loss": "0.0572", "code": "public static void main(String[] args) throws Exception { int count = 1024 * 1024; ; String usage = \"Usage: SequenceFile \" + \"[-count N] \" + \"[-seed #] [-\"; if (args.length == 0) { System.err.println(usage); System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) { count = Integer.parseInt(args[++i]); } else if (args[i].equals(\"-megabytes\")) { megabytes = Integer.parseInt(args[++i]); } else if (args[i].equals(\"-factor\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; } else { file = new Path(args[i]); } } TestSequenceFile test = new TestSequenceFile(); fs = file.getFileSystem(test.conf); LOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor); LOG.info(\"create = \" + create); LOG.info(\"seed = \" + seed); LOG.info(\"rwonly = \" + rwonly); LOG.info(\"check = \" + check); LOG.info(\"fast = \" + fast); LOG.info(\"merge = \" + merge); LOG.info(\"compressType = \" + compressType); LOG.info(\"compressionCodec = \" + compressionCodec); LOG.info(\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes); } else { test.sortTest(fs, count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 1010, "n_pass": [115, 6, 6]}
{"time": "2023-09-23 23:32:00.524760", "score": "0.8165", "loss": "0.2409", "code": "public static void main(String[] args) throws Exception { int count = 1024 * 1024; ; String usage = \"Usage: SequenceFile \" + \"[-count N] \" + \"[-seed #] [-\"; if (args.length == 0) { System.err.println(usage); System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) { megabytes = Integer.parseInt(args[++i]); } else if (args[i].equals(\"-factor\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; } else { file = new Path(args[i]); } } TestSequenceFile test = new TestSequenceFile(); fs = file.getFileSystem(test.conf); LOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor); LOG.info(\"create = \" + create); LOG.info(\"seed = \" + seed); LOG.info(\"rwonly = \" + rwonly); LOG.info(\"check = \" + check); LOG.info(\"fast = \" + fast); LOG.info(\"merge = \" + merge); LOG.info(\"compressType = \" + compressType); LOG.info(\"compressionCodec = \" + compressionCodec); LOG.info(\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes); } else { test.sortTest(fs, count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 970, "n_pass": [119, 7, 7]}
{"time": "2023-09-23 23:32:02.456111", "score": "0.9772", "loss": "0.0248", "code": "public static void main(String[] args) throws Exception { int count = 1024 * 1024; ; String usage = \"Usage: SequenceFile \" + \"[-count N] \" + \"[-seed #] [-\"; if (args.length == 0) { System.err.println(usage); System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; } else { file = new Path(args[i]); } } TestSequenceFile test = new TestSequenceFile(); fs = file.getFileSystem(test.conf); LOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor); LOG.info(\"create = \" + create); LOG.info(\"seed = \" + seed); LOG.info(\"rwonly = \" + rwonly); LOG.info(\"check = \" + check); LOG.info(\"fast = \" + fast); LOG.info(\"merge = \" + merge); LOG.info(\"compressType = \" + compressType); LOG.info(\"compressionCodec = \" + compressionCodec); LOG.info(\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes); } else { test.sortTest(fs, count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 930, "n_pass": [120, 8, 8]}
{"time": "2023-09-23 23:32:05.574360", "score": "0.7804", "loss": "0.3059", "code": "public static void main(String[] args) throws Exception { int count = 1024 * 1024; ; String usage = \"Usage: SequenceFile \" + \"[-count N] \" + \"[-seed #] [-\"; if (args.length == 0) { System.err.println(usage); System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = new TestSequenceFile(); fs = file.getFileSystem(test.conf); LOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor); LOG.info(\"create = \" + create); LOG.info(\"seed = \" + seed); LOG.info(\"rwonly = \" + rwonly); LOG.info(\"check = \" + check); LOG.info(\"fast = \" + fast); LOG.info(\"merge = \" + merge); LOG.info(\"compressType = \" + compressType); LOG.info(\"compressionCodec = \" + compressionCodec); LOG.info(\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes); } else { test.sortTest(fs, count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 910, "n_pass": [200, 9, 9]}
{"time": "2023-09-23 23:32:07.812561", "score": "0.977", "loss": "0.0277", "code": "public static void main(String[] args) throws Exception { int count = 1024 * 1024; ; String usage = \"Usage: SequenceFile \" + \"[-count N] \" + \"[-seed #] [-\"; if (args.length == 0) { System.err.println(usage); System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = new TestSequenceFile(); fs = file.getFileSystem(test.conf); LOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\"rwonly = \" + rwonly); LOG.info(\"check = \" + check); LOG.info(\"fast = \" + fast); LOG.info(\"merge = \" + merge); LOG.info(\"compressType = \" + compressType); LOG.info(\"compressionCodec = \" + compressionCodec); LOG.info(\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes); } else { test.sortTest(fs, count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 890, "n_pass": [204, 10, 10]}
{"time": "2023-09-23 23:32:10.038150", "score": "0.8664", "loss": "0.1647", "code": "public static void main(String[] args) throws Exception { int count = 1024 * 1024; ; String usage = \"Usage: SequenceFile \" + \"[-count N] \" + \"[-seed #] [-\"; if (args.length == 0) { System.err.println(usage); System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = new TestSequenceFile(); fs = file.getFileSystem(test.conf); LOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" + fast); LOG.info(\"merge = \" + merge); LOG.info(\"compressType = \" + compressType); LOG.info(\"compressionCodec = \" + compressionCodec); LOG.info(\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes); } else { test.sortTest(fs, count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 870, "n_pass": [206, 11, 11]}
{"time": "2023-09-23 23:32:12.040396", "score": "0.9574", "loss": "0.0505", "code": "public static void main(String[] args) throws Exception { int count = 1024 * 1024; ; String usage = \"Usage: SequenceFile \" + \"[-count N] \" + \"[-seed #] [-\"; if (args.length == 0) { System.err.println(usage); System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = new TestSequenceFile(); fs = file.getFileSystem(test.conf); LOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); LOG.info(\"compressionCodec = \" + compressionCodec); LOG.info(\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes); } else { test.sortTest(fs, count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 850, "n_pass": [208, 12, 12]}
{"time": "2023-09-23 23:32:14.040643", "score": "0.9749", "loss": "0.0286", "code": "public static void main(String[] args) throws Exception { int count = 1024 * 1024; ; String usage = \"Usage: SequenceFile \" + \"[-count N] \" + \"[-seed #] [-\"; if (args.length == 0) { System.err.println(usage); System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = new TestSequenceFile(); fs = file.getFileSystem(test.conf); LOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes); } else { test.sortTest(fs, count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 830, "n_pass": [210, 13, 13]}
{"time": "2023-09-23 23:32:16.535243", "score": "0.9872", "loss": "0.0144", "code": "public static void main(String[] args) throws Exception { int count = 1024 * 1024; ; String usage = \"Usage: SequenceFile \" + \"[-count N] \" + \"[-seed #] [-\"; if (args.length == 0) { System.err.println(usage); System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = new TestSequenceFile(); fs = file.getFileSystem(test.conf); LOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast,count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 809, "n_pass": [221, 14, 14]}
{"time": "2023-09-23 23:32:18.453770", "score": "0.9266", "loss": "0.0876", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage: SequenceFile \" + \"[-count N] \" + \"[-seed #] [-\"; if (args.length == 0) { System.err.println(usage); System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = new TestSequenceFile(); fs = file.getFileSystem(test.conf); LOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast,count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 789, "n_pass": [226, 15, 15]}
{"time": "2023-09-23 23:32:20.477625", "score": "0.9342", "loss": "0.0772", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage: SequenceFile \" + \"[\"; if (args.length == 0) { System.err.println(usage); System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = new TestSequenceFile(); fs = file.getFileSystem(test.conf); LOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast,count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 769, "n_pass": [228, 16, 16]}
{"time": "2023-09-23 23:32:23.983278", "score": "0.9748", "loss": "0.0289", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage: SequenceFile \" + \"[\"; if (args.length == 0) { System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = new TestSequenceFile(); fs = file.getFileSystem(test.conf); LOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast,count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 759, "n_pass": [345, 17, 17]}
{"time": "2023-09-23 23:32:26.431638", "score": "0.9246", "loss": "0.0953", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage: SequenceFile \" + \"[\"; if (args.length == 0) { System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newfile.getFileSystem(test.conf); LOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast,count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 749, "n_pass": [375, 18, 18]}
{"time": "2023-09-23 23:32:28.378862", "score": "0.9633", "loss": "0.0447", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage: SequenceFile \" + \"[\"; if (args.length == 0) { System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.err.println(usage); System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast,count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 739, "n_pass": [376, 19, 19]}
{"time": "2023-09-23 23:32:30.450831", "score": "0.6176", "loss": "0.5833", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage: SequenceFile \" + \"[\"; if (args.length == 0) { System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); } CompressionType compressionType = CompressionType.valueOf(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast,count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 729, "n_pass": [392, 20, 20]}
{"time": "2023-09-23 23:32:32.302904", "score": "0.9527", "loss": "0.0588", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage: SequenceFile \" + \"[\"; if (args.length == 0) { System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast,count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 719, "n_pass": [394, 21, 21]}
{"time": "2023-09-23 23:32:34.553263", "score": "0.9281", "loss": "0.0932", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage: SequenceFile \" + \"[\"; if (args.length == 0) { System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs, count, seed, file, compressionType, fast,count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 709, "n_pass": [397, 22, 22]}
{"time": "2023-09-23 23:32:36.595891", "score": "0.9368", "loss": "0.0727", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage: SequenceFile \" + \"[\"; if (args.length == 0) { System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast,count, megabytes, factor, fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 698, "n_pass": [407, 23, 23]}
{"time": "2023-09-23 23:32:38.508959", "score": "0.944", "loss": "0.0665", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage: SequenceFile \" + \"[\"; if (args.length == 0) { System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 687, "n_pass": [408, 24, 24]}
{"time": "2023-09-23 23:32:40.769556", "score": "0.9813", "loss": "0.0239", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystem fs = null; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 677, "n_pass": [417, 25, 25]}
{"time": "2023-09-23 23:32:44.494818", "score": "0.8438", "loss": "0.217", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for (int i = 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 672, "n_pass": [625, 26, 26]}
{"time": "2023-09-23 23:32:46.549805", "score": "0.9633", "loss": "0.0492", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; i < args.length; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 667, "n_pass": [627, 27, 27]}
{"time": "2023-09-23 23:32:48.468309", "score": "0.895", "loss": "0.1437", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (args[i].equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 662, "n_pass": [629, 28, 28]}
{"time": "2023-09-23 23:32:50.561484", "score": "0.956", "loss": "0.0624", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) { create = false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 657, "n_pass": [643, 29, 29]}
{"time": "2023-09-23 23:32:52.424258", "score": "0.9594", "loss": "0.0527", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (args[i].equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 652, "n_pass": [646, 30, 30]}
{"time": "2023-09-23 23:32:54.409476", "score": "0.9441", "loss": "0.0721", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) { check = true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 647, "n_pass": [649, 31, 31]}
{"time": "2023-09-23 23:32:56.402912", "score": "0.9524", "loss": "0.058", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (args[i].equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 642, "n_pass": [652, 32, 32]}
{"time": "2023-09-23 23:32:58.294524", "score": "0.9484", "loss": "0.0662", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) { fast = true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 637, "n_pass": [655, 33, 33]}
{"time": "2023-09-23 23:33:00.192066", "score": "0.9759", "loss": "0.0291", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (args[i].equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 632, "n_pass": [658, 34, 34]}
{"time": "2023-09-23 23:33:02.102429", "score": "0.9099", "loss": "0.1152", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) { merge = true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 627, "n_pass": [661, 35, 35]}
{"time": "2023-09-23 23:33:03.975809", "score": "0.9643", "loss": "0.0481", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (args[i].equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 622, "n_pass": [664, 36, 36]}
{"time": "2023-09-23 23:33:05.881731", "score": "0.9836", "loss": "0.0211", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) { compressType = args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 617, "n_pass": [667, 37, 37]}
{"time": "2023-09-23 23:33:07.723539", "score": "0.9859", "loss": "0.0176", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (args[i].equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 612, "n_pass": [670, 38, 38]}
{"time": "2023-09-23 23:33:09.655173", "score": "0.9767", "loss": "0.0281", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) { compressionCodec = args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 607, "n_pass": [674, 39, 39]}
{"time": "2023-09-23 23:33:11.537164", "score": "0.8556", "loss": "0.2335", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || merge || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 602, "n_pass": [677, 40, 40]}
{"time": "2023-09-23 23:33:13.710679", "score": "0.9433", "loss": "0.0646", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create || fast)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 597, "n_pass": [709, 41, 41]}
{"time": "2023-09-23 23:33:15.758070", "score": "0.9814", "loss": "0.0215", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }(compressType); CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 592, "n_pass": [710, 42, 42]}
{"time": "2023-09-23 23:33:17.876898", "score": "0.9686", "loss": "0.0365", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 587, "n_pass": [714, 43, 43]}
{"time": "2023-09-23 23:33:20.310549", "score": "0.9759", "loss": "0.0272", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }CompressionCodec codec =ReflectionUtils.newInstance(test.conf); if (rwonly || (create && !merge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 582, "n_pass": [716, 44, 44]}
{"time": "2023-09-23 23:33:22.199027", "score": "0.925", "loss": "0.0938", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }CompressionCodec codec =ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(fs, count, seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 577, "n_pass": [721, 45, 45]}
{"time": "2023-09-23 23:33:24.101828", "score": "0.8837", "loss": "0.1595", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }CompressionCodec codec =ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest( seed, file, compressionType, codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 572, "n_pass": [724, 46, 46]}
{"time": "2023-09-23 23:33:26.006294", "score": "0.9598", "loss": "0.0481", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }CompressionCodec codec =ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest( seed, filecodec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, count, seed, file); } } finally { fs.close(); } }", "n_tokens": 567, "n_pass": [726, 47, 47]}
{"time": "2023-09-23 23:33:28.091184", "score": "0.9578", "loss": "0.0528", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }CompressionCodec codec =ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest( seed, filecodec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, file); } } finally { fs.close(); } }", "n_tokens": 561, "n_pass": [741, 48, 48]}
{"time": "2023-09-23 23:33:31.328210", "score": "0.9876", "loss": "0.0142", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest( seed, filecodec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, file); } } finally { fs.close(); } }", "n_tokens": 556, "n_pass": [831, 49, 49]}
{"time": "2023-09-23 23:33:33.356708", "score": "0.9506", "loss": "0.0598", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec); test.readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, file); } } finally { fs.close(); } }", "n_tokens": 551, "n_pass": [838, 50, 50]}
{"time": "2023-09-23 23:33:38.719145", "score": "0.9228", "loss": "0.0927", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs, count, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, file); } } finally { fs.close(); } }", "n_tokens": 548, "n_pass": [1171, 51, 51]}
{"time": "2023-09-23 23:33:40.600258", "score": "0.9312", "loss": "0.092", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs, seed, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, file); } } finally { fs.close(); } }", "n_tokens": 545, "n_pass": [1173, 52, 52]}
{"time": "2023-09-23 23:33:42.519746", "score": "0.8881", "loss": "0.153", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs, file); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, file); } } finally { fs.close(); } }", "n_tokens": 542, "n_pass": [1174, 53, 53]}
{"time": "2023-09-23 23:33:44.376652", "score": "0.9808", "loss": "0.0222", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) { test.mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, file); } } finally { fs.close(); } }", "n_tokens": 539, "n_pass": [1175, 54, 54]}
{"time": "2023-09-23 23:33:46.449811", "score": "0.9298", "loss": "0.0812", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fs,  fast, file); } } if (check) { test.checkSort(fs, file); } } finally { fs.close(); } }", "n_tokens": 536, "n_pass": [1183, 55, 55]}
{"time": "2023-09-23 23:33:48.552086", "score": "0.9883", "loss": "0.0129", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfast, file); } } if (check) { test.checkSort(fs, file); } } finally { fs.close(); } }", "n_tokens": 533, "n_pass": [1185, 56, 56]}
{"time": "2023-09-23 23:33:50.754247", "score": "0.9779", "loss": "0.0292", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) { test.checkSort(fs, file); } } finally { fs.close(); } }", "n_tokens": 530, "n_pass": [1186, 57, 57]}
{"time": "2023-09-23 23:33:52.744217", "score": "0.9565", "loss": "0.0543", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs, file); } } finally { fs.close(); } }", "n_tokens": 527, "n_pass": [1192, 58, 58]}
{"time": "2023-09-23 23:33:54.656221", "score": "0.902", "loss": "0.1277", "code": "public static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 524, "n_pass": [1194, 59, 59]}
{"time": "2023-09-23 23:33:56.678128", "score": "0.9899", "loss": "0.0131", "code": "static void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 522, "n_pass": [1202, 60, 60]}
{"time": "2023-09-23 23:33:58.499936", "score": "0.9933", "loss": "0.0086", "code": "void main(String[] args) throws Exception {; String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 520, "n_pass": [1203, 61, 61]}
{"time": "2023-09-23 23:34:00.743492", "score": "0.9762", "loss": "0.0281", "code": "void main(String[] args) throws Exception {String usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 518, "n_pass": [1212, 62, 62]}
{"time": "2023-09-23 23:34:02.606812", "score": "0.9218", "loss": "0.0983", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (args.length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 516, "n_pass": [1213, 63, 63]}
{"time": "2023-09-23 23:34:04.560386", "score": "0.9726", "loss": "0.0371", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { System.exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 514, "n_pass": [1220, 64, 64]}
{"time": "2023-09-23 23:34:06.438078", "score": "0.9899", "loss": "0.0125", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(-1); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 512, "n_pass": [1226, 65, 65]}
{"time": "2023-09-23 23:34:08.250697", "score": "0.9258", "loss": "0.0956", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } FileSystemnull; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 510, "n_pass": [1228, 66, 66]}
{"time": "2023-09-23 23:34:10.228058", "score": "0.9766", "loss": "0.0294", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); }null; try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 508, "n_pass": [1231, 67, 67]}
{"time": "2023-09-23 23:34:11.993729", "score": "0.9942", "loss": "0.0068", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for ( 0; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 506, "n_pass": [1232, 68, 68]}
{"time": "2023-09-23 23:34:13.879868", "score": "0.8896", "loss": "0.1411", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ilength; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 504, "n_pass": [1237, 69, 69]}
{"time": "2023-09-23 23:34:15.733103", "score": "0.9058", "loss": "0.1284", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; ++i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 502, "n_pass": [1239, 70, 70]}
{"time": "2023-09-23 23:34:17.532827", "score": "0.8595", "loss": "0.1914", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i] == null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 500, "n_pass": [1241, 71, 71]}
{"time": "2023-09-23 23:34:19.437028", "score": "0.9511", "loss": "0.0662", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) { continue; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 498, "n_pass": [1248, 72, 72]}
{"time": "2023-09-23 23:34:21.399219", "score": "0.9586", "loss": "0.0501", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {; } else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 496, "n_pass": [1252, 73, 73]}
{"time": "2023-09-23 23:34:23.633894", "score": "0.9181", "loss": "0.113", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} else if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 494, "n_pass": [1253, 74, 74]}
{"time": "2023-09-23 23:34:25.822711", "score": "0.953", "loss": "0.0592", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } else if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 492, "n_pass": [1255, 75, 75]}
{"time": "2023-09-23 23:34:27.779262", "score": "0.9777", "loss": "0.0273", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) {false; } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 490, "n_pass": [1269, 76, 76]}
{"time": "2023-09-23 23:34:29.714944", "score": "0.9392", "loss": "0.0761", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } else if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 488, "n_pass": [1277, 77, 77]}
{"time": "2023-09-23 23:34:31.582470", "score": "0.9556", "loss": "0.0557", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) {true; } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 486, "n_pass": [1279, 78, 78]}
{"time": "2023-09-23 23:34:33.478017", "score": "0.9938", "loss": "0.0076", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } else if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 484, "n_pass": [1287, 79, 79]}
{"time": "2023-09-23 23:34:35.339634", "score": "0.9708", "loss": "0.0369", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) {true; } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 482, "n_pass": [1289, 80, 80]}
{"time": "2023-09-23 23:34:37.300961", "score": "0.9761", "loss": "0.0307", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } else if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 480, "n_pass": [1297, 81, 81]}
{"time": "2023-09-23 23:34:39.099770", "score": "0.9396", "loss": "0.0682", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; } else if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 478, "n_pass": [1299, 82, 82]}
{"time": "2023-09-23 23:34:41.011329", "score": "0.9831", "loss": "0.0204", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile test = newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 475, "n_pass": [1316, 83, 83]}
{"time": "2023-09-23 23:34:42.981560", "score": "0.9717", "loss": "0.0342", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile= newLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 472, "n_pass": [1326, 84, 84]}
{"time": "2023-09-23 23:34:44.905445", "score": "0.9563", "loss": "0.0526", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFileLOG.info(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 469, "n_pass": [1327, 85, 85]}
{"time": "2023-09-23 23:34:46.888650", "score": "0.9555", "loss": "0.0516", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count = \" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 466, "n_pass": [1328, 86, 86]}
{"time": "2023-09-23 23:34:48.729128", "score": "0.9355", "loss": "0.0754", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count); LOG.info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 463, "n_pass": [1330, 87, 87]}
{"time": "2023-09-23 23:34:50.533416", "score": "0.9819", "loss": "0.0216", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes); LOG.info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 460, "n_pass": [1333, 88, 88]}
{"time": "2023-09-23 23:34:52.466507", "score": "0.9043", "loss": "0.1239", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\"factor = \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 457, "n_pass": [1339, 89, 89]}
{"time": "2023-09-23 23:34:54.254072", "score": "0.9775", "loss": "0.0271", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" + factor);info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 454, "n_pass": [1341, 90, 90]}
{"time": "2023-09-23 23:34:56.139115", "score": "0.9925", "loss": "0.0093", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed = \" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 451, "n_pass": [1343, 91, 91]}
{"time": "2023-09-23 23:34:58.020827", "score": "0.9919", "loss": "0.0097", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed); LOG.info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 448, "n_pass": [1346, 92, 92]}
{"time": "2023-09-23 23:34:59.829910", "score": "0.9181", "loss": "0.1013", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(\" \" + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 445, "n_pass": [1349, 93, 93]}
{"time": "2023-09-23 23:35:01.808365", "score": "0.8915", "loss": "0.1572", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info( + check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 442, "n_pass": [1351, 94, 94]}
{"time": "2023-09-23 23:35:03.985224", "score": "0.9437", "loss": "0.0723", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check); LOG.info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 439, "n_pass": [1352, 95, 95]}
{"time": "2023-09-23 23:35:05.944213", "score": "0.9169", "loss": "0.1129", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\"fast = \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 436, "n_pass": [1354, 96, 96]}
{"time": "2023-09-23 23:35:07.799491", "score": "0.9778", "loss": "0.0282", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); LOG.info(\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 433, "n_pass": [1356, 97, 97]}
{"time": "2023-09-23 23:35:09.608204", "score": "0.9246", "loss": "0.1009", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType = \" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 430, "n_pass": [1359, 98, 98]}
{"time": "2023-09-23 23:35:11.438106", "score": "0.9906", "loss": "0.011", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly && (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 427, "n_pass": [1361, 99, 99]}
{"time": "2023-09-23 23:35:13.374196", "score": "0.9307", "loss": "0.094", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System.exit(-1); }ReflectionUtils.newInstance(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 424, "n_pass": [1371, 100, 100]}
{"time": "2023-09-23 23:35:15.335931", "score": "0.9628", "loss": "0.0483", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System.exit(-1); }(test.conf); if (rwonly || (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 421, "n_pass": [1378, 101, 101]}
{"time": "2023-09-23 23:35:17.246070", "score": "0.9925", "loss": "0.009", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System.exit(-1); }(test.conf); if (rwonly (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 418, "n_pass": [1383, 102, 102]}
{"time": "2023-09-23 23:35:46.029918", "score": "0.9436", "loss": "0.0827", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(test.conf); if (rwonly (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 416, "n_pass": [1885, 103, 103]}
{"time": "2023-09-23 23:35:48.104017", "score": "0.9659", "loss": "0.048", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly (createmerge)) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 414, "n_pass": [1890, 104, 104]}
{"time": "2023-09-23 23:35:50.122333", "score": "0.9588", "loss": "0.0568", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test.writeTest(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 412, "n_pass": [1896, 105, 105]}
{"time": "2023-09-23 23:35:52.126477", "score": "0.942", "loss": "0.0775", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(fsfile); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 410, "n_pass": [1900, 106, 106]}
{"time": "2023-09-23 23:35:54.123759", "score": "0.9816", "loss": "0.0233", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { fs.close(); } }", "n_tokens": 408, "n_pass": [1916, 107, 107]}
{"time": "2023-09-23 23:35:56.115982", "score": "0.953", "loss": "0.0719", "code": "void main(String[] args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 406, "n_pass": [1931, 108, 108]}
{"time": "2023-09-23 23:35:58.716063", "score": "0.9308", "loss": "0.0989", "code": "void main(String[]args) throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 405, "n_pass": [1943, 109, 109]}
{"time": "2023-09-23 23:36:00.729311", "score": "0.9751", "loss": "0.0313", "code": "void main(String[]args)throws Exception {usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 404, "n_pass": [1946, 110, 110]}
{"time": "2023-09-23 23:36:02.520513", "score": "0.9519", "loss": "0.0687", "code": "void main(String[]args)throws Exception{usage = \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 403, "n_pass": [1950, 111, 111]}
{"time": "2023-09-23 23:36:04.364933", "score": "0.9319", "loss": "0.0984", "code": "void main(String[]args)throws Exception{usage= \"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 402, "n_pass": [1953, 112, 112]}
{"time": "2023-09-23 23:36:06.231840", "score": "0.9767", "loss": "0.0295", "code": "void main(String[]args)throws Exception{usage=\"Usage\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 401, "n_pass": [1955, 113, 113]}
{"time": "2023-09-23 23:36:08.038255", "score": "0.8969", "loss": "0.1291", "code": "void main(String[]args)throws Exception{usage=\"\"; if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 400, "n_pass": [1957, 114, 114]}
{"time": "2023-09-23 23:36:09.900933", "score": "0.9425", "loss": "0.0904", "code": "void main(String[]args)throws Exception{usage=\"\";if (length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 399, "n_pass": [1960, 115, 115]}
{"time": "2023-09-23 23:36:12.028391", "score": "0.9052", "loss": "0.1421", "code": "void main(String[]args)throws Exception{usage=\"\";if(length == 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 398, "n_pass": [1962, 116, 116]}
{"time": "2023-09-23 23:36:13.931236", "score": "0.9725", "loss": "0.0395", "code": "void main(String[]args)throws Exception{usage=\"\";if(length== 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 397, "n_pass": [1965, 117, 117]}
{"time": "2023-09-23 23:36:15.706888", "score": "0.9809", "loss": "0.0244", "code": "void main(String[]args)throws Exception{usage=\"\";if(length= 0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 396, "n_pass": [1966, 118, 118]}
{"time": "2023-09-23 23:36:17.566703", "score": "0.958", "loss": "0.0576", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0) { exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 395, "n_pass": [1968, 119, 119]}
{"time": "2023-09-23 23:36:19.468656", "score": "0.8894", "loss": "0.1583", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){ exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 394, "n_pass": [1971, 120, 120]}
{"time": "2023-09-23 23:36:21.269808", "score": "0.9896", "loss": "0.0125", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit(); } try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 393, "n_pass": [1973, 121, 121]}
{"time": "2023-09-23 23:36:23.126836", "score": "0.8884", "loss": "0.1706", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();} try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 392, "n_pass": [1978, 122, 122]}
{"time": "2023-09-23 23:36:25.019833", "score": "0.9547", "loss": "0.0635", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try { for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 391, "n_pass": [1980, 123, 123]}
{"time": "2023-09-23 23:36:27.153047", "score": "0.9858", "loss": "0.0193", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{ for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 390, "n_pass": [1982, 124, 124]}
{"time": "2023-09-23 23:36:29.147421", "score": "0.9223", "loss": "0.1335", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for (; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 389, "n_pass": [1984, 125, 125]}
{"time": "2023-09-23 23:36:31.246854", "score": "0.961", "loss": "0.0559", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(; ; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 388, "n_pass": [1986, 126, 126]}
{"time": "2023-09-23 23:36:33.138483", "score": "0.8389", "loss": "0.261", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;; i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 387, "n_pass": [1989, 127, 127]}
{"time": "2023-09-23 23:36:34.863006", "score": "0.9519", "loss": "0.0756", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;i) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 386, "n_pass": [1991, 128, 128]}
{"time": "2023-09-23 23:36:36.809979", "score": "0.9846", "loss": "0.0206", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;) { if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 385, "n_pass": [1992, 129, 129]}
{"time": "2023-09-23 23:36:38.538753", "score": "0.9644", "loss": "0.0501", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){ if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 384, "n_pass": [1994, 130, 130]}
{"time": "2023-09-23 23:36:40.475581", "score": "0.973", "loss": "0.0361", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if (args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 383, "n_pass": [1996, 131, 131]}
{"time": "2023-09-23 23:36:42.194453", "score": "0.9805", "loss": "0.0236", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]= null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 382, "n_pass": [1998, 132, 132]}
{"time": "2023-09-23 23:36:43.951533", "score": "0.9824", "loss": "0.0259", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null) {} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 381, "n_pass": [2005, 133, 133]}
{"time": "2023-09-23 23:36:45.786834", "score": "0.9867", "loss": "0.018", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){} if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 380, "n_pass": [2008, 134, 134]}
{"time": "2023-09-23 23:36:47.537716", "score": "0.9747", "loss": "0.0324", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if (args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 379, "n_pass": [2011, 135, 135]}
{"time": "2023-09-23 23:36:49.372620", "score": "0.9711", "loss": "0.0374", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"-count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 378, "n_pass": [2013, 136, 136]}
{"time": "2023-09-23 23:36:51.289433", "score": "0.9773", "loss": "0.0317", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"count\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 377, "n_pass": [2023, 137, 137]}
{"time": "2023-09-23 23:36:53.061724", "score": "0.9294", "loss": "0.0979", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")) {rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 376, "n_pass": [2024, 138, 138]}
{"time": "2023-09-23 23:36:55.013078", "score": "0.935", "loss": "0.0952", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly = true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 375, "n_pass": [2028, 139, 139]}
{"time": "2023-09-23 23:36:56.960810", "score": "0.9588", "loss": "0.0622", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly= true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 374, "n_pass": [2031, 140, 140]}
{"time": "2023-09-23 23:36:58.890707", "score": "0.8876", "loss": "0.18", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true; } if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 373, "n_pass": [2033, 141, 141]}
{"time": "2023-09-23 23:37:00.708553", "score": "0.9387", "loss": "0.1", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;} if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 372, "n_pass": [2036, 142, 142]}
{"time": "2023-09-23 23:37:02.436992", "score": "0.966", "loss": "0.0438", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if (equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 371, "n_pass": [2038, 143, 143]}
{"time": "2023-09-23 23:37:04.270272", "score": "0.969", "loss": "0.0446", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if(equals(\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 370, "n_pass": [2040, 144, 144]}
{"time": "2023-09-23 23:37:06.142238", "score": "0.8991", "loss": "0.1709", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"-nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 369, "n_pass": [2042, 145, 145]}
{"time": "2023-09-23 23:37:07.949069", "score": "0.9515", "loss": "0.0662", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"nocreate\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 368, "n_pass": [2045, 146, 146]}
{"time": "2023-09-23 23:37:09.699940", "score": "0.9576", "loss": "0.0674", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")) { } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 367, "n_pass": [2046, 147, 147]}
{"time": "2023-09-23 23:37:11.540568", "score": "0.8834", "loss": "0.1707", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){ } if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 366, "n_pass": [2050, 148, 148]}
{"time": "2023-09-23 23:37:13.253814", "score": "0.9088", "loss": "0.1408", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){} if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 365, "n_pass": [2052, 149, 149]}
{"time": "2023-09-23 23:37:15.203313", "score": "0.9386", "loss": "0.0923", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if (equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 364, "n_pass": [2054, 150, 150]}
{"time": "2023-09-23 23:37:17.187656", "score": "0.9552", "loss": "0.0665", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if(equals(\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 363, "n_pass": [2056, 151, 151]}
{"time": "2023-09-23 23:37:19.210211", "score": "0.9657", "loss": "0.0527", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"-check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 362, "n_pass": [2058, 152, 152]}
{"time": "2023-09-23 23:37:21.008667", "score": "0.9869", "loss": "0.0178", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"check\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 361, "n_pass": [2061, 153, 153]}
{"time": "2023-09-23 23:37:22.845600", "score": "0.9374", "loss": "0.0959", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")) { } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 360, "n_pass": [2062, 154, 154]}
{"time": "2023-09-23 23:37:24.639436", "score": "0.9671", "loss": "0.0483", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){ } if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 359, "n_pass": [2066, 155, 155]}
{"time": "2023-09-23 23:37:26.480435", "score": "0.9616", "loss": "0.0598", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){} if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 358, "n_pass": [2068, 156, 156]}
{"time": "2023-09-23 23:37:28.211231", "score": "0.9502", "loss": "0.0664", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if (equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 357, "n_pass": [2070, 157, 157]}
{"time": "2023-09-23 23:37:30.088638", "score": "0.9544", "loss": "0.0684", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if(equals(\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 356, "n_pass": [2072, 158, 158]}
{"time": "2023-09-23 23:37:31.930436", "score": "0.9771", "loss": "0.0346", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"-fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 355, "n_pass": [2074, 159, 159]}
{"time": "2023-09-23 23:37:33.804830", "score": "0.9821", "loss": "0.0259", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"fast\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 354, "n_pass": [2077, 160, 160]}
{"time": "2023-09-23 23:37:35.558285", "score": "0.9762", "loss": "0.032", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")) { } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 353, "n_pass": [2078, 161, 161]}
{"time": "2023-09-23 23:37:37.351470", "score": "0.9744", "loss": "0.0384", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){ } if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 352, "n_pass": [2082, 162, 162]}
{"time": "2023-09-23 23:37:39.052968", "score": "0.9775", "loss": "0.0332", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){} if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 351, "n_pass": [2084, 163, 163]}
{"time": "2023-09-23 23:37:40.806657", "score": "0.9475", "loss": "0.078", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if (equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 350, "n_pass": [2086, 164, 164]}
{"time": "2023-09-23 23:37:42.546678", "score": "0.9516", "loss": "0.0772", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if(equals(\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 349, "n_pass": [2088, 165, 165]}
{"time": "2023-09-23 23:37:44.396496", "score": "0.9526", "loss": "0.0637", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"-merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 348, "n_pass": [2090, 166, 166]}
{"time": "2023-09-23 23:37:46.211219", "score": "0.9704", "loss": "0.0412", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"merge\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 347, "n_pass": [2093, 167, 167]}
{"time": "2023-09-23 23:37:47.999578", "score": "0.984", "loss": "0.0204", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")) {true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 346, "n_pass": [2094, 168, 168]}
{"time": "2023-09-23 23:37:49.805712", "score": "0.8687", "loss": "0.2246", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){true; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 345, "n_pass": [2098, 169, 169]}
{"time": "2023-09-23 23:37:51.621738", "score": "0.9576", "loss": "0.0644", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){; } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 344, "n_pass": [2100, 170, 170]}
{"time": "2023-09-23 23:37:53.477099", "score": "0.9509", "loss": "0.0649", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){ } else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 343, "n_pass": [2101, 171, 171]}
{"time": "2023-09-23 23:37:55.233398", "score": "0.9601", "loss": "0.0579", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){} else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 342, "n_pass": [2102, 172, 172]}
{"time": "2023-09-23 23:37:57.006222", "score": "0.9802", "loss": "0.0283", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}else if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 341, "n_pass": [2104, 173, 173]}
{"time": "2023-09-23 23:37:58.848880", "score": "0.9385", "loss": "0.091", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){} if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 340, "n_pass": [2105, 174, 174]}
{"time": "2023-09-23 23:38:00.735503", "score": "0.9766", "loss": "0.0355", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if (equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 339, "n_pass": [2106, 175, 175]}
{"time": "2023-09-23 23:38:02.630543", "score": "0.978", "loss": "0.0291", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if(equals(\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 338, "n_pass": [2108, 176, 176]}
{"time": "2023-09-23 23:38:04.639101", "score": "0.9812", "loss": "0.0305", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"-compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 337, "n_pass": [2110, 177, 177]}
{"time": "2023-09-23 23:38:06.836664", "score": "0.9399", "loss": "0.0908", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"compressType\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 336, "n_pass": [2113, 178, 178]}
{"time": "2023-09-23 23:38:08.662121", "score": "0.9531", "loss": "0.058", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")) {args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 335, "n_pass": [2114, 179, 179]}
{"time": "2023-09-23 23:38:10.508447", "score": "0.9821", "loss": "0.0245", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[++i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 334, "n_pass": [2118, 180, 180]}
{"time": "2023-09-23 23:38:12.365017", "score": "0.9842", "loss": "0.0222", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[+i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 333, "n_pass": [2122, 181, 181]}
{"time": "2023-09-23 23:38:14.083359", "score": "0.8791", "loss": "0.1996", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i]; }if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 332, "n_pass": [2123, 182, 182]}
{"time": "2023-09-23 23:38:15.803903", "score": "0.9729", "loss": "0.0355", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if (equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 331, "n_pass": [2127, 183, 183]}
{"time": "2023-09-23 23:38:17.579820", "score": "0.9781", "loss": "0.0295", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if(equals(\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 330, "n_pass": [2130, 184, 184]}
{"time": "2023-09-23 23:38:19.420187", "score": "0.8952", "loss": "0.1661", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"-codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 329, "n_pass": [2132, 185, 185]}
{"time": "2023-09-23 23:38:21.123170", "score": "0.9809", "loss": "0.0257", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"codec\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 328, "n_pass": [2135, 186, 186]}
{"time": "2023-09-23 23:38:22.863544", "score": "0.9377", "loss": "0.078", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")) {args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 327, "n_pass": [2136, 187, 187]}
{"time": "2023-09-23 23:38:24.583785", "score": "0.9643", "loss": "0.0527", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[++i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 326, "n_pass": [2140, 188, 188]}
{"time": "2023-09-23 23:38:26.657892", "score": "0.9842", "loss": "0.0201", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[+i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 325, "n_pass": [2144, 189, 189]}
{"time": "2023-09-23 23:38:28.351414", "score": "0.9812", "loss": "0.0254", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i]; }  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 324, "n_pass": [2145, 190, 190]}
{"time": "2023-09-23 23:38:30.088708", "score": "0.9869", "loss": "0.0162", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}  } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 323, "n_pass": [2149, 191, 191]}
{"time": "2023-09-23 23:38:32.004821", "score": "0.9843", "loss": "0.0221", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];} } TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 322, "n_pass": [2151, 192, 192]}
{"time": "2023-09-23 23:38:33.849782", "score": "0.9917", "loss": "0.0136", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}} TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 321, "n_pass": [2152, 193, 193]}
{"time": "2023-09-23 23:38:35.561943", "score": "0.9824", "loss": "0.0236", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}TestSequenceFile(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 320, "n_pass": [2154, 194, 194]}
{"time": "2023-09-23 23:38:37.335755", "score": "0.9237", "loss": "0.1166", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"count\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 319, "n_pass": [2155, 195, 195]}
{"time": "2023-09-23 23:38:39.170433", "score": "0.975", "loss": "0.035", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\" + count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 318, "n_pass": [2158, 196, 196]}
{"time": "2023-09-23 23:38:40.936739", "score": "0.9569", "loss": "0.0712", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+ count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 317, "n_pass": [2160, 197, 197]}
{"time": "2023-09-23 23:38:42.695498", "score": "0.9468", "loss": "0.0801", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"megabytes = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 316, "n_pass": [2162, 198, 198]}
{"time": "2023-09-23 23:38:44.540484", "score": "0.9612", "loss": "0.06", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\" = \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 315, "n_pass": [2169, 199, 199]}
{"time": "2023-09-23 23:38:46.384284", "score": "0.976", "loss": "0.0314", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"= \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 314, "n_pass": [2170, 200, 200]}
{"time": "2023-09-23 23:38:48.187782", "score": "0.9345", "loss": "0.1237", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\" \" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 313, "n_pass": [2171, 201, 201]}
{"time": "2023-09-23 23:38:50.124423", "score": "0.9204", "loss": "0.1135", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\" + megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 312, "n_pass": [2172, 202, 202]}
{"time": "2023-09-23 23:38:52.178782", "score": "0.9776", "loss": "0.0323", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+ megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 311, "n_pass": [2174, 203, 203]}
{"time": "2023-09-23 23:38:54.108655", "score": "0.9691", "loss": "0.0428", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);info(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 310, "n_pass": [2176, 204, 204]}
{"time": "2023-09-23 23:38:55.965708", "score": "0.9818", "loss": "0.0278", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"file = \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 309, "n_pass": [2180, 205, 205]}
{"time": "2023-09-23 23:38:57.925816", "score": "0.9835", "loss": "0.0236", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"= \" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 307, "n_pass": [2204, 206, 206]}
{"time": "2023-09-23 23:38:59.663564", "score": "0.9603", "loss": "0.0578", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly (!create)) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 305, "n_pass": [2205, 207, 207]}
{"time": "2023-09-23 23:39:01.673450", "score": "0.9723", "loss": "0.0429", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) { System(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 303, "n_pass": [2213, 208, 208]}
{"time": "2023-09-23 23:39:03.337494", "score": "0.954", "loss": "0.0677", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) { test(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 301, "n_pass": [2216, 209, 209]}
{"time": "2023-09-23 23:39:05.154263", "score": "0.9174", "loss": "0.1156", "code": "void main(String[]args)throws Exception{usage=\"\";if(length=0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 299, "n_pass": [2228, 210, 210]}
{"time": "2023-09-23 23:39:08.294726", "score": "0.9338", "loss": "0.0906", "code": "void main(String[]args)throws Exception{usage=\"\";if(length0){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 298, "n_pass": [2283, 211, 211]}
{"time": "2023-09-23 23:39:09.992025", "score": "0.717", "loss": "0.613", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly=true;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 297, "n_pass": [2284, 212, 212]}
{"time": "2023-09-23 23:39:12.037840", "score": "0.9358", "loss": "0.1006", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonlytrue;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 296, "n_pass": [2326, 213, 213]}
{"time": "2023-09-23 23:39:13.844462", "score": "0.9545", "loss": "0.0738", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){rwonly;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 295, "n_pass": [2327, 214, 214]}
{"time": "2023-09-23 23:39:17.928111", "score": "0.9619", "loss": "0.0573", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){;}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 294, "n_pass": [2547, 215, 215]}
{"time": "2023-09-23 23:39:19.720363", "score": "0.9189", "loss": "0.1408", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\" \" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 293, "n_pass": [2548, 216, 216]}
{"time": "2023-09-23 23:39:39.931989", "score": "0.9539", "loss": "0.0658", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\" );info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 292, "n_pass": [2918, 217, 217]}
{"time": "2023-09-23 23:39:41.730323", "score": "0.9617", "loss": "0.0547", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");info(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 291, "n_pass": [2920, 218, 218]}
{"time": "2023-09-23 23:39:43.483506", "score": "0.8643", "loss": "0.2126", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"seed\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 290, "n_pass": [2923, 219, 219]}
{"time": "2023-09-23 23:39:45.197873", "score": "0.8998", "loss": "0.1667", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\" + seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 289, "n_pass": [2926, 220, 220]}
{"time": "2023-09-23 23:39:47.086765", "score": "0.8863", "loss": "0.1577", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+ seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 288, "n_pass": [2928, 221, 221]}
{"time": "2023-09-23 23:39:48.918047", "score": "0.9217", "loss": "0.1406", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info(check);info(\" \" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 287, "n_pass": [2930, 222, 222]}
{"time": "2023-09-23 23:39:50.937989", "score": "0.9475", "loss": "0.0886", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();info(\" \" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 286, "n_pass": [2936, 223, 223]}
{"time": "2023-09-23 23:39:52.771321", "score": "0.8743", "loss": "0.2359", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\" \" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 285, "n_pass": [2939, 224, 224]}
{"time": "2023-09-23 23:39:54.614246", "score": "0.8566", "loss": "0.2325", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\" ); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 284, "n_pass": [2942, 225, 225]}
{"time": "2023-09-23 23:39:56.527816", "score": "0.7727", "loss": "0.4869", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\"); (\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 283, "n_pass": [2944, 226, 226]}
{"time": "2023-09-23 23:39:58.257209", "score": "0.933", "loss": "0.1224", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"compressType\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 282, "n_pass": [2947, 227, 227]}
{"time": "2023-09-23 23:40:00.014615", "score": "0.9031", "loss": "0.1482", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\" + compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 281, "n_pass": [2950, 228, 228]}
{"time": "2023-09-23 23:40:01.838245", "score": "0.9103", "loss": "0.1483", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+ compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 280, "n_pass": [2952, 229, 229]}
{"time": "2023-09-23 23:40:03.582718", "score": "0.9406", "loss": "0.0952", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType); (\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 279, "n_pass": [2954, 230, 230]}
{"time": "2023-09-23 23:40:05.409092", "score": "0.9427", "loss": "0.1004", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\" + file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 278, "n_pass": [2958, 231, 231]}
{"time": "2023-09-23 23:40:07.220118", "score": "0.9424", "loss": "0.0888", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+ file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 277, "n_pass": [2962, 232, 232]}
{"time": "2023-09-23 23:40:09.048103", "score": "0.9342", "loss": "0.1061", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file); if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 276, "n_pass": [2964, 233, 233]}
{"time": "2023-09-23 23:40:10.859119", "score": "0.9382", "loss": "0.0989", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if (rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 275, "n_pass": [2968, 234, 234]}
{"time": "2023-09-23 23:40:12.596524", "score": "0.9296", "loss": "0.119", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly ()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 274, "n_pass": [2970, 235, 235]}
{"time": "2023-09-23 23:40:14.437634", "score": "0.8379", "loss": "0.3302", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()) {(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 273, "n_pass": [2973, 236, 236]}
{"time": "2023-09-23 23:40:16.179400", "score": "0.9117", "loss": "0.1404", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(-1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 272, "n_pass": [2977, 237, 237]}
{"time": "2023-09-23 23:40:17.967046", "score": "0.8725", "loss": "0.2108", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1); }(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 271, "n_pass": [2980, 238, 238]}
{"time": "2023-09-23 23:40:19.818602", "score": "0.9079", "loss": "0.1495", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf); if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 270, "n_pass": [2984, 239, 239]}
{"time": "2023-09-23 23:40:21.667730", "score": "0.946", "loss": "0.0886", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if (rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 269, "n_pass": [2990, 240, 240]}
{"time": "2023-09-23 23:40:23.358508", "score": "0.9306", "loss": "0.1187", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly ()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 268, "n_pass": [2992, 241, 241]}
{"time": "2023-09-23 23:40:25.159780", "score": "0.9167", "loss": "0.1516", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()) {(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 267, "n_pass": [2995, 242, 242]}
{"time": "2023-09-23 23:40:27.037754", "score": "0.8852", "loss": "0.1991", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);readTest(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 266, "n_pass": [2999, 243, 243]}
{"time": "2023-09-23 23:40:29.252164", "score": "0.8699", "loss": "0.268", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs); } if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 265, "n_pass": [3005, 244, 244]}
{"time": "2023-09-23 23:40:30.999622", "score": "0.9109", "loss": "0.1716", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);} if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 264, "n_pass": [3010, 245, 245]}
{"time": "2023-09-23 23:40:32.721952", "score": "0.8763", "loss": "0.2016", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if (!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 263, "n_pass": [3012, 246, 246]}
{"time": "2023-09-23 23:40:34.543379", "score": "0.8292", "loss": "0.3437", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(!rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 262, "n_pass": [3014, 247, 247]}
{"time": "2023-09-23 23:40:36.365172", "score": "0.8587", "loss": "0.2904", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly) { if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 261, "n_pass": [3016, 248, 248]}
{"time": "2023-09-23 23:40:38.080393", "score": "0.7779", "loss": "0.4155", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly){ if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 260, "n_pass": [3019, 249, 249]}
{"time": "2023-09-23 23:40:39.905411", "score": "0.8504", "loss": "0.3128", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly){if (merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 259, "n_pass": [3021, 250, 250]}
{"time": "2023-09-23 23:40:41.845770", "score": "0.8231", "loss": "0.3229", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly){if(merge) {mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 258, "n_pass": [3023, 251, 251]}
{"time": "2023-09-23 23:40:43.863404", "score": "0.8192", "loss": "0.3291", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly){if(merge){mergeTest(); } } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 257, "n_pass": [3027, 252, 252]}
{"time": "2023-09-23 23:40:45.806395", "score": "0.7342", "loss": "0.5787", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly){if(merge){mergeTest();} } if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 256, "n_pass": [3033, 253, 253]}
{"time": "2023-09-23 23:40:47.540588", "score": "0.8367", "loss": "0.2898", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly){if(merge){mergeTest();}} if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 255, "n_pass": [3035, 254, 254]}
{"time": "2023-09-23 23:40:49.262075", "score": "0.8076", "loss": "0.3788", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly){if(merge){mergeTest();}}if (check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 254, "n_pass": [3037, 255, 255]}
{"time": "2023-09-23 23:40:51.130922", "score": "0.8601", "loss": "0.256", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly){if(merge){mergeTest();}}if(check) {checkSort(fs); } } finally { close(); } }", "n_tokens": 253, "n_pass": [3039, 256, 256]}
{"time": "2023-09-23 23:40:52.931444", "score": "0.8982", "loss": "0.1774", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly){if(merge){mergeTest();}}if(check){checkSort(fs); } } finally { close(); } }", "n_tokens": 252, "n_pass": [3043, 257, 257]}
{"time": "2023-09-23 23:40:54.708816", "score": "0.7965", "loss": "0.412", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly){if(merge){mergeTest();}}if(check){(fs); } } finally { close(); } }", "n_tokens": 251, "n_pass": [3045, 258, 258]}
{"time": "2023-09-23 23:40:56.717745", "score": "0.7413", "loss": "0.485", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly){if(merge){mergeTest();}}if(check){(fs);} } finally { close(); } }", "n_tokens": 250, "n_pass": [3050, 259, 259]}
{"time": "2023-09-23 23:40:58.491633", "score": "0.7964", "loss": "0.4334", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly){if(merge){mergeTest();}}if(check){(fs);}} finally { close(); } }", "n_tokens": 249, "n_pass": [3052, 260, 260]}
{"time": "2023-09-23 23:41:00.397876", "score": "0.8844", "loss": "0.2145", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly){if(merge){mergeTest();}}if(check){(fs);}}finally { close(); } }", "n_tokens": 248, "n_pass": [3054, 261, 261]}
{"time": "2023-09-23 23:41:02.054401", "score": "0.7383", "loss": "0.5139", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly){if(merge){mergeTest();}}if(check){(fs);}}finally{ close(); } }", "n_tokens": 247, "n_pass": [3056, 262, 262]}
{"time": "2023-09-23 23:41:03.787449", "score": "0.7317", "loss": "0.5533", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly){if(merge){mergeTest();}}if(check){(fs);}}finally{close(); } }", "n_tokens": 246, "n_pass": [3058, 263, 263]}
{"time": "2023-09-23 23:41:05.710466", "score": "0.7815", "loss": "0.4416", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly){if(merge){mergeTest();}}if(check){(fs);}}finally{close();} }", "n_tokens": 245, "n_pass": [3063, 264, 264]}
{"time": "2023-09-23 23:41:07.446627", "score": "0.7699", "loss": "0.4777", "code": "void main(String[]args)throws Exception{usage=\"\";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals(\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){}if((\"\")){args[i];}if((\"\")){args[i];}}(\"\"+count).info(\"\"+megabytes);(\"\");(\"\"+seed).info();(\"\");(\"\"+compressType);(\"\"+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly){if(merge){mergeTest();}}if(check){(fs);}}finally{close();}}", "n_tokens": 244, "n_pass": [3065, 265, 265]}

Minimal simplified code:
void main(String[]args)throws Exception{usage="";if(length){exit();}try{for(;;){if(args[i]=null){}if(args[i].equals("")){}if(("")){}if(("")){}if(("")){}if(("")){}if(("")){args[i];}if(("")){args[i];}}(""+count).info(""+megabytes);("");(""+seed).info();("");(""+compressType);(""+file);if(rwonly()){(1);}(conf);if(rwonly()){(codec);(fs);}if(rwonly){if(merge){mergeTest();}}if(check){(fs);}}finally{close();}}

