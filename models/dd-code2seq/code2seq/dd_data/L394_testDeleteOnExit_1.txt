
path = /Users/lap13494/workspace/ppl-extra-final/java-small/test/hadoop-splitted/TestFileContextDeleteOnExit_testDeleteOnExit_0.java
method_name = testDeleteOnExit
method_body = public void testDeleteOnExit() throws Exception { Path file1 = helper.getTestRootPath(fc, "file1"); createFile(fc, file1, numBlocks, blockSize); fc.deleteOnExit(file1); checkDeleteOnExitData(1, fc, file1); Assert.assertTrue(ShutdownHookManager.get().hasShutdownHook(FileContext.FINALIZER)); Path file2 = helper.getTestRootPath(fc, "dir1/file2"); createFile(fc, file2, numBlocks, blockSize); fc.deleteOnExit(file2); checkDeleteOnExitData(1, fc, file1, file2); Path dir = helper.getTestRootPath(fc, "dir3/dir4/dir5/dir6"); createFile(fc, dir, numBlocks, blockSize); fc.deleteOnExit(dir); checkDeleteOnExitData(1, fc, file1, file2, dir); FileContext.FINALIZER.run(); checkDeleteOnExitData(0, fc, new Path[0]); Assert.assertFalse(exists(fc, file1)); Assert.assertFalse(exists(fc, file2)); Assert.assertFalse(exists(fc, dir)); }
predict, score, loss = testDeleteOnExit, 0.6616949439048767, 4.211523056030273

Trace of simplified code(s):
{"time": "2023-09-24 00:56:54.343016", "score": "0.7001", "loss": "4.1458", "code": "public void testDeleteOnExit() throws Exception { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFile(fc, file1, numBlocks, blockSize); fc.deleteOnExit(file1); checkDeleteOnExitData(1, fc, file1); Assert.assertTrue(ShutdownHookManager.get().hasShutdownHook(FileContext.FINALIZER)); Path file2 = helper.getTestRootPath(fc, \"dir1/file2\"); createFile(fc, file2, numBlocks, blockSize); fc.deleteOnExit(file2); checkDeleteOnExitData(1, fc, file1, file2); Path dir = helper.getTestRootPath(fc, \"dir3/dir4/dir5/dir6\"); createFile(fc, dir, numBlocks, blockSize); fc.deleteOnExit(dir); checkDeleteOnExitData(1, fc, file1, file2, dir); FileContext.FINALIZER.run(); checkDeleteOnExitData(0, fc, new Path[0]); Assert.assertFalse(exists(fc, file1)); Assert.assertFalse(exists(fc, file2)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 301, "n_pass": [1, 1, 1]}
{"time": "2023-09-24 00:56:56.552061", "score": "0.6487", "loss": "4.565", "code": "public void testDeleteOnExit() throws Exception { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFile(file1); checkDeleteOnExitData(1, fc, file1); Assert.assertTrue(ShutdownHookManager.get().hasShutdownHook(FileContext.FINALIZER)); Path file2 = helper.getTestRootPath(fc, \"dir1/file2\"); createFile(fc, file2, numBlocks, blockSize); fc.deleteOnExit(file2); checkDeleteOnExitData(1, fc, file1, file2); Path dir = helper.getTestRootPath(fc, \"dir3/dir4/dir5/dir6\"); createFile(fc, dir, numBlocks, blockSize); fc.deleteOnExit(dir); checkDeleteOnExitData(1, fc, file1, file2, dir); FileContext.FINALIZER.run(); checkDeleteOnExitData(0, fc, new Path[0]); Assert.assertFalse(exists(fc, file1)); Assert.assertFalse(exists(fc, file2)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 283, "n_pass": [46, 2, 2]}
{"time": "2023-09-24 00:56:58.245894", "score": "0.6982", "loss": "4.2065", "code": "public void testDeleteOnExit() throws Exception { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFileAssert.assertTrue(ShutdownHookManager.get().hasShutdownHook(FileContext.FINALIZER)); Path file2 = helper.getTestRootPath(fc, \"dir1/file2\"); createFile(fc, file2, numBlocks, blockSize); fc.deleteOnExit(file2); checkDeleteOnExitData(1, fc, file1, file2); Path dir = helper.getTestRootPath(fc, \"dir3/dir4/dir5/dir6\"); createFile(fc, dir, numBlocks, blockSize); fc.deleteOnExit(dir); checkDeleteOnExitData(1, fc, file1, file2, dir); FileContext.FINALIZER.run(); checkDeleteOnExitData(0, fc, new Path[0]); Assert.assertFalse(exists(fc, file1)); Assert.assertFalse(exists(fc, file2)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 264, "n_pass": [47, 3, 3]}
{"time": "2023-09-24 00:57:00.130450", "score": "0.7534", "loss": "3.3601", "code": "public void testDeleteOnExit() throws Exception { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFilePath file2 = helper.getTestRootPath(fc, \"dir1/file2\"); createFile(fc, file2, numBlocks, blockSize); fc.deleteOnExit(file2); checkDeleteOnExitData(1, fc, file1, file2); Path dir = helper.getTestRootPath(fc, \"dir3/dir4/dir5/dir6\"); createFile(fc, dir, numBlocks, blockSize); fc.deleteOnExit(dir); checkDeleteOnExitData(1, fc, file1, file2, dir); FileContext.FINALIZER.run(); checkDeleteOnExitData(0, fc, new Path[0]); Assert.assertFalse(exists(fc, file1)); Assert.assertFalse(exists(fc, file2)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 245, "n_pass": [48, 4, 4]}
{"time": "2023-09-24 00:57:01.859497", "score": "0.7198", "loss": "3.968", "code": "public void testDeleteOnExit() throws Exception { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFilePath file2 = helper.getTestRootPath(fc, \"dir1/file2\"); createFile(fc, file2, numBlocks, blockSize); fc.deleteOnExit(file2); checkDeleteOnExitData(1, fc, fc, \"dir3/dir4/dir5/dir6\"); createFile(fc, dir, numBlocks, blockSize); fc.deleteOnExit(dir); checkDeleteOnExitData(1, fc, file1, file2, dir); FileContext.FINALIZER.run(); checkDeleteOnExitData(0, fc, new Path[0]); Assert.assertFalse(exists(fc, file1)); Assert.assertFalse(exists(fc, file2)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 226, "n_pass": [52, 5, 5]}
{"time": "2023-09-24 00:57:03.622043", "score": "0.7285", "loss": "4.0613", "code": "public void testDeleteOnExit() throws Exception { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFilePath file2 = helper.getTestRootPath(fc, \"dir1/file2\"); createFile(fc, file2, numBlocks, blockSize); fc.deleteOnExit(file2); checkDeleteOnExitData(1, fc, fc, \"dir3/dir4/dir5/dir6\"); createFile(fc, dir, numBlocks, blockSize); fc.deleteOnExit( dir); FileContext.FINALIZER.run(); checkDeleteOnExitData(0, fc, new Path[0]); Assert.assertFalse(exists(fc, file1)); Assert.assertFalse(exists(fc, file2)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 207, "n_pass": [55, 6, 6]}
{"time": "2023-09-24 00:57:07.020910", "score": "0.722", "loss": "4.3413", "code": "public void testDeleteOnExit() throws Exception { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFilePath file2 = helper.getTestRootPath(fc, \"dir1/file2\"); createFile(fc, file2, numBlocks, blockSize); fc.deleteOnExit(file2); checkDeleteOnExitData(1, fc, fc, \"dir3/dir4/dir5/dir6\"); createFile(fc, dir, numBlocks, blockSize); fc.deleteOnExit( dir); FileContext.FINALIZER.run(); checkDeleteOnExitData(0, fc, new Path[0]); Assert.assertFalse(exists(fc)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 188, "n_pass": [58, 8, 7]}
{"time": "2023-09-24 00:57:08.837228", "score": "0.7343", "loss": "3.5785", "code": "public void testDeleteOnExit() throws Exception { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFilePath file2 = helper.getTestRootPath(fc, \"dir1/file2\"); createFile(fc, file2, numBlocks, blockSize); fc.deleteOnExit(file2); checkDeleteOnExitData(1, fc, fc, \"dir3/dir4/dir5/dir6\"); createFile(fc, dir, numBlocks, blockSize); fc.deleteOnExit(fc, new Path[0]); Assert.assertFalse(exists(fc)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 169, "n_pass": [67, 9, 8]}
{"time": "2023-09-24 00:57:10.866439", "score": "0.7432", "loss": "3.5901", "code": "public void testDeleteOnExit() throws Exception { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFilegetTestRootPath(fc, \"dir1/file2\"); createFile(fc, file2, numBlocks, blockSize); fc.deleteOnExit(file2); checkDeleteOnExitData(1, fc, fc, \"dir3/dir4/dir5/dir6\"); createFile(fc, dir, numBlocks, blockSize); fc.deleteOnExit(fc, new Path[0]); Assert.assertFalse(exists(fc)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 160, "n_pass": [103, 10, 9]}
{"time": "2023-09-24 00:57:12.660797", "score": "0.8119", "loss": "2.699", "code": "public void testDeleteOnExit() throws Exception { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFilegetTestRootPath(fc, \"dir1/file2\"); createFile(fcblockSize); fc.deleteOnExit(file2); checkDeleteOnExitData(1, fc, fc, \"dir3/dir4/dir5/dir6\"); createFile(fc, dir, numBlocks, blockSize); fc.deleteOnExit(fc, new Path[0]); Assert.assertFalse(exists(fc)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 151, "n_pass": [106, 11, 10]}
{"time": "2023-09-24 00:57:16.443320", "score": "0.7664", "loss": "3.2789", "code": "public void testDeleteOnExit() throws Exception { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFilegetTestRootPath(fc, \"dir1/file2\"); createFile(fcblockSize); fc.deleteOnExit(filefc, fc, \"dir3/dir4/dir5/dir6\"); createFile(fc, dir, numBlocks, blockSize); fc.deleteOnExit(fc, new Path[0]); Assert.assertFalse(exists(fc)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 142, "n_pass": [108, 13, 11]}
{"time": "2023-09-24 00:57:18.384796", "score": "0.6929", "loss": "4.0041", "code": "public void testDeleteOnExit() throws Exception { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFilegetTestRootPath(fc, \"dir1/file2\"); createFile(fcfc, fc, \"dir3/dir4/dir5/dir6\"); createFile(fc, dir, numBlocks, blockSize); fc.deleteOnExit(fc, new Path[0]); Assert.assertFalse(exists(fc)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 133, "n_pass": [123, 14, 12]}
{"time": "2023-09-24 00:57:20.275146", "score": "0.7426", "loss": "3.6674", "code": "public void testDeleteOnExit() throws Exception { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFilegetTestRootPath(fc, \"dir1/file2\"); createFile(fcfc, fc, \"dir35/dir6\"); createFile(fc, dir, numBlocks, blockSize); fc.deleteOnExit(fc, new Path[0]); Assert.assertFalse(exists(fc)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 128, "n_pass": [168, 15, 13]}
{"time": "2023-09-24 00:57:22.035231", "score": "0.7733", "loss": "2.9449", "code": "public void testDeleteOnExit() throws Exception { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFilegetTestRootPath(fc, \"dir1/file2\"); createFile(fcfc, fc, \"dir35/dir6\"); createFile( numBlocks, blockSize); fc.deleteOnExit(fc, new Path[0]); Assert.assertFalse(exists(fc)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 123, "n_pass": [170, 16, 14]}
{"time": "2023-09-24 00:57:23.766326", "score": "0.8102", "loss": "2.1165", "code": "public void testDeleteOnExit() throws Exception { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFilegetTestRootPath(fc, \"dir1/file2\"); createFile(fcfc, fc, \"dir35/dir6\"); createFile(); fc.deleteOnExit(fc, new Path[0]); Assert.assertFalse(exists(fc)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 118, "n_pass": [171, 17, 15]}
{"time": "2023-09-24 00:57:25.965072", "score": "0.767", "loss": "2.653", "code": "public void testDeleteOnExit() { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFilegetTestRootPath(fc, \"dir1/file2\"); createFile(fcfc, fc, \"dir35/dir6\"); createFile(); fc.deleteOnExit(fc, new Path[0]); Assert.assertFalse(exists(fc)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 114, "n_pass": [183, 18, 16]}
{"time": "2023-09-24 00:57:27.725345", "score": "0.8126", "loss": "2.2687", "code": "public void testDeleteOnExit() { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFilegetTestRootPath(fc, \"dir1/file2\"); createFile(fcfc, fc, \"dir35/dir6\"); fc.deleteOnExit(fc, new Path[0]); Assert.assertFalse(exists(fc)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 109, "n_pass": [196, 19, 17]}
{"time": "2023-09-24 00:57:30.068325", "score": "0.7734", "loss": "2.7211", "code": "public void testDeleteOnExit() { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFilegetTestRootPath(fc, \"dir1/file2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc, new Path[0]); Assert.assertFalse(exists(fc)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 106, "n_pass": [267, 20, 18]}
{"time": "2023-09-24 00:57:31.784933", "score": "0.7518", "loss": "2.615", "code": "public void testDeleteOnExit() { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFilegetTestRootPath(fc, \"dir1/file2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]); Assert.assertFalse(exists(fc)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 103, "n_pass": [272, 21, 19]}
{"time": "2023-09-24 00:57:33.529323", "score": "0.779", "loss": "2.4748", "code": "public void testDeleteOnExit() { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFilegetTestRootPath(fc, \"dir1/file2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists(fc)); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 100, "n_pass": [275, 22, 20]}
{"time": "2023-09-24 00:57:35.315586", "score": "0.7515", "loss": "2.7408", "code": "public void testDeleteOnExit() { Path file1 = helper.getTestRootPath(fc, \"file1\"); createFilegetTestRootPath(fc, \"dir1/file2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 97, "n_pass": [277, 23, 21]}
{"time": "2023-09-24 00:57:42.684229", "score": "0.7446", "loss": "2.6215", "code": "public void testDeleteOnExit() { file1 = helper.getTestRootPath(fc, \"file1\"); createFilegetTestRootPath(fc, \"dir1/file2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 95, "n_pass": [289, 27, 22]}
{"time": "2023-09-24 00:57:44.377892", "score": "0.7178", "loss": "2.9386", "code": "public void testDeleteOnExit() { file1 = helper(fc, \"file1\"); createFilegetTestRootPath(fc, \"dir1/file2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 93, "n_pass": [293, 28, 23]}
{"time": "2023-09-24 00:57:46.082365", "score": "0.742", "loss": "2.7276", "code": "public void testDeleteOnExit() { file1 = helper(fc, \"file1\");getTestRootPath(fc, \"dir1/file2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 91, "n_pass": [299, 29, 24]}
{"time": "2023-09-24 00:57:47.838509", "score": "0.7714", "loss": "2.4387", "code": "public void testDeleteOnExit() { file1 = helper(fc, \"file1\");getTestRootPath( \"dir1/file2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 89, "n_pass": [301, 30, 25]}
{"time": "2023-09-24 00:57:49.594255", "score": "0.7558", "loss": "2.6068", "code": "public void testDeleteOnExit() { file1 = helper(fc, \"file1\");getTestRootPath( \"/file2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 87, "n_pass": [303, 31, 26]}
{"time": "2023-09-24 00:57:51.292283", "score": "0.7761", "loss": "2.4493", "code": "public void testDeleteOnExit() { file1 = helper(fc, \"file1\");getTestRootPath( \"2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(fc, dir)); }", "n_tokens": 85, "n_pass": [304, 32, 27]}
{"time": "2023-09-24 00:57:54.870452", "score": "0.7666", "loss": "2.7083", "code": "public void testDeleteOnExit() { file1 = helper(fc, \"file1\");getTestRootPath( \"2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 82, "n_pass": [323, 34, 28]}
{"time": "2023-09-24 00:57:56.541244", "score": "0.7666", "loss": "2.7083", "code": "void testDeleteOnExit() { file1 = helper(fc, \"file1\");getTestRootPath( \"2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 80, "n_pass": [326, 35, 29]}
{"time": "2023-09-24 00:58:05.875405", "score": "0.7666", "loss": "2.7083", "code": "void testDeleteOnExit(){ file1 = helper(fc, \"file1\");getTestRootPath( \"2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 79, "n_pass": [434, 37, 30]}
{"time": "2023-09-24 00:58:07.613605", "score": "0.7666", "loss": "2.7083", "code": "void testDeleteOnExit(){file1 = helper(fc, \"file1\");getTestRootPath( \"2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 78, "n_pass": [436, 38, 31]}
{"time": "2023-09-24 00:58:09.652799", "score": "0.7666", "loss": "2.7083", "code": "void testDeleteOnExit(){file = helper(fc, \"file1\");getTestRootPath( \"2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 77, "n_pass": [438, 39, 32]}
{"time": "2023-09-24 00:58:12.385796", "score": "0.7666", "loss": "2.7083", "code": "void testDeleteOnExit(){file= helper(fc, \"file1\");getTestRootPath( \"2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 76, "n_pass": [439, 40, 33]}
{"time": "2023-09-24 00:58:14.184611", "score": "0.7666", "loss": "2.7083", "code": "void testDeleteOnExit(){file=helper(fc, \"file1\");getTestRootPath( \"2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 75, "n_pass": [441, 41, 34]}
{"time": "2023-09-24 00:58:16.030441", "score": "0.7666", "loss": "2.7083", "code": "void testDeleteOnExit(){file=helper(fc,\"file1\");getTestRootPath( \"2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 74, "n_pass": [446, 42, 35]}
{"time": "2023-09-24 00:58:17.754528", "score": "0.7787", "loss": "2.5655", "code": "void testDeleteOnExit(){file=helper(fc,\"1\");getTestRootPath( \"2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 73, "n_pass": [448, 43, 36]}
{"time": "2023-09-24 00:58:19.529987", "score": "0.7711", "loss": "2.5871", "code": "void testDeleteOnExit(){file=helper(fc,\"\");getTestRootPath( \"2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 72, "n_pass": [449, 44, 37]}
{"time": "2023-09-24 00:58:21.202111", "score": "0.769", "loss": "2.531", "code": "void testDeleteOnExit(){file=helper(fc,\"\");( \"2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 71, "n_pass": [453, 45, 38]}
{"time": "2023-09-24 00:58:22.939046", "score": "0.769", "loss": "2.531", "code": "void testDeleteOnExit(){file=helper(fc,\"\");(\"2\"); createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 70, "n_pass": [455, 46, 39]}
{"time": "2023-09-24 00:58:26.398576", "score": "0.769", "loss": "2.531", "code": "void testDeleteOnExit(){file=helper(fc,\"\");(\"2\");createFile(fcfc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 69, "n_pass": [461, 48, 40]}
{"time": "2023-09-24 00:58:28.147932", "score": "0.7907", "loss": "2.198", "code": "void testDeleteOnExit(){file=helper(fc,\"\");(\"2\");createFile(fc, fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 68, "n_pass": [464, 49, 41]}
{"time": "2023-09-24 00:58:29.876420", "score": "0.7907", "loss": "2.198", "code": "void testDeleteOnExit(){file=helper(fc,\"\");(\"2\");createFile(fc,fc, \"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 67, "n_pass": [467, 50, 42]}
{"time": "2023-09-24 00:58:31.599898", "score": "0.7907", "loss": "2.198", "code": "void testDeleteOnExit(){file=helper(fc,\"\");(\"2\");createFile(fc,fc,\"dirdir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 66, "n_pass": [470, 51, 43]}
{"time": "2023-09-24 00:58:33.293878", "score": "0.8089", "loss": "1.9806", "code": "void testDeleteOnExit(){file=helper(fc,\"\");(\"2\");createFile(fc,fc,\"dir6\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 65, "n_pass": [472, 52, 44]}
{"time": "2023-09-24 00:58:36.677169", "score": "0.8089", "loss": "1.9806", "code": "void testDeleteOnExit(){file=helper(fc,\"\");(\"2\");createFile(fc,fc,\"dir\"); fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 64, "n_pass": [474, 54, 45]}
{"time": "2023-09-24 00:58:38.391820", "score": "0.8089", "loss": "1.9806", "code": "void testDeleteOnExit(){file=helper(fc,\"\");(\"2\");createFile(fc,fc,\"dir\");fc.deleteOnExit(fc,Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 63, "n_pass": [478, 55, 46]}
{"time": "2023-09-24 00:58:41.917627", "score": "0.7783", "loss": "2.2077", "code": "void testDeleteOnExit(){file=helper(fc,\"\");(\"2\");createFile(fc,fc,\"dir\");fc.deleteOnExit(fcPath[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 62, "n_pass": [484, 57, 47]}
{"time": "2023-09-24 00:58:49.473389", "score": "0.7888", "loss": "2.1708", "code": "void testDeleteOnExit(){file=helper(fc,\"\");(\"2\");createFile(fcfc,\"dir\");fc.deleteOnExit(fcPath[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 61, "n_pass": [522, 61, 48]}
{"time": "2023-09-24 00:58:51.154330", "score": "0.8221", "loss": "1.7897", "code": "void testDeleteOnExit(){file=helper(fc,\"\");(\"2\");createFile(fc,\"dir\");fc.deleteOnExit(fcPath[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 60, "n_pass": [523, 62, 49]}
{"time": "2023-09-24 00:58:52.931470", "score": "0.7933", "loss": "2.0019", "code": "void testDeleteOnExit(){file=helper(fc,\"\");(\"2\");createFile(fc,\"\");fc.deleteOnExit(fcPath[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 59, "n_pass": [526, 63, 50]}
{"time": "2023-09-24 00:58:56.473812", "score": "0.787", "loss": "2.0874", "code": "void testDeleteOnExit(){file=helper(fc,\"\");(\"2\");createFile(fc,\"\");fc.deleteOnExit(Path[0]);assertFalse(exists); Assert.assertFalse(exists(dir)); }", "n_tokens": 58, "n_pass": [534, 65, 51]}
{"time": "2023-09-24 00:58:58.171951", "score": "0.7193", "loss": "2.8273", "code": "void testDeleteOnExit(){file=helper(fc,\"\");(\"2\");createFile(fc,\"\");fc.deleteOnExit(Path[0]);assertFalse(exists); assertFalse(exists(dir)); }", "n_tokens": 56, "n_pass": [541, 66, 52]}
{"time": "2023-09-24 00:59:09.149333", "score": "0.7193", "loss": "2.8273", "code": "void testDeleteOnExit(){file=helper(fc,\"\");(\"2\");createFile(fc,\"\");fc.deleteOnExit(Path[0]);assertFalse(exists); assertFalse(exists(dir));}", "n_tokens": 55, "n_pass": [614, 71, 53]}
{"time": "2023-09-24 00:59:18.841632", "score": "0.7159", "loss": "3.099", "code": "void testDeleteOnExit(){file=helper(fc,\"\");(\"2\");createFile(fc,\"\");fc.deleteOnExit(Path[0]);assertFalse(); assertFalse(exists(dir));}", "n_tokens": 54, "n_pass": [657, 76, 54]}
{"time": "2023-09-24 00:59:20.612689", "score": "0.7159", "loss": "3.099", "code": "void testDeleteOnExit(){file=helper(fc,\"\");(\"2\");createFile(fc,\"\");fc.deleteOnExit(Path[0]);assertFalse();assertFalse(exists(dir));}", "n_tokens": 53, "n_pass": [660, 77, 55]}

Minimal simplified code:
void testDeleteOnExit(){file=helper(fc,"");("2");createFile(fc,"");fc.deleteOnExit(Path[0]);assertFalse();assertFalse(exists(dir));}

